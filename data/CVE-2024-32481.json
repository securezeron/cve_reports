{"id": "CVE-2024-32481", "sourceIdentifier": "security-advisories@github.com", "published": "2024-04-25T17:15:50.273", "lastModified": "2024-04-25T17:24:59.967", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. Starting in version 0.3.8 and prior to version 0.4.0b1, when looping over a `range` of the form `range(start, start + N)`, if `start` is negative, the execution will always revert. This issue is caused by an incorrect assertion inserted by the code generation of the range `stmt.parse_For_range()`. The issue arises when `start` is signed, instead of using `sle`, `le` is used and `start` is interpreted as an unsigned integer for the comparison. If it is a negative number, its 255th bit is set to `1` and is hence interpreted as a very large unsigned integer making the assertion always fail. Any contract having a `range(start, start + N)` where `start` is a signed integer with the possibility for `start` to be negative is affected. If a call goes through the loop while supplying a negative `start` the execution will revert. Version 0.4.0b1 fixes the issue."}, {"lang": "es", "value": "Vyper es un lenguaje de contrato inteligente pit\u00f3nico para la m\u00e1quina virtual Ethereum. A partir de la versi\u00f3n 0.3.8 y antes de la versi\u00f3n 0.4.0b1, al recorrer un \"rango\" de la forma \"rango (inicio, inicio + N)\", si \"inicio\" es negativo, la ejecuci\u00f3n siempre se revertir\u00e1. Este problema se debe a una aserci\u00f3n incorrecta insertada durante la generaci\u00f3n de c\u00f3digo del rango `stmt.parse_For_range()`. El problema surge cuando se firma \"start\", en lugar de usar \"sle\", se usa \"le\" y \"start\" se interpreta como un entero sin signo para la comparaci\u00f3n. Si es un n\u00famero negativo, su bit 255 se establece en \"1\" y, por lo tanto, se interpreta como un entero sin signo muy grande, lo que hace que la afirmaci\u00f3n siempre falle. Cualquier contrato que tenga un \"rango (inicio, inicio + N)\" donde \"inicio\" es un entero con signo con la posibilidad de que \"inicio\" sea negativo se ve afectado. Si una llamada pasa por el bucle mientras proporciona un \"inicio\" negativo, la ejecuci\u00f3n se revertir\u00e1. La versi\u00f3n 0.4.0b1 soluciona el problema."}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-681"}]}], "references": [{"url": "https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/codegen/stmt.py#L286-L287", "source": "security-advisories@github.com"}, {"url": "https://github.com/vyperlang/vyper/commit/3de1415ee77a9244eb04bdb695e249d3ec9ed868", "source": "security-advisories@github.com"}, {"url": "https://github.com/vyperlang/vyper/commit/5319cfbe14951e007ccdb323257e5ada869b35d5", "source": "security-advisories@github.com"}, {"url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-ppx5-q359-pvwj", "source": "security-advisories@github.com"}], "techniques": [{"techniqueID": "T1190", "comment": "CVE-2024-32481 - Vyper's incorrect assertion in range parsing can be used to cause a reverts, allowing for potential exploitation of the vulnerability. Defending against this involves validating input and ensuring proper bounds checking."}, {"techniqueID": "T1027", "comment": "CVE-2024-32481 - Code injection via the range function can lead to execution of arbitrary code, highlighting the importance of input validation and sanitization in preventing attacks."}, {"techniqueID": "T1210", "comment": "CVE-2024-32481 - Reverting the contract can be used to manipulate the storage and execution of smart contracts, requiring careful validation of contract code and input parameters."}], "stix_bundle": {"type": "bundle", "id": "bundle--3219f7a3-1e5d-4579-93c8-0fbc74e4f9c4", "objects": [{"type": "vulnerability", "id": "vulnerability--cve-2024-32481", "created_by_ref": "organization--organization-1", "description": "CWE-681: Improper Control of a Resource Through its Lifetime", "affected_range": "Vyper 0.3.8 to 0.4.0b1", "severity": "MEDIUM", "references": [{"url": "https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/codegen/stmt.py#L286-L287"}, {"url": "https://github.com/vyperlang/vyper/commit/3de1415ee77a9244eb04bdb695e249d3ec9ed868"}, {"url": "https://github.com/vyperlang/vyper/commit/5319cfbe14951e007ccdb323257e5ada869b35d5"}, {"url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-ppx5-q359-pvwj"}], "related_configurations": [{"type": "configuration", "id": "configuration--config-correct-input-validation"}], "notes": [{"note": "Correct input validation is crucial in preventing attacks.", "relates_to": "configuration--config-correct-input-validation"}]}, {"type": "configuration", "id": "configuration--config-correct-input-validation", "created_by_ref": "organization--organization-1", "description": "Develop and Implement Correct Input Validation Techniques", "relates_to": "vulnerability--cve-2024-32481", "notes": [{"note": "Ensure all inputs are validated and sanitized to prevent code injection.", "relates_to": "technique--T1027"}]}, {"type": "attack-pattern", "id": "attack-pattern--T1190", "created_by_ref": "organization--organization-1", "name": "Code Injection via Incorrect Statement Piping", "description": "An adversary injects malicious code into a system through an incorrect statement piping vulnerability.", "relates_to": "vulnerability--cve-2024-32481", "labels": ["code injection", "incorrect statement piping"], "notes": [{"note": "This attack pattern demonstrates how an adversary can exploit the vulnerability to inject code.", "relates_to": "vulnerability--cve-2024-32481"}]}, {"type": "attack-pattern", "id": "attack-pattern--T1027", "created_by_ref": "organization--organization-1", "name": "Code Injection via Input Validation Bypass", "description": "An adversary injects malicious code into a system by bypassing input validation mechanisms.", "relates_to": "vulnerability--cve-2024-32481", "labels": ["code injection", "input validation bypass"], "notes": [{"note": "This attack pattern highlights the importance of input validation and sanitization.", "relates_to": "vulnerability--cve-2024-32481"}]}, {"type": "course-of-action", "id": "course-of-action--COA-1", "created_by_ref": "organization--organization-1", "name": "Implement Correct Input Validation", "description": "Implement correct input validation and sanitization techniques to prevent code injection vulnerabilities.", "relates_to": "vulnerability--cve-2024-32481", "impact": "Reduces the risk of code injection attacks by ensuring proper input validation and sanitization."}]}, "technical_analysis": {"Introduction": "The CVE-2024-32481 vulnerability in Vyper allows for code injection via an incorrect assertion in the range parsing function, leading to potential exploitation and reverts.", "Impact and Scope": "This vulnerability affects all Vyper versions between 0.3.8 and 0.4.0b1, and has a CVSS score of 5.3.", "Related MITRE ATT&CK Techniques": "T1190, T1027, T1210", "Technical Details": "The vulnerability arises from an incorrect assertion in the range parsing function, allowing for code injection through malformed input.", "Detection": "Detecting this vulnerability requires monitoring for suspicious behavior and anomalies in the system.", "Mitigation": "Implementing correct input validation and sanitization techniques can prevent code injection attacks and reduce the risk of exploitation.", "Conclusion": "The CVE-2024-32481 vulnerability highlights the importance of proper input validation and sanitization in preventing code injection attacks."}, "executive_analysis": {"Overview": "The CVE-2024-32481 vulnerability in Vyper exposes the risk of code injection attacks and emphasizes the need for proper input validation and sanitization.", "Business Impact": "This vulnerability can lead to significant financial losses and reputation damage if exploited.", "Technical Impact": "The vulnerability affects all Vyper versions between 0.3.8 and 0.4.0b1, making it critical to patch and update all affected systems.", "Mitigation Strategies": "Implementing correct input validation and sanitization techniques, as well as monitoring for suspicious behavior, can mitigate the risk of exploitation.", "Recommendations": "Recommend patching and updating all affected systems, as well as implementing measures to prevent code injection attacks.", "Conclusions": "The CVE-2024-32481 vulnerability highlights the importance of proper input validation and sanitization in preventing code injection attacks, and emphasizes the need for immediate action to mitigate the risk."}}