{"id": "CVE-2024-32024", "sourceIdentifier": "security-advisories@github.com", "published": "2024-04-16T15:15:37.253", "lastModified": "2024-04-19T16:15:10.680", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "Kohya_ss is a GUI for Kohya's Stable Diffusion trainers. Kohya_ss is vulnerable to a path injection in the `common_gui.py` `add_pre_postfix` function. This vulnerability is fixed in 23.1.5."}, {"lang": "es", "value": "Kohya_ss es una GUI para los entrenadores Stable Diffusion de Kohya. Kohya_ss es vulnerable a una inyecci\u00f3n de ruta en la funci\u00f3n `common_gui.py` `add_pre_postfix`. Esta vulnerabilidad se solucion\u00f3 en 23.1.5."}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 2.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-22"}]}], "references": [{"url": "https://github.com/bmaltais/kohya_ss/commit/25bb1303fff21cb5bae17236d53504e85c1866df", "source": "security-advisories@github.com"}, {"url": "https://github.com/bmaltais/kohya_ss/security/advisories/GHSA-h9fp-j58h-wwrc", "source": "security-advisories@github.com"}, {"url": "https://securitylab.github.com/advisories/GHSL-2024-019_GHSL-2024-024_kohya_ss", "source": "security-advisories@github.com"}], "techniques": [{"techniqueID": "T1128", "comment": "CVE-2024-32024 - This path injection vulnerability allows attackers to inject arbitrary paths, leading to potential privilege escalation and unauthorized access. To defend against this, implement proper input validation and sanitization techniques to prevent malicious input."}, {"techniqueID": "T1547", "comment": "CVE-2024-32024 - This vulnerability is a great example of how a GUI-based application can be vulnerable to path injection attacks. To defend against this, implement proper input validation and sanitization techniques to prevent malicious input."}, {"techniqueID": "T1210", "comment": "CVE-2024-32024 - This vulnerability is an example of a CWE-22 flaw, which is a common vulnerability in many applications. To defend against this, implement proper input validation and sanitization techniques to prevent malicious input."}], "stix_bundle": {"$schema": "https://docs.oasis-open.org/cti/stix/2.1/stix-core-v2.1.xsd", "type": "bundle", "id": "1.0", "creator": "AI Security Analyst", "created": "2024-04-22T12:00:00.000Z", "modified": "2024-04-22T12:00:00.000Z", "objects": [{"type": "vulnerability", "id": "cve-2024-32024", "name": "CVE-2024-32024 - Path Injection Vulnerability", "description": "A path injection vulnerability in the Kohya_ss GUI-based application on version 23.1 allows an attacker to inject arbitrary paths, leading to potential privilege escalation and unauthorized access.", "severity": "medium", "score": 6.5, "attack_vector": "network", "attack_complexity": "low", "impact": {"confidentiality": "low", "integrity": "low", "availability": "none"}, "references": [{"href": "https://github.com/bmaltais/kohya_ss/commit/25bb1303fff21cb5bae17236d53504e85c1866df", "title": "Patch commit for CVE-2024-32024"}, {"href": "https://github.com/bmaltais/kohya_ss/security/advisories/GHSA-h9fp-j58h-wwrc", "title": "GitHub Security Advisory for CVE-2024-32024"}]}, {"type": "course_of_action", "id": "mitigate-cve-2024-32024", "name": "Mitigate CVE-2024-32024", "description": "Apply the patch provided by the developers to fix the vulnerability", "associated_analyst": "AI Security Analyst", "created": "2024-04-22T12:00:00.000Z", "modified": "2024-04-22T12:00:00.000Z", "notes": [{"content": "Input validation and sanitization should be implemented to prevent malicious input."}]}], "relationships": [{"type": "related_to", "id_ref": "cve-2024-32024", "id_obj": "mitigate-cve-2024-32024"}]}, "technical_analysis": {"Introduction": "The Kohya_ss GUI-based application has been found to have a path injection vulnerability (CVE-2024-32024) which allows attackers to inject arbitrary paths, leading to potential privilege escalation and unauthorized access.", "Impact and Scope": "This vulnerability has a CVSS score of 6.5, with a low attack complexity and high potential impact. The attack vector is network-based, and the vulnerability is present in version 23.1 of the application.", "Related MITRE ATT&CK Techniques": "The vulnerability is related to MITRE ATT&CK techniques T1128, T1547, and T1210, all of which involve path injection attacks.", "Technical Details": "The vulnerability is caused by a flaw in the `common_gui.py` `add_pre_postfix` function, which allows attackers to inject arbitrary paths.", "Detection": "This vulnerability can be detected by monitoring the application's logs for suspicious path injection attempts.", "Mitigation": "Apply the patch provided by the developers to fix the vulnerability, and implement proper input validation and sanitization techniques to prevent malicious input.", "Conclusion": "The Kohya_ss GUI-based application has a path injection vulnerability that allows attackers to inject arbitrary paths, leading to potential privilege escalation and unauthorized access. It is essential to apply the patch and implement proper input validation and sanitization techniques to prevent malicious input."}, "executive_analysis": {"Overview": "The Kohya_ss GUI-based application has been found to have a path injection vulnerability (CVE-2024-32024) which allows attackers to inject arbitrary paths, leading to potential privilege escalation and unauthorized access.", "Business Impact": "The vulnerability has the potential to cause significant business disruption and reputational damage if left unmitigated.", "Technical Impact": "The vulnerability allows attackers to inject arbitrary paths, leading to potential privilege escalation and unauthorized access.", "Mitigation Strategies": "Apply the patch provided by the developers to fix the vulnerability, and implement proper input validation and sanitization techniques to prevent malicious input.", "Recommendations": "Implement proper input validation and sanitization techniques to prevent malicious input, and monitor the application's logs for suspicious path injection attempts.", "Conclusions": "The Kohya_ss GUI-based application has a path injection vulnerability that requires immediate attention. It is essential to apply the patch and implement proper input validation and sanitization techniques to prevent malicious input and mitigate the risk of privilege escalation and unauthorized access."}}