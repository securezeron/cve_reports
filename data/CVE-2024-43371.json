{"id": "CVE-2024-43371", "sourceIdentifier": "security-advisories@github.com", "published": "2024-08-21T15:15:09.190", "lastModified": "2024-08-23T16:20:10.060", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "CKAN is an open-source data management system for powering data hubs and data portals. There are a number of CKAN plugins, including XLoader, DataPusher, Resource proxy and ckanext-archiver, that work by downloading the contents of local or remote files in order to perform some actions with their contents (e.g. pushing to the DataStore, streaming contents or saving a local copy). All of them use the resource URL, and there are currently no checks to limit what URLs can be requested. This means that a malicious (or unaware) user can create a resource with a URL pointing to a place where they should not have access in order for one of the previous tools to retrieve it (known as a Server Side Request Forgery). Users wanting to protect against these kinds of attacks can use one or a combination of the following approaches: (1) Use a separate HTTP proxy like Squid that can be used to allow / disallow IPs, domains etc as needed, and make CKAN extensions aware of this setting via the ckan.download_proxy config option. (2) Implement custom firewall rules to prevent access to restricted resources. (3) Use custom validators on the resource url field to block/allow certain domains or IPs. All latest versions of the plugins listed above support the ckan.download_proxy settings. Support for this setting in the Resource Proxy plugin was included in CKAN 2.10.5 and 2.11.0."}, {"lang": "es", "value": "CKAN es un sistema de gesti\u00f3n de datos de c\u00f3digo abierto para impulsar centros y portales de datos. Hay una serie de complementos de CKAN, incluidos XLoader, DataPusher, Resource proxy y ckanext-archiver, que funcionan descargando el contenido de archivos locales o remotos para realizar algunas acciones con sus contenidos (por ejemplo, enviar al DataStore, transmitir contenidos o guardando una copia local). Todos ellos utilizan la URL del recurso y actualmente no existen comprobaciones para limitar las URL que se pueden solicitar. Esto significa que un usuario malintencionado (o inconsciente) puede crear un recurso con una URL que apunte a un lugar al que no deber\u00eda tener acceso para que una de las herramientas anteriores lo recupere (conocido como Server Side Request Forgery). Los usuarios que deseen protegerse contra este tipo de ataques pueden usar uno o una combinaci\u00f3n de los siguientes enfoques: (1) Usar un proxy HTTP separado como Squid que se puede usar para permitir o no permitir IP, dominios, etc., seg\u00fan sea necesario, y alertar a las extensiones CKAN. de esta configuraci\u00f3n a trav\u00e9s de la opci\u00f3n de configuraci\u00f3n ckan.download_proxy. (2) Implementar reglas de firewall personalizadas para evitar el acceso a recursos restringidos. (3) Utilice validadores personalizados en el campo URL del recurso para bloquear/permitir ciertos dominios o IP. Todas las versiones m\u00e1s recientes de los complementos enumerados anteriormente admiten la configuraci\u00f3n de ckan.download_proxy. La compatibilidad con esta configuraci\u00f3n en el complemento Resource Proxy se incluy\u00f3 en CKAN 2.10.5 y 2.11.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:okfn:ckan:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.10.5", "matchCriteriaId": "5E427B7D-6C9B-4766-8FF7-A0DF9B5EEAE8"}]}]}], "references": [{"url": "https://github.com/ckan/ckan/security/advisories/GHSA-g9ph-j5vj-f8wm", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}], "techniques": [{"techniqueID": "TA0008", "comment": "Use proxy servers - A valid configuration of ckan.download_proxy setting to limit what URLs can be requested, which would prevent SSRF."}, {"techniqueID": "TA0006", "comment": "Implement custom firewall rules to prevent access to restricted resources - Restricting IPs, domains etc using custom firewall rules helps to prevent SSRF attacks."}, {"techniqueID": "TA0040", "comment": "Use custom validators on the resource URL field to block/allow certain domains or IPs - Custom validators can be used to restrict the URLs that can be requested, preventing SSRF attacks."}, {"techniqueID": "TA0015", "comment": "Monitor for HTTP requests to unknown or unauthorized resources - Monitoring for HTTP requests to unknown or unauthorized resources helps to detect SSRF attacks."}], "stix_bundle": {"type": "bundle", "objects": [{"type": "monitoring-observable", "id": "id-1", "created_by_ref": "created_by_1", "first_seen": "2024-08-21T15:15:09.190", "last_seen": "2024-08-23T16:20:10.060", "description": "Monitoring for HTTP requests to unknown or unauthorized resources", "relationships": [{"type": "indicate", "relationship_type": "indicates", "object_ref": "TA0015", "relationship_description": "Indicates Potential SSRF Attack"}]}, {"type": "vulnerability", "id": "id-2", "name": "CKAN SSRF Vulnerability", "description": "CKAN SSRF Vulnerability", "created_by_ref": "created_by_1", "first_seen": "2024-08-21T15:15:09.190", "last_seen": "2024-08-23T16:20:10.060", "risk_score": 6.5, "mitigation": [{"type": "mitigation", "id": "mitigation-1", "description": "Configure ckan.download_proxy to limit what URLs can be requested", "techniques": [{"type": "technique", "id": "TA0008", "description": "Use proxy servers"}]}, {"type": "mitigation", "id": "mitigation-2", "description": "Implement custom firewall rules to prevent access to restricted resources", "techniques": [{"type": "technique", "id": "TA0006", "description": "Implement custom firewall rules to prevent access to restricted resources"}]}]}]}, "technical_analysis": {"Introduction": "This vulnerability exists in CKAN due to the lack of checks on the URLs that can be requested by the plugins. This allows a malicious user to create a resource with a URL pointing to a place where they should not have access, leading to SSRF attacks.", "Impact and Scope": "The impact of this vulnerability is high, with a CVSS score of 6.5. The scope of this vulnerability is limited to the CKAN plugins that use the resource URL to download files.", "Related MITRE ATT&CK Techniques": "The related MITRE ATT&CK techniques for this vulnerability are TA0008, TA0006, TA0040, and TA0015.", "Technical Details": "The vulnerability exists in the way the CKAN plugins handle the resource URL. The plugins use the resource URL to download files, but there are no checks in place to restrict what URLs can be requested.", "Detection": "This vulnerability can be detected by monitoring for HTTP requests to unknown or unauthorized resources.", "Mitigation": "The mitigation for this vulnerability is to configure ckan.download_proxy to limit what URLs can be requested, and to implement custom firewall rules to prevent access to restricted resources.", "Conclusion": "In conclusion, the CKAN SSRF vulnerability is a critical vulnerability that needs to be addressed. The mitigation strategies outlined above can help to protect against SSRF attacks."}, "executive_analysis": {"Overview": "The CKAN SSRF vulnerability is a critical vulnerability that can be exploited by a malicious user to gain unauthorized access to sensitive resources.", "Business Impact": "The business impact of this vulnerability is high, as it can lead to unauthorized access to sensitive resources and potentially compromise the confidentiality, integrity, and availability of the data.", "Technical Impact": "The technical impact of this vulnerability is high, as it can lead to unauthorized access to sensitive resources and potentially compromise the confidentiality, integrity, and availability of the data.", "Mitigation Strategies": "The recommended mitigation strategies for this vulnerability include configuring ckan.download_proxy to limit what URLs can be requested, implementing custom firewall rules to prevent access to restricted resources, and monitoring for HTTP requests to unknown or unauthorized resources.", "Recommendations": "Recommendations for executives include implementing the recommended mitigation strategies and ensuring that the CKAN plugins are configured correctly to prevent SSRF attacks.", "Conclusions": "In conclusion, the CKAN SSRF vulnerability is a critical vulnerability that needs to be addressed by implementing the recommended mitigation strategies."}}