{"id": "CVE-2020-5292", "sourceIdentifier": "security-advisories@github.com", "published": "2020-03-31T19:15:14.383", "lastModified": "2020-04-02T17:18:54.670", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "Leantime before versions 2.0.15 and 2.1-beta3 has a SQL Injection vulnerability. The impact is high. Malicious users/attackers can execute arbitrary SQL queries negatively affecting the confidentiality, integrity, and availability of the site. Attackers can exfiltrate data like the users' and administrators' password hashes, modify data, or drop tables. The unescaped parameter is \"searchUsers\" when sending a POST request to \"/tickets/showKanban\" with a valid session. In the code, the parameter is named \"users\" in class.tickets.php. This issue is fixed in versions 2.0.15 and 2.1.0 beta 3."}, {"lang": "es", "value": "Leantime versiones anteriores a 2.0.15 y 2.1-beta3, presenta una vulnerabilidad de inyecci\u00f3n SQL. El impacto es alto. Los usuarios y atacantes maliciosos pueden ejecutar consultas SQL arbitrarias afectando negativamente la confidencialidad, integridad y disponibilidad del sitio. Los atacantes pueden filtrar datos como los hash de contrase\u00f1a de los usuarios y administradores, modificar datos o disminuir tablas. El par\u00e1metro no escapado es \"searchUsers\" cuando se env\u00eda una petici\u00f3n POST hacia \"/tickets/showKanban\" con una sesi\u00f3n v\u00e1lida. En el c\u00f3digo, el par\u00e1metro es nombrado \"users\" en el archivo class.tickets.php. Este problema es corregido en las versiones 2.0.15 y 2.1.0 beta 3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:leantime:leantime:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.15", "matchCriteriaId": "53096955-4922-4DF7-862B-1023F1BFBF2B"}]}]}], "references": [{"url": "https://github.com/Leantime/leantime/commit/af0807f0b2c4c3c914b93f1c5d940e6b875f231f", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Leantime/leantime/pull/181", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Leantime/leantime/security/advisories/GHSA-ww6x-rhvp-55hp", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}], "techniques": [{"techniqueID": "T1055", "comment": "CVE-2020-5292 - An attacker can exploit the SQL injection vulnerability to execute arbitrary SQL queries, potentially leading to data exfiltration, manipulation, or deletion. Defending against this attack requires implementing input validation and sanitization mechanisms."}, {"techniqueID": "T1027", "comment": "CVE-2020-5292 - The vulnerability allows attackers to send malicious SQL queries to the 'searchUsers' parameter, which can disrupt the database and lead to data breaches. Defending against this attack involves implementing secure coding practices, such as using prepared statements and input validation."}, {"techniqueID": "T1190", "comment": "CVE-2020-5292 - The SQL injection vulnerability can be used to inject and execute arbitrary SQL code, enabling attackers to steal sensitive data. Defending against this attack requires implementing robust authentication and authorization mechanisms, as well as monitoring database access and log activity."}, {"techniqueID": "T1566", "comment": "CVE-2020-5292 - The vulnerability allows an attacker to inject and execute custom SQL queries, which can lead to data theft, manipulation, or deletion. Defending against this attack involves implementing secure coding practices, such as using parameterized queries, and regularly patching vulnerable software."}], "stix_bundle": [{"type": "indicator", "id": "indicator--8ecf15f8-7e30-4c1f-8c75-447d2f0f5ae5", "created_by_ref": "identity--6e4fbc61-144a-44a8-b51a-f9bc66de7d84", "modified": "2023-03-16T14:30:00.000Z", "name": "Leantime SQL Injection Vulnerability", "description": "Indicates potential exploitation of the Leantime SQL injection vulnerability", "modified_by_ref": "identity--6e4fbc61-144a-44a8-b51a-f9bc66de7d84", "created": "2023-03-16T14:30:00.000Z", "objects": [{"type": "vulnerability", "id": "vulnerability--24c4548f-eb6e-47f9-9e40-4f9da1b8a4da", "name": "Leantime SQL Injection Vulnerability", "description": "A SQL injection vulnerability exists in Leantime software, allowing attackers to inject and execute arbitrary SQL code.", "exploited_by_ref": "group--66f0c5a9-3ceb-4471-93db-f6b7b1e94bea", "components": [{"type": "attack-pattern", "id": "attack-pattern--2d1a1ed1-49a5-4b3f-9d5c-21c935d89b4b", "name": "Execute Operating System Commands", "description": "An attacker executes arbitrary operating system commands to manipulate system behavior, data, and resources."}]}]}], "technical_analysis": {"Introduction": "The Leantime SQL injection vulnerability allows attackers to inject and execute arbitrary SQL code, enabling data theft, manipulation, or deletion.", "Impact and Scope": "The vulnerability has a CVSS score of 8.8 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H) and can affect various critical assets (e.g., databases, systems, and applications).", "Related MITRE ATT&CK Techniques": "T1055, T1027, T1190, and T1566", "Technical Details": "The vulnerability arises from unescaped parameters in the 'searchUsers' function of the Leantime software.", "Detection": "Detection methods may include monitoring database queries, analyzing system logs, and implementing intrusion detection systems.", "Mitigation": "Mitigation strategies include implementing secure coding practices, patching vulnerable software, and configuring input validation and sanitization mechanisms.", "Conclusion": "The Leantime SQL injection vulnerability poses a significant threat to the confidentiality, integrity, and availability of data. Implementing robust security measures is crucial to mitigating this risk."}, "executive_analysis": {"Overview": "The Leantime SQL injection vulnerability poses a critical risk to business operations, as it can lead to data breaches, identity theft, and financial losses.", "Business Impact": "The vulnerability can result in reputational damage, regulatory fines, and increased liability, ultimately compromising business continuity.", "Technical Impact": "The vulnerability affects the confidentiality, integrity, and availability of critical assets, creating potential security and compliance risks.", "Mitigation Strategies": "Implement robust security measures, such as secure coding practices, patching, and input validation.", "Recommendations": "Executives should prioritize addressing this vulnerability by allocating resources, establishing risk management frameworks, and communicating the risks to stakeholders.", "Conclusions": "Implementing effective security measures is essential to mitigate the risk posed by the Leantime SQL injection vulnerability."}}