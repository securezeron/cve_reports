{"id": "CVE-2024-3633", "sourceIdentifier": "contact@wpscan.com", "published": "2024-06-26T06:15:15.400", "lastModified": "2024-07-03T02:06:26.000", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "The WebP & SVG Support WordPress plugin through 1.4.0 does not sanitise uploaded SVG files, which could allow users with a role as low as Author to upload a malicious SVG containing XSS payloads."}, {"lang": "es", "value": "El complemento WebP &amp; SVG Support de WordPress hasta la versi\u00f3n 1.4.0 no sanitiza los archivos SVG cargados, lo que podr\u00eda permitir a los usuarios con un rol tan bajo como Autor cargar un SVG malicioso que contenga payloads XSS."}], "metrics": {"cvssMetricV31": [{"source": "134c704f-9b21-4f2e-91b3-4a467353bcc0", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "references": [{"url": "https://wpscan.com/vulnerability/2e0baffb-7ab8-4c17-aa2a-7f28a0be1a41/", "source": "contact@wpscan.com"}], "techniques": [{"techniqueID": "T1190", "comment": "CVE-2024-3633 - This technique is relevant due to the possibility of users with a role as low as Author uploading malicious SVG files containing XSS payloads. This can be defended against by validating and sanitizing uploaded SVG files."}, {"techniqueID": "T1112", "comment": "CVE-2024-3633 - This technique is relevant due to the possibility of exploiting the vulnerability to upload malicious SVG files. This can be defended against by implementing web application firewalls and monitoring for suspicious file uploads."}, {"techniqueID": "T1189", "comment": "CVE-2024-3633 - This technique is relevant due to the possibility of exploiting the vulnerability to upload malicious SVG files. This can be defended against by implementing secure coding practices and validating user input."}], "technical_analysis": {"Introduction": "The WebP & SVG Support WordPress plugin, version 1.4.0 and below, contains a vulnerability that allows users with a role as low as Author to upload malicious SVG files containing XSS payloads.", "Impact and Scope": "The vulnerability has a CVSS score of 5.4, with a medium severity, and a CVSS vector string of 'CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N'. It allows the attacker to execute arbitrary JavaScript code, resulting in a low confidentiality, integrity, and availability impact.", "Related MITRE ATT&CK Techniques": "T1190, T1112, and T1189", "Technical Details": "The vulnerability is due to the lack of sanitization of uploaded SVG files. This allows attackers to upload malicious SVG files containing XSS payloads, which can be executed by the victim's browser.", "Detection": "Detection of this vulnerability can be done by monitoring for suspicious file uploads and analyzing the contents of uploaded files. Additionally, web application firewalls can be used to block malicious file uploads.", "Mitigation": "Mitigation strategies include validating and sanitizing uploaded SVG files, implementing web application firewalls, and monitoring for suspicious file uploads.", "Conclusion": "In conclusion, the WebP & SVG Support WordPress plugin version 1.4.0 and below contains a vulnerability that allows users with a low role to upload malicious SVG files containing XSS payloads. This can be defended against by implementing secure coding practices and validating user input."}, "executive_analysis": {"Overview": "The WebP & SVG Support WordPress plugin contains a vulnerability that allows users with a low role to upload malicious SVG files containing XSS payloads, resulting in a medium-severity risk.", "Business Impact": "The vulnerability can result in loss of confidentiality, integrity, and availability of sensitive data, as well as reputational damage.", "Technical Impact": "The vulnerability allows the attacker to execute arbitrary JavaScript code, resulting in a low confidentiality, integrity, and availability impact.", "Mitigation Strategies": "Implement secure coding practices, validate user input, and implement web application firewalls.", "Recommendations": "Immediately update the WebP & SVG Support WordPress plugin to the latest version, implement monitoring tools to detect suspicious file uploads, and conduct regular vulnerability assessments.", "Conclusions": "In conclusion, the vulnerability poses a medium-severity risk and requires immediate attention. Implementing mitigation strategies and conducting regular vulnerability assessments can help prevent future attacks."}}