{"id": "CVE-2024-43367", "sourceIdentifier": "security-advisories@github.com", "published": "2024-08-15T21:15:17.777", "lastModified": "2024-08-19T13:00:23.117", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "Boa is an embeddable and experimental Javascript engine written in Rust. Starting in version 0.16 and prior to version 0.19.0, a wrong assumption made when handling ECMAScript's `AsyncGenerator` operations can cause an uncaught exception on certain scripts. Boa's implementation of `AsyncGenerator` makes the assumption that the state of an `AsyncGenerator` object cannot change while resolving a promise created by methods of `AsyncGenerator` such as `%AsyncGeneratorPrototype%.next`, `%AsyncGeneratorPrototype%.return`, or `%AsyncGeneratorPrototype%.throw`. However, a carefully constructed code could trigger a state transition from a getter method for the promise's `then` property, which causes the engine to fail an assertion of this assumption, causing an uncaught exception. This could be used to create a Denial Of Service attack in applications that run arbitrary ECMAScript code provided by an external user. Version 0.19.0 is patched to correctly handle this case. Users unable to upgrade to the patched version would want to use `std::panic::catch_unwind` to ensure any exceptions caused by the engine don't impact the availability of the main application."}, {"lang": "es", "value": "Boa es un motor Javascript integrable y experimental escrito en Rust. A partir de la versi\u00f3n 0.16 y antes de la versi\u00f3n 0.19.0, una suposici\u00f3n incorrecta al manejar las operaciones `AsyncGenerator` de ECMAScript puede causar una excepci\u00f3n no detectada en ciertos scripts. La implementaci\u00f3n de Boa de `AsyncGenerator` supone que el estado de un objeto `AsyncGenerator` no puede cambiar mientras se resuelve una promesa creada por m\u00e9todos de `AsyncGenerator` como `%AsyncGeneratorPrototype%.next`, `%AsyncGeneratorPrototype%.return`, o `%AsyncGeneratorPrototype%.throw`. Sin embargo, un c\u00f3digo cuidadosamente construido podr\u00eda desencadenar una transici\u00f3n de estado desde un m\u00e9todo getter para la propiedad \"then\" de la promesa, lo que hace que el motor falle en la afirmaci\u00f3n de esta suposici\u00f3n, provocando una excepci\u00f3n no detectada. Esto podr\u00eda usarse para crear un ataque de denegaci\u00f3n de servicio en aplicaciones que ejecutan c\u00f3digo ECMAScript arbitrario proporcionado por un usuario externo. La versi\u00f3n 0.19.0 tiene un parche para manejar correctamente este caso. Los usuarios que no puedan actualizar a la versi\u00f3n parcheada querr\u00e1n usar `std::panic::catch_unwind` para garantizar que las excepciones causadas por el motor no afecten la disponibilidad de la aplicaci\u00f3n principal."}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-248"}]}], "references": [{"url": "https://github.com/boa-dev/boa/commit/69ea2f52ed976934bff588d6b566bae01be313f7", "source": "security-advisories@github.com"}, {"url": "https://github.com/boa-dev/boa/security/advisories/GHSA-f67q-wr6w-23jq", "source": "security-advisories@github.com"}, {"url": "https://github.com/tc39/ecma262/security/advisories/GHSA-g38c-wh3c-5h9r", "source": "security-advisories@github.com"}], "techniques": [{"techniqueID": "T1190", "comment": "CVE-2024-43367 - This vulnerability can be exploited by an attacker to create a Denial of Service (DoS) attack. This can be achieved by exploiting the wrong assumption made in the Boa's implementation of `AsyncGenerator`. The attacker can craft a specific script that triggers a state transition from a getter method for the promise's `then` property, causing an uncaught exception in the engine. This can be mitigated by using `std::panic::catch_unwind` to ensure any exceptions caused by the engine don't impact the availability of the main application."}], "stix_bundle": {"objects": [{"id": "relation--cve-2024-43367", "type": "relationship", "description": "Vulnerability exploitation", "source_id": "indicator--cve-2024-43367", "target_id": "tool--boa"}, {"id": "indicator--cve-2024-43367", "type": "indicator", "name": "CVE-2024-43367", "description": "CVE-2024-43367 - Boa's implementation of AsyncGenerator makes an assumption that the state of an AsyncGenerator object cannot change while resolving a promise created by methods of AsyncGenerator such as %AsyncGeneratorPrototype%.next, %AsyncGeneratorPrototype%.return, or %AsyncGeneratorPrototype%.throw."}, {"id": "tool--boa", "type": "tool", "name": "Boa", "description": "Boa is an embeddable and experimental Javascript engine written in Rust."}, {"id": "course-of-action--cve-2024-43367-detection", "type": "course-of-action", "name": "Detect doS attacks", "description": "Detect DoS attacks by monitoring the.engine for uncaught exceptions."}, {"id": "mitigation--cve-2024-43367-std-panic-catch-unwind", "type": "mitigation", "name": "Use std::panic::catch_unwind", "description": "Use std::panic::catch_unwind to ensure any exceptions caused by the engine don't impact the availability of the main application."}], "rels": [{"source": "indicator--cve-2024-43367", "target": "tool--boa", "type": "uses"}, {"source": "indicator--cve-2024-43367", "target": "course-of-action--cve-2024-43367-detection", "type": "related"}, {"source": "tool--boa", "target": "mitigation--cve-2024-43367-std-panic-catch-unwind", "type": "protects"}]}, "technical_analysis": {"Introduction": "The CVE-2024-43367 vulnerability is a Denial of Service (DoS) attack that can be exploited by an attacker by crafting a specific script that triggers a state transition from a getter method for the promise's `then` property, causing an uncaught exception in the Boa's implementation of AsyncGenerator.", "Impact and Scope": "The vulnerability has a CVSS score of 7.5 with a version of 3.1, it has a attack vector of NETWORK, and it has a High impact on the availability of the system.", "Related MITRE ATT&CK Techniques": "This vulnerability is related to the T1190 technique.", "Technical Details": "The vulnerability is caused by a wrong assumption made in the Boa's implementation of AsyncGenerator, an attacker can exploit this by crafting a specific script that triggers a state transition from a getter method for the promise's `then` property.", "Detection": "The detection of this vulnerability can be done by monitoring the engine for uncaught exceptions.", "Mitigation": "The mitigation for this vulnerability can be done by using the std::panic::catch_unwind to ensure any exceptions caused by the engine don't impact the availability of the main application.", "Conclusion": "In conclusion, the CVE-2024-43367 vulnerability is a serious vulnerability that can be exploited by an attacker to create a DoS attack. It is important to use the std::panic::catch_unwind to mitigate this vulnerability and to monitor the engine for uncaught exceptions."}, "executive_analysis": {"Overview": "The CVE-2024-43367 vulnerability is a Denial of Service (DoS) attack that can be exploited by an attacker by crafting a specific script that triggers a state transition from a getter method for the promise's `then` property, causing an uncaught exception in the Boa's implementation of AsyncGenerator.", "Business Impact": "The business impact of this vulnerability is that it can cause a denial of service attack, which can result in monetary losses and damage to the organization's reputation.", "Technical Impact": "The technical impact of this vulnerability is that it can cause an uncaught exception in the engine, which can result in the engine becoming unavailable.", "Mitigation Strategies": "The mitigation strategies for this vulnerability include using std::panic::catch_unwind to ensure any exceptions caused by the engine don't impact the availability of the main application.", "Recommendations": "Recommendations for executives include prioritizing the mitigation of this vulnerability and monitoring the engine for uncaught exceptions.", "Conclusions": "In conclusion, the CVE-2024-43367 vulnerability is a serious vulnerability that requires immediate attention and mitigation. It is important to prioritize the mitigation of this vulnerability and to monitor the engine for uncaught exceptions."}}