{"id": "CVE-2024-41961", "sourceIdentifier": "security-advisories@github.com", "published": "2024-08-01T15:15:14.310", "lastModified": "2024-08-01T16:45:25.400", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "Elektra is an opinionated Openstack Dashboard for Operators and Consumers of Openstack Services. A code injection vulnerability was found in the live search functionality of the Ruby on Rails based Elektra web application. An authenticated user can craft a search term containing Ruby code, which later flows into an `eval` sink which executes the code. Fixed in commit 8bce00be93b95a6512ff68fe86bf9554e486bc02."}, {"lang": "es", "value": " Elektra es un panel de Openstack obstinado para operadores y consumidores de servicios Openstack. Se encontr\u00f3 una vulnerabilidad de inyecci\u00f3n de c\u00f3digo en la funcionalidad de b\u00fasqueda en vivo de la aplicaci\u00f3n web Elektra basada en Ruby on Rails. Un usuario autenticado puede crear un t\u00e9rmino de b\u00fasqueda que contenga c\u00f3digo Ruby, que luego fluye hacia un receptor \"eval\" que ejecuta el c\u00f3digo. Corregido en la confirmaci\u00f3n 8bce00be93b95a6512ff68fe86bf9554e486bc02."}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 9.6, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 5.8}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-94"}]}], "references": [{"url": "https://github.com/sapcc/elektra/commit/49aea3b365082681558bf3bf7bf4a51766cfc44d", "source": "security-advisories@github.com"}, {"url": "https://github.com/sapcc/elektra/commit/8bce00be93b95a6512ff68fe86bf9554e486bc02", "source": "security-advisories@github.com"}, {"url": "https://github.com/sapcc/elektra/security/advisories/GHSA-6j2h-486h-487q", "source": "security-advisories@github.com"}], "techniques": [{"techniqueID": "T1059.007", "comment": "CVE-2024-41961 - Code injection vulnerability in Elektra's live search functionality, executing Ruby code through an eval sink. Mitigates by limiting the input to a known set of allowed characters or using a secure alternative to eval like IRB."}, {"techniqueID": "T1190", "comment": "CVE-2024-41961 - Authentication bypass due to the vulnerability in Elektra's live search functionality. Exploits may be used to gain unauthorized access to the system. Mitigates by enforcing strong authentication mechanisms and monitoring for suspicious activity."}, {"techniqueID": "T1607", "comment": "CVE-2024-41961 - Vulnerability in Elektra's Ruby on Rails application. Exploits may be used to execute arbitrary code. Mitigates by keeping Ruby on Rails patches up-to-date and following secure coding practices."}, {"techniqueID": "T121", "comment": "CVE-2024-41961 - Unvalidated data in Elektra's Ruby on Rails application. Exploits may be used to inject malicious data. Mitigates by validating user input and strictly parsing input data."}], "stix_bundle": {"stix": {"@stix_2_1": "true", "Vulnerability": {"@stix_2_1": "true", "id": "Vulnerability--1", "cve_id": "CVE-2024-41961", "name": "Elektra Code Injection Vulnerability", "description": "Elektra code injection vulnerability allows executing arbitrary code through eval sink.", "vulnerable_component": "Elektra Ruby on Rails application", "published": "2024-08-01T15:15:14.310", "modified": "2024-08-01T16:45:25.400", "Cvss": {"@stix_2_1": "true", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:H", "baseScore": 9.6, "baseSeverity": "CRITICAL"}, "References": [{"@stix_2_1": "true", "source_name": "GitHub", "url": "https://github.com/sapcc/elektra/commit/49aea3b365082681558bf3bf7bf4a51766cfc44d"}, {"@stix_2_1": "true", "source_name": "GitHub", "url": "https://github.com/sapcc/elektra/commit/8bce00be93b95a6512ff68fe86bf9554e486bc02"}, {"@stix_2_1": "true", "source_name": "GitHub", "url": "https://github.com/sapcc/elektra/security/advisories/GHSA-6j2h-486h-487q"}]}, "Defended_By": [{"@stix_2_1": "true", "Technique_1": {"@stix_2_1": "true", "technique_id": "T1059.007", "technique_name": "Code Injection"}, "notes": "Limited input to known set of allowed characters"}, {"@stix_2_1": "true", "Technique_2": {"@stix_2_1": "true", "technique_id": "T1190", "technique_name": "Authentication Bypass"}, "notes": "Enforcing strong authentication mechanisms"}, {"@stix_2_1": "true", "Technique_3": {"@stix_2_1": "true", "technique_id": "T1607", "technique_name": "Use of Outdated Components"}, "notes": "Keeping Ruby on Rails patches up-to-date"}, {"@stix_2_1": "true", "Technique_4": {"@stix_2_1": "true", "technique_id": "T121", "technique_name": "Unvalidated User-Provided Input"}, "notes": "Validating user input and parsing input data"}]}}, "technical_analysis": {"Introduction": "The Elektra code injection vulnerability allows attackers to execute arbitrary code through the live search functionality by injecting malicious Ruby code.", "Impact and Scope": "This vulnerability has a CVSS score of 9.6, with an attack vector of 'NETWORK', and affects the Elektra Ruby on Rails application.", "Related MITRE ATT&CK Techniques": "T1059.007, T1190, T1607, and T121", "Technical Details": "The vulnerability is caused by unvalidated user input, which allows attackers to inject malicious Ruby code.", "Detection": "Detection can be done by monitoring for suspicious activity, such as unusual search queries, and monitoring for injected code execution.", "Mitigation": "The vulnerability can be mitigated by limiting the input to known allowed characters, and enforcing strong authentication mechanisms.", "Conclusion": "This vulnerability has a significant impact and should be addressed promptly."}, "executive_analysis": {"Overview": "The Elektra code injection vulnerability poses a significant risk to the security of the application.", "Business Impact": "The vulnerability can lead to data breaches, system compromise, and reputation damage.", "Technical Impact": "The vulnerability can be exploited to execute arbitrary code, leading to system compromise and data breaches.", "Mitigation Strategies": "Implementing strong authentication mechanisms, limiting input to known allowed characters, and enforcing secure coding practices.", "Recommendations": "Executives should prioritize patching and updating the Ruby on Rails application, and implementing robust security measures to prevent exploitation.", "Conclusions": "The vulnerability is a critical risk and should be addressed promptly with a combination of technical and executive-level efforts."}}