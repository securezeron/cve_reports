{"id": "CVE-2020-28495", "sourceIdentifier": "report@snyk.io", "published": "2021-02-02T11:15:13.257", "lastModified": "2021-02-05T16:53:47.807", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "This affects the package total.js before 3.4.7. The set function can be used to set a value into the object according to the path. However the keys of the path being set are not properly sanitized, leading to a prototype pollution vulnerability. The impact depends on the application. In some cases it is possible to achieve Denial of service (DoS), Remote Code Execution or Property Injection."}, {"lang": "es", "value": "Esto afecta al paquete total.js versiones anteriores a 3.4.7.&#xa0;La funci\u00f3n set puede ser usada para ajustar un valor en el objeto de acuerdo con la ruta.&#xa0;Sin embargo, las claves de ruta que se est\u00e1 ajustando no est\u00e1n propiamente saneadas, conllevando a una vulnerabilidad de contaminaci\u00f3n de prototipo.&#xa0;El impacto depende de la aplicaci\u00f3n.&#xa0;En algunos casos, es posible lograr una Denegaci\u00f3n de Servicio (DoS), una Ejecuci\u00f3n de C\u00f3digo Remota o una Inyecci\u00f3n de Propiedad"}], "metrics": {"cvssMetricV31": [{"source": "report@snyk.io", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:totaljs:total.js:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "3.4.7", "matchCriteriaId": "09C704BC-AD46-464A-B3CD-D2D54FF353BA"}]}]}], "references": [{"url": "https://docs.totaljs.com/latest/en.html%23api~FrameworkUtils~U.set", "source": "report@snyk.io", "tags": ["Broken Link"]}, {"url": "https://github.com/totaljs/framework/blob/master/utils.js%23L6606", "source": "report@snyk.io", "tags": ["Broken Link"]}, {"url": "https://github.com/totaljs/framework/blob/master/utils.js%23L6617", "source": "report@snyk.io", "tags": ["Broken Link"]}, {"url": "https://github.com/totaljs/framework/commit/b3f901561d66ab799a4a99279893b94cad7ae4ff", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-TOTALJS-1046671", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}], "techniques": [{"techniqueID": "T1190", "comment": "CVE-2020-28495 - Prototype Pollution through 'set' Function. Defence in Depth is crucial in preventing this type of attack, D3FEND can be used to monitor and detect such attacks by implementing a robust Input Validation and Sanitization process."}, {"techniqueID": "T1191", "comment": "CVE-2020-28495 - The vulnerability is due to the 'set' function not properly sanitizing the keys in the path, leading to Prototype Pollution. This highlights the importance of implementing proper Input Validation and Sanitization, D3FEND can be used to detect and prevent such attacks by monitoring the system for suspicious activity."}, {"techniqueID": "T1552", "comment": "CVE-2020-28495 - The attacker can use the 'set' function to inject malicious data into the object, leading to Remote Code Execution or Property Injection. This emphasizes the need for robust input validation and sanitization, D3FEND can be used to detect and prevent such attacks by monitoring the system for suspicious activity."}, {"techniqueID": "T1192", "comment": "CVE-2020-28495 - The attacker can use the 'set' function to achieve Denial of Service (DoS) or Property Injection, highlighting the importance of implementing proper Input Validation and Sanitization, D3FEND can be used to detect and prevent such attacks by monitoring the system for suspicious activity."}], "stix_bundle": {"objects": [{"type": "vulnerability", "id": "vuln-1", "label": "Prototype Pollution Vulnerability in Total.js", "description": "Prototype Pollution vulnerability in Total.js before 3.4.7", " severity": "HIGH", "references": [{"href": "https://docs.totaljs.com/latest/en.html#api~FrameworkUtils~U.set", "description": "Total.js Documentation"}, {"href": "https://github.com/totaljs/framework/blob/master/utils.js#L6606", "description": "Total.js GitHub Repository"}], "related_objects": [{"type": "attack_pattern", "id": "ap-1", "label": "Prototype Pollution Attack", "description": "Attack pattern for Prototype Pollution vulnerability", "techniques": [{"type": "technique", "id": "T1190", "label": "Prototype Pollution through 'set' Function"}]}, {"type": "vulnerability_exploit", "id": "ve-1", "label": "Vulnerability Exploit for Prototype Pollution", "description": "Vulnerability exploit for Prototype Pollution vulnerability", "related_objects": [{"type": "attack_pattern", "id": "ap-1", "label": "Prototype Pollution Attack"}]}]}]}, "technical_analysis": {"Introduction": "Total.js is a popular JavaScript framework used for building web applications. However, it has been discovered that versions prior to 3.4.7 are vulnerable to Prototype Pollution attacks.", "Impact and Scope": "The impact of this CVE is HIGH, with potential for Remote Code Execution, Property Injection, and Denial of Service attacks.", "Related MITRE ATT&CK Techniques": "T1190, T1191, T1552, T1192", "Technical Details": "The vulnerability is due to the 'set' function not properly sanitizing the keys in the path, leading to Prototype Pollution.", "Detection": "Detection can be done by monitoring for suspicious input validation and sanitization issues.", "Mitigation": "Mitigation strategies include implementing robust input validation and sanitization processes, limiting access to sensitive areas of the code, and monitoring for suspicious activity.", "Conclusion": "In conclusion, the Prototype Pollution vulnerability in Total.js is a serious issue that requires immediate attention and action."}, "executive_analysis": {"Overview": "The Prototype Pollution vulnerability in Total.js is a high-impact issue that requires immediate attention.", "Business Impact": "The potential impact of this CVE is significant, with potential for Remote Code Execution, Property Injection, and Denial of Service attacks.", "Technical Impact": "The technical impact of this CVE is the potential for unauthorized access to sensitive data and systems.", "Mitigation Strategies": "Implementing robust input validation and sanitization processes, limiting access to sensitive areas of the code, and monitoring for suspicious activity are essential mitigation strategies.", "Recommendations": "Recommendations include implementing a robust incident response plan, conducting regular vulnerability assessments, and prioritizing patches and updates.", "Conclusions": "In conclusion, the Prototype Pollution vulnerability in Total.js is a serious issue that requires immediate attention and action from executive management."}}