{"id": "CVE-2024-31583", "sourceIdentifier": "cve@mitre.org", "published": "2024-04-17T19:15:07.950", "lastModified": "2024-07-03T01:55:12.663", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "Pytorch before version v2.2.0 was discovered to contain a use-after-free vulnerability in torch/csrc/jit/mobile/interpreter.cpp."}, {"lang": "es", "value": "Se descubri\u00f3 que Pytorch anterior a la versi\u00f3n v2.2.0 conten\u00eda una vulnerabilidad de use-after-free en torch/csrc/jit/mobile/interpreter.cpp."}], "metrics": {"cvssMetricV31": [{"source": "134c704f-9b21-4f2e-91b3-4a467353bcc0", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "134c704f-9b21-4f2e-91b3-4a467353bcc0", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-416"}]}], "references": [{"url": "https://gist.github.com/1047524396/43e19a41f2b36503a4a228c32cdbc176", "source": "cve@mitre.org"}, {"url": "https://github.com/pytorch/pytorch/blob/v2.1.2/torch/csrc/jit/mobile/interpreter.cpp#L132", "source": "cve@mitre.org"}, {"url": "https://github.com/pytorch/pytorch/commit/9c7071b0e324f9fb68ab881283d6b8d388a4bcd2", "source": "cve@mitre.org"}], "techniques": [{"techniqueID": "T1190", "comment": "CVE-2024-31583 - This vulnerability allows an attacker to use-after-free an object, potentially allowing for arbitrary code execution. This is relevant as it can be used for privilege escalation and data tampering. To defend against it, implement memory safety checks and validate object references."}, {"techniqueID": "T1210", "comment": "CVE-2024-31583 - This vulnerability can be exploited by an attacker to inject malicious code into a memory region that has already been freed. This is relevant as it can be used for code injection and privilege escalation. To defend against it, implement memory safety checks and validate object references."}, {"techniqueID": "T1222", "comment": "CVE-2024-31583 - This vulnerability can be exploited by an attacker to access memory regions that are no longer in use. This is relevant as it can be used for data theft and privilege escalation. To defend against it, implement memory safety checks and validate object references."}, {"techniqueID": "T1197", "comment": "CVE-2024-31583 - This vulnerability can be used by an attacker to inject malicious code into a process. This is relevant as it can be used for code injection and privilege escalation. To defend against it, implement memory safety checks and validate object references."}], "stix_bundle": {"@type": "stix_bundle", "id": "bundle--8cc4f8b3-d29c-45c2-95a5-13dbbb93bff4", "objects": [{"@type": "vulnerability", "id": "vulnerability--c22509e4-b78d-43f9-8d5d-c1c17565e0a0", "name": "PyTorch v2.2.0 use-after-free vulnerability", "description": "A use-after-free vulnerability in PyTorch before version v2.2.0 has been discovered.", "cvss": {"@type": "cvss:V3", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H"}, "mitre_techniques": ["T1190", "T1210", "T1222", "T1197"], "weaknesses": [{"@type": "weakness", "id": "weakness--2ddfa6be-6ecf-41a9-b0b3-d5a5eebdc07f", "name": "CWE-416", "description": "Use After Free"}], "references": [{"@type": "reference", "id": "reference--6cc35593-c1f2-436f-8234-557f50da5c7a", "name": "CVE-2024-31583", "description": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31583", "url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31583"}], "relations": [{"from": "#vulnerability--c22509e4-b78d-43f9-8d5d-c1c17565e0a0", "to": "#mitre_technique--T1190", "type": "exploits"}, {"from": "#vulnerability--c22509e4-b78d-43f9-8d5d-c1c17565e0a0", "to": "#mitre_technique--T1210", "type": "exploits"}, {"from": "#vulnerability--c22509e4-b78d-43f9-8d5d-c1c17565e0a0", "to": "#mitre_technique--T1222", "type": "exploits"}, {"from": "#vulnerability--c22509e4-b78d-43f9-8d5d-c1c17565e0a0", "to": "#mitre_technique--T1197", "type": "exploits"}]}]}, "technical_analysis": {"Introduction": "PyTorch before version v2.2.0 contains a use-after-free vulnerability in torch/csrc/jit/mobile/interpreter.cpp. This vulnerability allows an attacker to use-after-free an object, potentially allowing for arbitrary code execution.", "Impact and Scope": "The vulnerability has a CVSS score of 7.8 (High) and an attack vector of LOCAL. This means that an attacker can exploit it without any network interaction. The impact is High for Confidentiality, Integrity, and Availability.", "Related MITRE ATT&CK Techniques": "T1190: Use After Free, T1210: Code Injection, T1222: Cross-Site Scripting, T1197: Subterfuge", "Technical Details": "The vulnerability is caused by a use-after-free error in the interpreter.cpp file. This file is responsible for parsing and executing the PyTorch bytecode.", "Detection": "Detection methods include monitoring memory usage and checking for abnormal patterns, as well as monitoring system calls and looking for suspicious activity.", "Mitigation": "Mitigation strategies include updating to a patched version of PyTorch, using memory safety checks, and validating object references.", "Conclusion": "In conclusion, this vulnerability is a critical security issue that requires immediate attention. We recommend updating to a patched version of PyTorch and implementing memory safety checks to protect against this vulnerability."}, "executive_analysis": {"Overview": "A use-after-free vulnerability in PyTorch before version v2.2.0 has been discovered, allowing an attacker to use-after-free an object, potentially allowing for arbitrary code execution.", "Business Impact": "The vulnerability has the potential to compromise sensitive data and disrupt business operations, resulting in financial losses and reputational damage.", "Technical Impact": "The vulnerability allows an attacker to inject malicious code into a memory region that has already been freed, potentially leading to code execution and data tampering.", "Mitigation Strategies": "Implement memory safety checks, validate object references, and update to a patched version of PyTorch.", "Recommendations": " recommendation is to immediately update to a patched version of PyTorch and implement memory safety checks to protect against this vulnerability.", "Conclusions": "In conclusion, this vulnerability is a critical security issue that requires immediate attention. We recommend taking immediate action to mitigate this vulnerability."}}