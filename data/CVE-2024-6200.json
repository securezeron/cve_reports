{"id": "CVE-2024-6200", "sourceIdentifier": "vulnerability@ncsc.ch", "published": "2024-08-06T06:15:35.030", "lastModified": "2024-08-29T17:53:40.483", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "HaloITSM versions up to 2.146.1 are affected by a Stored Cross-Site Scripting (XSS) vulnerability. The injected JavaScript code can execute arbitrary action on behalf of the user accessing a ticket. HaloITSM versions past 2.146.1 (and patches starting from 2.143.61 ) fix the mentioned vulnerability."}, {"lang": "es", "value": "Las versiones de HaloITSM hasta 2.146.1 se ven afectadas por una vulnerabilidad de Cross-Site Scripting (XSS) Almacenado. El c\u00f3digo JavaScript inyectado puede ejecutar acciones arbitrarias en nombre del usuario que accede a un ticket. Las versiones de HaloITSM posteriores a la 2.146.1 (y los parches a partir de la 2.143.61) corrigen la vulnerabilidad mencionada."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "vulnerability@ncsc.ch", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "vulnerability@ncsc.ch", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:haloservicesolutions:haloitsm:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.143.61", "matchCriteriaId": "0C394C94-9968-465E-98B9-7BC8429BAD67"}, {"vulnerable": true, "criteria": "cpe:2.3:a:haloservicesolutions:haloitsm:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.144", "versionEndExcluding": "2.146.1", "matchCriteriaId": "CEBD3BDE-57DA-41C9-821A-F8C6A8864FC7"}]}]}], "references": [{"url": "https://haloitsm.com/guides/article/?kbid=2152", "source": "vulnerability@ncsc.ch", "tags": ["Vendor Advisory"]}], "techniques": [{"techniqueID": "T1059.001", "comment": "CVE-2024-6200 - This technique is relevant as it describes the Stored Cross-Site Scripting (XSS) vulnerability in HaloITSM, which can lead to execution of arbitrary actions by the attacker. Defending against this technique involves utilizing web application firewall (WAF) rules and input validation mechanisms to prevent the injection of malicious JavaScript code."}, {"techniqueID": "T1204.001", "comment": "CVE-2024-6200 - This technique is relevant as it involves injecting malicious JavaScript code to access sensitive data or perform unauthorized actions. Defending against this technique requires implementing robust input validation mechanisms, regular software updates, and continuous monitoring to detect potential attacks."}], "technical_analysis": {"Introduction": "The CVE-2024-6200 vulnerability is a Stored Cross-Site Scripting (XSS) vulnerability in HaloITSM versions up to 2.146.1, which can be exploited by injecting malicious JavaScript code.", "Impact and Scope": "The vulnerability has a CVSS score of 8.0, with a base severity of HIGH, and can be exploited by Low-privileged users with Network capability. It allows arbitrary actions to be executed on behalf of the user accessing a ticket.", "Related MITRE ATT&CK Techniques": "The techniques involved in this vulnerability include T1059.001 - Command and Control - Application Layer and T1204.001 - Web Shell.", "Technical Details": "The vulnerability is caused by improper input validation mechanisms, allowing attackers to inject malicious JavaScript code.", "Detection": "Detection methods include monitoring for suspicious JavaScript code injection, anomalous user behavior, and failure to render expected content.", "Mitigation": "Mitigation strategies include implementing robust input validation mechanisms, regular software updates, and continuing monitoring to detect potential attacks.", "Conclusion": "The CVE-2024-6200 vulnerability highlights the importance of robust input validation mechanisms and regular software updates to prevent the execution of arbitrary actions."}, "executive_analysis": {"Overview": "The CVE-2024-6200 vulnerability in HaloITSM is a Stored Cross-Site Scripting (XSS) vulnerability that allows arbitrary actions to be executed on behalf of the user accessing a ticket.", "Business Impact": "The vulnerability can lead to unauthorized access to sensitive data and system compromise, potentially causing significant business disruption and financial loss.", "Technical Impact": "The vulnerability has a high technical impact, allowing attackers to execute arbitrary actions and potentially compromise the confidentiality, integrity, and availability of sensitive data.", "Mitigation Strategies": "Implementing robust input validation mechanisms, regular software updates, and continuing monitoring to detect potential attacks can help mitigate the risk of this vulnerability.", "Recommendations": "Executives should prioritize the remediation of this vulnerability and ensure that robust security measures are in place to prevent future attacks.", "Conclusions": "The CVE-2024-6200 vulnerability highlights the importance of robust input validation mechanisms and regular software updates to prevent the execution of arbitrary actions, and executives should prioritize the remediation of this vulnerability."}}