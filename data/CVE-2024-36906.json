{"id": "CVE-2024-36906", "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67", "published": "2024-05-30T16:15:14.130", "lastModified": "2024-05-30T18:18:58.870", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nARM: 9381/1: kasan: clear stale stack poison\n\nWe found below OOB crash:\n\n[   33.452494] ==================================================================\n[   33.453513] BUG: KASAN: stack-out-of-bounds in refresh_cpu_vm_stats.constprop.0+0xcc/0x2ec\n[   33.454660] Write of size 164 at addr c1d03d30 by task swapper/0/0\n[   33.455515]\n[   33.455767] CPU: 0 PID: 0 Comm: swapper/0 Tainted: G           O       6.1.25-mainline #1\n[   33.456880] Hardware name: Generic DT based system\n[   33.457555]  unwind_backtrace from show_stack+0x18/0x1c\n[   33.458326]  show_stack from dump_stack_lvl+0x40/0x4c\n[   33.459072]  dump_stack_lvl from print_report+0x158/0x4a4\n[   33.459863]  print_report from kasan_report+0x9c/0x148\n[   33.460616]  kasan_report from kasan_check_range+0x94/0x1a0\n[   33.461424]  kasan_check_range from memset+0x20/0x3c\n[   33.462157]  memset from refresh_cpu_vm_stats.constprop.0+0xcc/0x2ec\n[   33.463064]  refresh_cpu_vm_stats.constprop.0 from tick_nohz_idle_stop_tick+0x180/0x53c\n[   33.464181]  tick_nohz_idle_stop_tick from do_idle+0x264/0x354\n[   33.465029]  do_idle from cpu_startup_entry+0x20/0x24\n[   33.465769]  cpu_startup_entry from rest_init+0xf0/0xf4\n[   33.466528]  rest_init from arch_post_acpi_subsys_init+0x0/0x18\n[   33.467397]\n[   33.467644] The buggy address belongs to stack of task swapper/0/0\n[   33.468493]  and is located at offset 112 in frame:\n[   33.469172]  refresh_cpu_vm_stats.constprop.0+0x0/0x2ec\n[   33.469917]\n[   33.470165] This frame has 2 objects:\n[   33.470696]  [32, 76) 'global_zone_diff'\n[   33.470729]  [112, 276) 'global_node_diff'\n[   33.471294]\n[   33.472095] The buggy address belongs to the physical page:\n[   33.472862] page:3cd72da8 refcount:1 mapcount:0 mapping:00000000 index:0x0 pfn:0x41d03\n[   33.473944] flags: 0x1000(reserved|zone=0)\n[   33.474565] raw: 00001000 ed741470 ed741470 00000000 00000000 00000000 ffffffff 00000001\n[   33.475656] raw: 00000000\n[   33.476050] page dumped because: kasan: bad access detected\n[   33.476816]\n[   33.477061] Memory state around the buggy address:\n[   33.477732]  c1d03c00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n[   33.478630]  c1d03c80: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 00 00\n[   33.479526] >c1d03d00: 00 04 f2 f2 f2 f2 00 00 00 00 00 00 f1 f1 f1 f1\n[   33.480415]                                                ^\n[   33.481195]  c1d03d80: 00 00 00 00 00 00 00 00 00 00 04 f3 f3 f3 f3 f3\n[   33.482088]  c1d03e00: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\n[   33.482978] ==================================================================\n\nWe find the root cause of this OOB is that arm does not clear stale stack\npoison in the case of cpuidle.\n\nThis patch refer to arch/arm64/kernel/sleep.S to resolve this issue.\n\nFrom cited commit [1] that explain the problem\n\nFunctions which the compiler has instrumented for KASAN place poison on\nthe stack shadow upon entry and remove this poison prior to returning.\n\nIn the case of cpuidle, CPUs exit the kernel a number of levels deep in\nC code.  Any instrumented functions on this critical path will leave\nportions of the stack shadow poisoned.\n\nIf CPUs lose context and return to the kernel via a cold path, we\nrestore a prior context saved in __cpu_suspend_enter are forgotten, and\nwe never remove the poison they placed in the stack shadow area by\nfunctions calls between this and the actual exit of the kernel.\n\nThus, (depending on stackframe layout) subsequent calls to instrumented\nfunctions may hit this stale poison, resulting in (spurious) KASAN\nsplats to the console.\n\nTo avoid this, clear any stale poison from the idle thread for a CPU\nprior to bringing a CPU online.\n\nFrom cited commit [2]\n\nExtend to check for CONFIG_KASAN_STACK\n\n[1] commit 0d97e6d8024c (\"arm64: kasan: clear stale stack poison\")\n[2] commit d56a9ef84bd0 (\"kasan, arm64: unpoison stack only with CONFIG_KASAN_STACK\")"}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: ARM: 9381/1: kasan: borrar veneno de pila obsoleta Encontramos el siguiente fallo de OOB: [33.452494] ================== =================================================== [ 33.453513] ERROR: KASAN: pila fuera de los l\u00edmites en refresco_cpu_vm_stats.constprop.0+0xcc/0x2ec [33.454660] Escritura de tama\u00f1o 164 en la direcci\u00f3n c1d03d30 mediante task swapper/0/0 [33.455515] [33.455767] CPU: 0 PID : 0 Comm: swapper/0 Tainted: GO 6.1.25-mainline #1 [ 33.456880] Nombre del hardware: Sistema basado en DT gen\u00e9rico [ 33.457555] unwind_backtrace from show_stack+0x18/0x1c [ 33.458326] show_stack from dump_stack_lvl+0x40/0x4c [ 33.45 9072] dump_stack_lvl de print_report+0x158/0x4a4 [ 33.459863] print_report de kasan_report+0x9c/0x148 [ 33.460616] kasan_report de kasan_check_range+0x94/0x1a0 [ 33.461424] kasan_check_range de memset+0x20/0x 3c [33.462157] conjunto de memorias de refresco_cpu_vm_stats.constprop.0+0xcc/ 0x2ec [33.463064] refresco_cpu_vm_stats.constprop.0 de tick_nohz_idle_stop_tick+0x180/0x53c [33.464181] tick_nohz_idle_stop_tick de do_idle+0x264/0x354 [33.465029] do_idle de cpu_startup _entry+0x20/0x24 [ 33.465769] cpu_startup_entry de rest_init+0xf0/0xf4 [ 33.466528] rest_init de arch_post_acpi_subsys_init+0x0/0x18 [33.467397] [33.467644] La direcci\u00f3n con errores pertenece a la pila de task swapper/0/0 [33.468493] y se encuentra en el desplazamiento 112 en el framework: [33.469172] [ 33.469917 ] [ 33.470165] Este framework tiene 2 objetos: [ 33.470696] [32, 76) 'global_zone_diff' [ 33.470729] [112, 276) 'global_node_diff' [ 33.471294] [ 33.472095] La direcci\u00f3n con errores pertenece a la p\u00e1gina f\u00edsica: [ 33.47 2862] p\u00e1gina:3cd72da8 refcount:1 mapcount:0 mapeo:00000000 \u00edndice:0x0 pfn:0x41d03 [ 33.473944] banderas: 0x1000(reservado|zona=0) [ 33.474565] raw: 00001000 ed741470 ed741470 00000000 000000 00000000 ffffffff 00000001 [ 33.475656] sin formato: 00000000 [33.476050] p\u00e1gina volcada porque: kasan: mal acceso detectado [33.476816] [33.477061] Estado de la memoria alrededor de la direcci\u00f3n con errores: [33.477732] c1d03c00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0 [33.478630] c1d03c80 : 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 00 00 [ 33.479526] &gt;c1d03d00: 00 04 f2 f2 f2 f2 00 00 00 00 00 00 f1 f1 f1 f1 [ 33.480415] ^ [ 3.481195] c1d03d80: 00 00 00 00 00 00 00 00 00 00 04 f3 f3 f3 f3 f3 [ 33.482088] c1d03e00: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 [ 33.482978] === ==================================================== ==== Descubrimos que la causa principal de este OOB es que el brazo no elimina el veneno de la pila obsoleta en el caso de cpuidle. Este parche hace referencia a arch/arm64/kernel/sleep.S para resolver este problema. Del compromiso citado [1] que explica el problema. Las funciones que el compilador ha instrumentado para KASAN colocan veneno en la sombra de la pila al ingresar y eliminan este veneno antes de regresar. En el caso de cpuidle, las CPU salen del kernel a varios niveles de profundidad en el c\u00f3digo C. Cualquier funci\u00f3n instrumentada en esta ruta cr\u00edtica dejar\u00e1 partes de la sombra de la pila envenenadas. Si las CPU pierden contexto y regresan al kernel a trav\u00e9s de una ruta fr\u00eda, restauramos un contexto anterior guardado en __cpu_suspend_enter que se olvida y nunca eliminamos el veneno que colocaron en el \u00e1rea de sombra de la pila mediante llamadas a funciones entre este y la salida real del kernel. . Por lo tanto, (dependiendo del dise\u00f1o del framework de pila) las llamadas posteriores a funciones instrumentadas pueden afectar este veneno obsoleto, lo que resulta en s\u00edmbolos KASAN (falsos) en la consola. Para evitar esto, elimine cualquier veneno obsoleto del subproceso inactivo de una CPU antes de ponerla en l\u00ednea. De la confirmaci\u00f3n citada [2] Ampliar para verificar CONFIG_KASAN_STACK [1] commit 0d97e6d8024c (\"arm64: kasan: borrar veneno de pila obsoleta\") [2] commit d56a9ef84bd0 (\"kasan, arm64: pila sin veneno solo con CONFIG_KASAN_STACK\")"}], "metrics": {}, "references": [{"url": "https://git.kernel.org/stable/c/20ac71bee028ffbae4fc14ed679b23b4d3e95726", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/ad702338fe423cb1e79745787090317256a98dab", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/b26f353786d365e658cebc9a9ace88e04fc2325e", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/c4238686f9093b98bd6245a348bcf059cdce23af", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/ee0ce7573e5083031960faf602c9db693ab5b477", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}], "techniques": [{"techniqueID": "T1190", "comment": "This technique falls under the category of Technique T1190, which is about 'Exploitation of System Capabilities'. The vulnerability allows an attacker to exploit the kernel's cpuidle mechanism, potentially leading to a crash or data corruption. This can be exploited by an attacker to gain unauthorized access to the system."}, {"techniqueID": "T1060", "comment": "The vulnerability also allows for exploitation of a 'System Shared Cache Item' which is related to Technique T1060, 'Account Manipulation'. The vulnerability can be exploited to inject a crafted kernel module that manipulates the system's cache to inject malicious code"}, {"techniqueID": "T1046", "comment": "Additionally, the vulnerability can be exploited to perform a 'System Software Compromise' which is related to Technique T1046, 'File and Directory Discovery'. The vulnerability allows an attacker to inject a crafted kernel module that discovers and manipulates the system's files and directories."}], "stix_bundle": "Paste your STIX 2.1 bundle here.", "technical_analysis": {"Introduction": "The vulnerability exists in the Linux kernel's cpuidle mechanism, which allows an attacker to exploit the system capabilities and potentially cause a system crash or data corruption.", "Impact and Scope": "The vulnerability has a CVSS score of 5.5 and its attack vector is on. This means that an attacker with local privileges can exploit this vulnerability to gain unauthorized access to the system.", "Related MITRE ATT&CK Techniques": "The vulnerability is related to Techniques T1190, T1060, and T1046 of the MITRE ATT&CK framework.", "Technical Details": "The vulnerability is caused by a lack of proper memory handling in the kernel's cpuidle mechanism, which allows an attacker to inject a crafted kernel module that exploits this vulnerability.", "Detection": "To detect this vulnerability, you can monitor kernel logs for suspicious activities, such as unusual module loading or system crashes.", "Mitigation": "To mitigate this vulnerability, you can apply the patch provided by the kernel developers or disable the cpuidle mechanism.", "Conclusion": "In conclusion, the vulnerability represents a significant risk to system security and should be addressed promptly."}, "executive_analysis": {"Overview": "The vulnerability is a critical issue that affects the security of the Linux kernel.", "Business Impact": "The vulnerability has a significant business impact as it can allow unauthorized access to critical systems, leading to data breaches or system crashes.", "Technical Impact": "The vulnerability has a significant technical impact as it affects the operation of the Linux kernel and can lead to system crashes or data corruption.", "Mitigation Strategies": "The recommended mitigation strategies are to apply the patch provided by the kernel developers or disable the cpuidle mechanism.", "Recommendations": "We recommend that executives prioritize the application of the patch or disabling the cpuidle mechanism to minimize the risk of unauthorized access to critical systems.", "Conclusions": "In conclusion, the vulnerability represents a significant risk to system security and should be addressed promptly."}}