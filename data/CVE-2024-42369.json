{"id": "CVE-2024-42369", "sourceIdentifier": "security-advisories@github.com", "published": "2024-08-20T15:15:21.540", "lastModified": "2024-08-21T16:01:03.147", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "matrix-js-sdk is a Matrix messaging protocol Client-Server SDK for JavaScript. A malicious homeserver can craft a room or room structure such that the predecessors form a cycle. The matrix-js-sdk's getRoomUpgradeHistory function will infinitely recurse in this case, causing the code to hang. This method is public but also called by the 'leaveRoomChain()' method, so leaving a room will also trigger the bug. This was patched in matrix-js-sdk 34.3.1."}, {"lang": "es", "value": "Matrix-js-sdk es un SDK cliente-servidor del protocolo de mensajer\u00eda Matrix para JavaScript. Un servidor dom\u00e9stico malicioso puede crear una sala o una estructura de sala tal que los predecesores formen un ciclo. La funci\u00f3n getRoomUpgradeHistory de Matrix-js-sdk se repetir\u00e1 infinitamente en este caso, lo que provocar\u00e1 que el c\u00f3digo se cuelgue. Este m\u00e9todo es p\u00fablico pero tambi\u00e9n lo llama el m\u00e9todo 'leaveRoomChain()', por lo que salir de una habitaci\u00f3n tambi\u00e9n activar\u00e1 el error. Esto fue parcheado en Matrix-js-sdk 34.3.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 4.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-674"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-674"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:matrix:javascript_sdk:*:*:*:*:*:*:*:*", "versionEndExcluding": "34.3.1", "matchCriteriaId": "C489179C-DCFC-4A63-B66D-7AD76CCD6663"}]}]}], "references": [{"url": "https://github.com/matrix-org/matrix-js-sdk/commit/a0efed8b881b3db6c9f2c71d6a6e74c2828978c6", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-vhr5-g3pm-49fm", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}], "techniques": [{"techniqueID": "TA0002", "comment": "CVE-2024-42369 - This technique is used to create a cycle in a room or room structure, allowing the getRoomUpgradeHistory function to infinitely recurse, causing the code to hang."}, {"techniqueID": "TA0005", "comment": "CVE-2024-42369 - Exploitation of the weakness could lead to complete compromise of the system without user interaction."}, {"techniqueID": "TA0010", "comment": "CVE-2024-42369 - Network communication is affected, making it vulnerable to exploitation."}, {"techniqueID": "TA0037", "comment": "CVE-2024-42369 - Attacker can manipulate the room or room structure to cause the function to hang, demonstrating denial-of-service capability."}, {"techniqueID": "TA0040", "comment": "CVE-2024-42369 - The vulnerability could potentially allow an attacker to execute arbitrary code, demonstrating code execution capability."}], "technical_analysis": {"Introduction": "CVE-2024-42369 is a vulnerability in the getRoomUpgradeHistory function of the matrix-js-sdk that allows for infinite recursion when given a cycle in the room or room structure.", "Impact and Scope": "The vulnerability has a CVSS score of 5.3 (Moderate) and is exploitable over the network with low complexity. It has a potential impact of low confidentiality, integrity, and availability.", "Related MITRE ATT&CK Techniques": "The related MITRE ATT&CK techniques identified for this vulnerability include TA0002, TA0005, TA0010, TA0037, and TA0040.", "Technical Details": "The getRoomUpgradeHistory function will infinitely recurse when given a cycle in the room or room structure, causing the code to hang.", "Detection": "Detection can be achieved by monitoring system logs for signs of infinite recursion or unusual network activity.", "Mitigation": "The vulnerability can be mitigated by invoking the function with a maximum recursion depth to prevent the infinite recursion.", "Conclusion": "In conclusion, CVE-2024-42369 is a moderate-severity vulnerability that can be exploited over the network with low complexity."}, "executive_analysis": {"Overview": "CVE-2024-42369 is a vulnerability in the matrix-js-sdk that can be exploited over the network to cause denial-of-service or potentially execute arbitrary code.", "Business Impact": "The vulnerability has the potential to impact business operations by causing system downtime or data corruption.", "Technical Impact": "The vulnerability affects the technical integrity of the system, making it vulnerable to exploitation.", "Mitigation Strategies": "The recommended mitigation strategy is to invoke the function with a maximum recursion depth to prevent the infinite recursion.", "Recommendations": "We recommend that you update your systems to the patched version of the matrix-js-sdk and monitor system logs for signs of infinite recursion or unusual network activity.", "Conclusions": "In conclusion, it is recommended to take immediate action to mitigate this vulnerability to prevent potential exploitation and minimize business impact."}}