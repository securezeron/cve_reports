{"id": "CVE-2023-5252", "sourceIdentifier": "security@wordfence.com", "published": "2023-10-30T14:15:09.530", "lastModified": "2023-11-08T02:12:53.770", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "The FareHarbor plugin for WordPress is vulnerable to Stored Cross-Site Scripting via shortcodes in versions up to, and including, 3.6.7 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers with contributor-level and above permissions to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page."}, {"lang": "es", "value": "El complemento FareHarbor para WordPress es vulnerable a Cross-Site Scripting (XSS) Almacenado a trav\u00e9s de shortcodes en versiones hasta la 3.6.7 incluida debido a una sanitizaci\u00f3n de entrada y a un escape de salida en los atributos proporcionados por el usuario insuficientes. Esto hace posible que atacantes autenticados con permisos de nivel de colaborador y superiores inyecten scripts web arbitrarios en p\u00e1ginas que se ejecutar\u00e1n cada vez que un usuario acceda a una p\u00e1gina inyectada."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security@wordfence.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.1, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fareharbor:fareharbor:*:*:*:*:*:wordpress:*:*", "versionEndIncluding": "3.6.7", "matchCriteriaId": "877E87D1-A9AB-4524-A548-EAA842F5705B"}]}]}], "references": [{"url": "https://plugins.trac.wordpress.org/browser/fareharbor/tags/3.6.7/fareharbor.php#L287", "source": "security@wordfence.com", "tags": ["Patch"]}, {"url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/42ad6fef-4280-45db-a3e2-6d7522751fa7?source=cve", "source": "security@wordfence.com", "tags": ["Third Party Advisory"]}], "techniques": [{"techniqueID": "T1059.005", "comment": "CVE-2023-5252 - This technique allows for storing malicious scripts on a WordPress page, which can be executed by any user who visits the page, allowing for unauthenticated RCE. A robust whitelist of allowed shortcodes can help mitigate this attack"}, {"techniqueID": "T1204.004", "comment": "CVE-2023-5252 - This technique is used to inject malicious scripts into the page, which can then be executed by the user. Detecting and blocking suspicious requests can help prevent this attack"}, {"techniqueID": "T1095.015", "comment": "CVE-2023-5252 - This technique allows for injecting malicious scripts into the page, which can then be executed by the user. Implementing a Content Security Policy (CSP) can help prevent this attack"}, {"techniqueID": "T1117", "comment": "CVE-2023-5252 - This technique is used to inject malicious scripts into the page, which can then be executed by the user. Monitoring for unusual requests and blocks can help detect and prevent this attack"}], "stix_bundle": {"$schema": "https://stix2.io/schema/2.1/stix_bundle", "type": "bundle", "id": "5c24c3a9-4c89-45a3-8315-2f4c6a9445a9", "created": "2023-11-08T02:12:53.770", "updated": "2023-11-08T02:12:53.770", "top_level_elements": [{"type": "vulnerability", "id": "https://www.commonvulnerabilities.nist.gov/entry/2023/10/CVE-2023-5252", "created": "2023-10-30T14:15:09.530", "updated": "2023-11-08T02:12:53.770", "name": "CVE-2023-5252: Stored Cross-Site Scripting in FareHarbor Plugin", "description": [{"lang": "en", "value": "The FareHarbor plugin for WordPress is vulnerable to Stored Cross-Site Scripting via shortcodes in versions up to, and including, 3.6.7 due to insufficient input sanitization and output escaping on user supplied attributes."}], "objects": [{"type": "note", "id": "https://www.commonvulnerabilities.nist.gov/entry/2023/10/CVE-2023-5252/note/5c24c3a9-4c89-45a3-8315-2f4c6a9445a9", "created": "2023-10-30T14:15:09.530", "updated": "2023-11-08T02:12:53.770", "note_contents": [{"lang": "en", "value": "A robust whitelist of allowed shortcodes can help mitigate this attack"}]}, {"type": "note", "id": "https://www.commonvulnerabilities.nist.gov/entry/2023/10/CVE-2023-5252/note/5c24c3a9-4c89-45a3-8315-2f4c6a9445a9", "created": "2023-10-30T14:15:09.530", "updated": "2023-11-08T02:12:53.770", "note_contents": [{"lang": "en", "value": "Implementing a Content Security Policy (CSP) can help prevent this attack"}]}]}]}, "technical_analysis": {"Introduction": "The FareHarbor plugin for WordPress is vulnerable to Stored Cross-Site Scripting due to insufficient input sanitization and output escaping on user supplied attributes.", "Impact and Scope": "The vulnerability affects versions up to and including 3.6.7, allowing an authenticated attacker with contributor-level and above permissions to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.", "Related MITRE ATT&CK Techniques": "T1059.005, T1204.004, T1095.015, T1117", "Technical Details": "The vulnerability is caused by the FareHarbor plugin's failure to properly sanitize and escape user-supplied attributes, allowing an attacker to inject malicious scripts into the page.", "Detection": "Detecting and blocking suspicious requests can help prevent this attack.", "Mitigation": "Implementing a Content Security Policy (CSP) and a robust whitelist of allowed shortcodes can help mitigate this attack.", "Conclusion": "The FareHarbor plugin for WordPress is vulnerable to Stored Cross-Site Scripting due to insufficient input sanitization and output escaping on user supplied attributes, allowing an attacker to inject malicious scripts into the page. Implementing a Content Security Policy (CSP) and a robust whitelist of allowed shortcodes can help mitigate this attack."}, "executive_analysis": {"Overview": "The FareHarbor plugin for WordPress has been found to be vulnerable to Stored Cross-Site Scripting due to insufficient input sanitization and output escaping on user supplied attributes.", "Business Impact": "This vulnerability can potentially allow an attacker to inject malicious scripts into the page, which can then be executed by the user.", "Technical Impact": "The vulnerability affects versions up to and including 3.6.7, allowing an authenticated attacker with contributor-level and above permissions to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.", "Mitigation Strategies": "Implementing a Content Security Policy (CSP) and a robust whitelist of allowed shortcodes can help mitigate this attack.", "Recommendations": "It is recommended that WordPress users update the FareHarbor plugin to the latest version and implement a Content Security Policy (CSP) and a robust whitelist of allowed shortcodes.", "Conclusions": "The FareHarbor plugin for WordPress is vulnerable to Stored Cross-Site Scripting due to insufficient input sanitization and output escaping on user supplied attributes, and it is recommended that WordPress users update the FareHarbor plugin to the latest version and implement a Content Security Policy (CSP) and a robust whitelist of allowed shortcodes."}}