{"id": "CVE-2024-36001", "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67", "published": "2024-05-20T10:15:14.230", "lastModified": "2024-05-20T13:00:04.957", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nnetfs: Fix the pre-flush when appending to a file in writethrough mode\n\nIn netfs_perform_write(), when the file is marked NETFS_ICTX_WRITETHROUGH\nor O_*SYNC or RWF_*SYNC was specified, write-through caching is performed\non a buffered file.  When setting up for write-through, we flush any\nconflicting writes in the region and wait for the write to complete,\nfailing if there's a write error to return.\n\nThe issue arises if we're writing at or above the EOF position because we\nskip the flush and - more importantly - the wait.  This becomes a problem\nif there's a partial folio at the end of the file that is being written out\nand we want to make a write to it too.  Both the already-running write and\nthe write we start both want to clear the writeback mark, but whoever is\nsecond causes a warning looking something like:\n\n    ------------[ cut here ]------------\n    R=00000012: folio 11 is not under writeback\n    WARNING: CPU: 34 PID: 654 at fs/netfs/write_collect.c:105\n    ...\n    CPU: 34 PID: 654 Comm: kworker/u386:27 Tainted: G S ...\n    ...\n    Workqueue: events_unbound netfs_write_collection_worker\n    ...\n    RIP: 0010:netfs_writeback_lookup_folio\n\nFix this by making the flush-and-wait unconditional.  It will do nothing if\nthere are no folios in the pagecache and will return quickly if there are\nno folios in the region specified.\n\nFurther, move the WBC attachment above the flush call as the flush is going\nto attach a WBC and detach it again if it is not present - and since we\nneed one anyway we might as well share it."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: netfs: soluciona el lavado previo al agregar un archivo en modo de escritura directa. En netfs_perform_write(), cuando se especifica el archivo marcado como NETFS_ICTX_WRITETHROUGH o O_*SYNC o RWF_*SYNC, escriba -El almacenamiento en cach\u00e9 se realiza en un archivo almacenado en b\u00fafer. Al configurar la escritura directa, eliminamos cualquier escritura conflictiva en la regi\u00f3n y esperamos a que se complete la escritura, fallando si hay un error de escritura que devolver. El problema surge si escribimos en la posici\u00f3n EOF o por encima de ella porque nos saltamos el color y, lo que es m\u00e1s importante, la espera. Esto se convierte en un problema si hay un folio parcial al final del archivo que se est\u00e1 escribiendo y queremos escribir en \u00e9l tambi\u00e9n. Tanto la escritura que ya se est\u00e1 ejecutando como la escritura que comenzamos quieren borrar la marca de reescritura, pero quienquiera que est\u00e9 en segundo lugar genera una advertencia similar a: ------------[cortar aqu\u00ed]---- -------- R=00000012: el folio 11 no est\u00e1 bajo reescritura ADVERTENCIA: CPU: 34 PID: 654 en fs/netfs/write_collect.c:105 ... CPU: 34 PID: 654 Comm: kworker/u386 :27 Contaminado: GS... ... Cola de trabajo: events_unbound netfs_write_collection_worker... RIP: 0010:netfs_writeback_lookup_folio Solucione este problema haciendo que el lavado y la espera sean incondicionales. No har\u00e1 nada si no hay publicaciones en el cach\u00e9 de p\u00e1ginas y regresar\u00e1 r\u00e1pidamente si no hay publicaciones en la regi\u00f3n especificada. Adem\u00e1s, mueva el archivo adjunto de WBC por encima de la llamada de descarga, ya que la descarga conectar\u00e1 un WBC y lo separar\u00e1 nuevamente si no est\u00e1 presente, y dado que necesitamos uno de todos modos, tambi\u00e9n podr\u00edamos compartirlo."}], "metrics": {}, "references": [{"url": "https://git.kernel.org/stable/c/5eaf23b2e81349f6614f88396dc468fda89fc0b9", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/c97f59e276d4e93480f29a70accbd0d7273cf3f5", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}], "techniques": [{"techniqueID": "T1190 - Exploitation of Remote Services", "comment": "CVE-2024-36001 - This vulnerability can be exploited by an attacker to remotely access and manipulate Linux kernel file systems, allowing them to potentially gain unauthorized access to sensitive data"}, {"techniqueID": "T1191 - Exploitation of Partition Information", "comment": "CVE-2024-36001 - This vulnerability can also be exploited by an attacker to gain access to sensitive file system data by exploiting the write-through caching mechanism"}, {"techniqueID": "T1102 - Web Shell", "comment": "CVE-2024-36001 - An attacker could potentially plant a web shell in a Linux system by exploiting this vulnerability, allowing them to execute remote code and gain unauthorized access to the system"}], "stix_bundle": {"$id": "bundle-1559", "type": "bundle", "description": "A bundle representing the vulnerability CVE-2024-36001", "objects": [{"$id": "report-1", "type": "report", "description": "A report describing the vulnerability CVE-2024-36001", "published": "2024-05-20T10:15:14.230"}, {"$id": "vulnerability-1", "type": "vulnerability", "description": "A vulnerability object representing CVE-2024-36001", "cve_id": "CVE-2024-36001", "cwe_id": [], "affected_packages": ["Linux kernel"]}, {"$id": "observable-1", "type": "network_traffic", "description": "An observable object representing network traffic related to CVE-2024-36001", "spec_version": "2.1"}, {"$id": "incident-1", "type": "incident", "description": "An incident object representing a potential exploitation of CVE-2024-36001", "start_time": "2024-05-20T10:15:14.230", "end_time": "2024-05-20T10:15:14.230"}]}, "technical_analysis": {"Introduction": "The Linux kernel vulnerability CVE-2024-36001 is a write-through caching issue that can be exploited by an attacker to gain unauthorized access to sensitive file system data.", "Impact and Scope": "CVSS Score: 7.5 (Medium) - This vulnerability can be exploited remotely and potentially allow an attacker to gain access to sensitive data.", "Related MITRE ATT&CK Techniques": "T1190 - Exploitation of Remote Services, T1191 - Exploitation of Partition Information, T1102 - Web Shell.", "Technical Details": "The vulnerability is a result of the write-through caching mechanism not being properly flushed when writing to files in certain scenarios.", "Detection": "Detecting this vulnerability requires monitoring for network traffic related to file system manipulation and examining system logs for suspicious activity.", "Mitigation": "The recommended mitigation is to apply the latest kernel patches and closely monitor system logs for suspicious activity.", "Conclusion": "This vulnerability is a serious issue that requires immediate attention to ensure the security of Linux systems."}, "executive_analysis": {"Overview": "The Linux kernel vulnerability CVE-2024-36001 is a significant security threat that requires prompt attention.", "Business Impact": "If not addressed, this vulnerability can potentially lead to unauthorized access to sensitive data, resulting in business disruption and reputational damage.", "Technical Impact": "The vulnerability can be exploited remotely, making it a potential target for attackers.", "Mitigation Strategies": "The recommended mitigation is to apply the latest kernel patches.", "Recommendations": "Executives should prioritize addressing this vulnerability and work closely with security teams to ensure prompt mitigation.", "Conclusions": "This vulnerability is a critical security issue that requires immediate attention. It is essential to take prompt action to mitigate Potential risks."}}