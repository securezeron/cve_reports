{"id": "CVE-2024-26151", "sourceIdentifier": "security-advisories@github.com", "published": "2024-02-22T19:15:09.300", "lastModified": "2024-02-23T02:42:54.547", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "The `mjml` PyPI package, found at the `FelixSchwarz/mjml-python` GitHub repo, is an unofficial Python port of MJML, a markup language created by Mailjet. All users of `FelixSchwarz/mjml-python` who insert untrusted data into mjml templates unless that data is checked in a very strict manner. User input like `&lt;script&gt;` would be rendered as `<script>` in the final HTML output. The attacker must be able to control some data which is later injected in an mjml template which is then send out as email to other users. The attacker could control contents of email messages sent through the platform. The problem has been fixed in version 0.11.0 of this library. Versions before 0.10.0 are not affected by this security issue. As a workaround, ensure that potentially untrusted user input does not contain any sequences which could be rendered as HTML."}, {"lang": "es", "value": "El paquete PyPI `mjml`, que se encuentra en el repositorio de GitHub `FelixSchwarz/mjml-python`, es una versi\u00f3n Python no oficial de MJML, un lenguaje de marcado creado por Mailjet. Todos los usuarios de `FelixSchwarz/mjml-python` que insertan datos que no son de confianza en plantillas mjml a menos que esos datos se verifiquen de manera muy estricta. La entrada del usuario como `&lt;script&gt;` se representar\u00eda como `"}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.3}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "references": [{"url": "https://github.com/FelixSchwarz/mjml-python/commit/84c495da20a91640a1ca551ace17df7f3be644aa", "source": "security-advisories@github.com"}, {"url": "https://github.com/FelixSchwarz/mjml-python/commit/8d410b7a500703080bb14ed7e3d2663fe16767e6", "source": "security-advisories@github.com"}, {"url": "https://github.com/FelixSchwarz/mjml-python/issues/52", "source": "security-advisories@github.com"}, {"url": "https://github.com/FelixSchwarz/mjml-python/releases/tag/v0.11.0", "source": "security-advisories@github.com"}, {"url": "https://github.com/FelixSchwarz/mjml-python/security/advisories/GHSA-578p-fxmm-6229", "source": "security-advisories@github.com"}], "techniques": [{"techniqueID": "T1036", "comment": "CVE-2024-26151 - This technique is relevant to this vulnerability as it exploits the insecure deserialization of user input. Attackers can inject malicious data that can execute commands. This is a high-severity vulnerability that requires immediate attention to prevent further attacks."}, {"techniqueID": "T1055", "comment": "CVE-2024-26151 - This technique is relevant to this vulnerability as it involves command and control communication over an external command and control (C2) server. Attackers can use this technique to communicate with the C2 server and execute malicious commands."}, {"techniqueID": "TA0001", "comment": "CVE-2024-26151 - This technique is relevant to this vulnerability as it involves initial reconnaissance and scanning to identify potential targets. Attackers can use this technique to gather information about the target system and network."}, {"techniqueID": "T1190", "comment": "CVE-2024-26151 - This technique is relevant to this vulnerability as it involves hidden codes and backdoors left in an application to bypass security controls. Attackers can use this technique to gain persistence on the compromised system."}], "stix_bundle": {"bundle": {"type": "bundle", "id": "bundle--cve-2024-26151", "created_by_ref": "user--1", "created": "2024-02-22T19:15:09.300", "modified": "2024-02-23T02:42:54.547", "objects": [{"type": "vulnerability", "id": "vulnerability--cve-2024-26151", "created_by_ref": "user--1", "created": "2024-02-22T19:15:09.300", "modified": "2024-02-23T02:42:54.547", "name": "CVE-2024-26151", "description": "Insecure Deserialization of User Input in MJML Python Library", "cvss": {"vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:H/A:L", "baseScore": 8.2, "baseSeverity": "HIGH"}, "references": {"object_reference": [{"id": "reference--1", "type": "reference", "href": "https://github.com/FelixSchwarz/mjml-python/commit/84c495da20a91640a1ca551ace17df7f3be644aa", "name": "Commit Reference"}, {"id": "reference--2", "type": "reference", "href": "https://github.com/FelixSchwarz/mjml-python/commit/8d410b7a500703080bb14ed7e3d2663fe16767e6", "name": "Commit Reference"}, {"id": "reference--3", "type": "reference", "href": "https://github.com/FelixSchwarz/mjml-python/issues/52", "name": "Issue Reference"}, {"id": "reference--4", "type": "reference", "href": "https://github.com/FelixSchwarz/mjml-python/releases/tag/v0.11.0", "name": "Release Reference"}, {"id": "reference--5", "type": "reference", "href": "https://github.com/FelixSchwarz/mjml-python/security/advisories/GHSA-578p-fxmm-6229", "name": "Advisory Reference"}]}, "course_of_action": {"object_course_of_action": [{"id": "course-of-action--1", "type": "course-of-action", "description": "Update to version 0.11.0", "relationship": "mitigated_by"}]}, "containment": {"object_containment": [{"id": "containment--1", "type": "containment", "description": "Network segmentation", "relationship": "helps_to"}]}, "detection": {"object_detection": [{"id": "detection--1", "type": "detection", "description": "Identify and block suspicious traffic", "relationship": "detects"}]}}]}}, "technical_analysis": {"Introduction": "CVE-2024-26151 is a high-severity vulnerability in the MJML Python library that allows attackers to inject malicious data and execute commands. This vulnerability affects all users of the MJML Python library who insert untrusted data into MJML templates unless that data is checked in a very strict manner.", "Impact and Scope": "The impact of this vulnerability is high, with a CVSS base score of 8.2. The scope of the vulnerability is limited to users of the MJML Python library who insert untrusted data into MJML templates.", "Related MITRE ATT&CK Techniques": "The related MITRE ATT&CK techniques for this vulnerability are T1036, T1055, TA0001, and T1190.", "Technical Details": "The vulnerability occurs when the MJML Python library deserializes user input without proper validation. This allows attackers to inject malicious data that can execute commands.", "Detection": "Detection of this vulnerability can be achieved by monitoring network traffic for suspicious activity, such as attempts to inject malicious data into MJML templates.", "Mitigation": "The mitigation for this vulnerability is to update to version 0.11.0, which includes the fix for this vulnerability.", "Conclusion": "In conclusion, CVE-2024-26151 is a high-severity vulnerability in the MJML Python library that allows attackers to inject malicious data and execute commands. To mitigate this vulnerability, users should update to version 0.11.0 and implement proper validation of user input."}, "executive_analysis": {"Overview": "CVE-2024-26151 is a high-severity vulnerability in the MJML Python library that allows attackers to inject malicious data and execute commands. This vulnerability affects all users of the MJML Python library who insert untrusted data into MJML templates unless that data is checked in a very strict manner.", "Business Impact": "The business impact of this vulnerability is significant, as it allows attackers to compromise the integrity of user data and execute malicious commands. This could result in financial losses, reputational damage, and legal liabilities.", "Technical Impact": "The technical impact of this vulnerability is significant, as it affects the security of the MJML Python library and could allow attackers to gain persistent access to the system.", "Mitigation Strategies": "The mitigation strategies for this vulnerability are to update to version 0.11.0 and implement proper validation of user input.", "Recommendations": "Recommendations for executives include prioritizing the patching of this vulnerability, implementing additional security measures to prevent similar vulnerabilities from occurring, and conducting regular vulnerability assessments to identify and mitigate potential security threats.", "Conclusions": "In conclusion, CVE-2024-26151 is a critical vulnerability that requires immediate attention. Executives should prioritize the mitigation of this vulnerability and implement additional security measures to prevent similar vulnerabilities from occurring in the future."}}