{"id": "CVE-2020-4035", "sourceIdentifier": "security-advisories@github.com", "published": "2020-06-03T17:15:26.153", "lastModified": "2020-06-11T19:56:56.273", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "In WatermelonDB (NPM package \"@nozbe/watermelondb\") before versions 0.15.1 and 0.16.2, a maliciously crafted record ID can exploit a SQL Injection vulnerability in iOS adapter implementation and cause the app to delete all or selected records from the database, generally causing the app to become unusable. This may happen in apps that don't validate IDs (valid IDs are `/^[a-zA-Z0-9_-.]+$/`) and use Watermelon Sync or low-level `database.adapter.destroyDeletedRecords` method. The integrity risk is low due to the fact that maliciously deleted records won't synchronize, so logout-login will restore all data, although some local changes may be lost if the malicious deletion causes the sync process to fail to proceed to push stage. No way to breach confidentiality with this vulnerability is known. Full exploitation of SQL Injection is mitigated, because it's not possible to nest an insert/update query inside a delete query in SQLite, and it's not possible to pass a semicolon-separated second query. There's also no known practicable way to breach confidentiality by selectively deleting records, because those records will not be synchronized. It's theoretically possible that selective record deletion could cause an app to behave insecurely if lack of a record is used to make security decisions by the app. This is patched in versions 0.15.1, 0.16.2, and 0.16.1-fix"}, {"lang": "es", "value": "En WatermelonDB (paquete NPM \"@nozbe/watermelondb\") versiones anteriores a 0.15.1 y 0.16.2, un ID de registro dise\u00f1ado con fines maliciosos puede explotar una vulnerabilidad de inyecci\u00f3n SQL en la implementaci\u00f3n del adaptador iOS y causar que la aplicaci\u00f3n elimine todo o registros seleccionados de la base de datos, por lo general, la aplicaci\u00f3n queda inutilizable. Esto puede suceder en aplicaciones que no comprueban los ID (los ID v\u00e1lidos son \"/^[a-zA-Z0-9_-.]+$/\") y usan Watermelon Sync o el m\u00e9todo \"database.adapter.destroyDeletedRecords\" de bajo nivel . El riesgo de integridad es bajo debido al hecho de que los registros eliminados maliciosamente no se sincronizar\u00e1n, por lo que el inicio de sesi\u00f3n cerrar\u00e1 todos los datos, aunque algunos cambios locales pueden perderse si la eliminaci\u00f3n maliciosa causa que el proceso de sincronizaci\u00f3n no avance a la etapa de inserci\u00f3n. No se conoce ninguna manera de violar la confidencialidad con esta vulnerabilidad. Una explotaci\u00f3n completa de la inyecci\u00f3n SQL se mitiga, porque no es posible anidar una consulta de inserci\u00f3n/actualizaci\u00f3n dentro de una consulta de eliminaci\u00f3n en SQLite, y no es posible pasar una segunda consulta separada por punto y coma. Tampoco se conoce una manera pr\u00e1ctica de violar la confidencialidad mediante la eliminaci\u00f3n selectiva de registros, porque esos registros no se sincronizar\u00e1n. Te\u00f3ricamente es posible que la eliminaci\u00f3n de registros selectiva pueda hacer que una aplicaci\u00f3n se comporte de forma no segura si la falta de un registro para tomar decisiones de seguridad es usada por la aplicaci\u00f3n. Esto est\u00e1 parcheado en las versiones 0.15.1, 0.16.2 y 0.16.1-fix"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 4.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 4.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nozbe:watermelondb:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.15.1", "matchCriteriaId": "246C2261-8971-4C09-90AC-15AD5A864A1F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nozbe:watermelondb:0.16.0:*:*:*:*:*:*:*", "matchCriteriaId": "E9E2E1B2-B5DA-4010-8635-B555309F84C1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nozbe:watermelondb:0.16.1:*:*:*:*:*:*:*", "matchCriteriaId": "2FF01DBC-C248-40CA-BD58-B75E94D99D3D"}]}]}], "references": [{"url": "https://github.com/Nozbe/WatermelonDB/commit/924c7ae2a8d7d6459656751e5b9b1bf91a218025", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Nozbe/WatermelonDB/security/advisories/GHSA-38f9-m297-6q9g", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}], "techniques": [{"techniqueID": "T1059", "comment": "CVE-2020-4035 - Unvalidated input in WatermelonDB allows an attacker to inject malicious data, potentially leading to SQL injection. This is a classic example of CWE-89."}, {"techniqueID": "T1547", "comment": "CVE-2020-4035 - Attackers can exploit this vulnerability to gain unauthorized access to sensitive data, potentially leading to a high-impact data breach. Defenders should closely monitor for suspicious database queries and limit access to sensitive data."}, {"techniqueID": "T1571", "comment": "CVE-2020-4035 - This vulnerability can be used as a stepping stone for further attacks, such as privilege escalation or data exfiltration. Defenders should implement robust database access controls and monitor for unusual behavior."}], "stix_bundle": {"objects": [{"id": "vulnerability:cve-2020-4035", "type": "malware", "description": "CVE-2020-4035: Unvalidated input in WatermelonDB allows an attacker to inject malicious data."}, {"objects": [{"id": "technique:t1059", "type": "attack-pattern", "description": "T1059: Input validation false negatives", "related_objects": ["vulnerability:cve-2020-4035"]}, {"id": "technique:t1547", "type": "attack-pattern", "description": "T1547: Data stealing", "related_objects": ["vulnerability:cve-2020-4035"]}, {"id": "technique:t1571", "type": "attack-pattern", "description": "T1571: Network exploitation", "related_objects": ["vulnerability:cve-2020-4035"]}, {"id": "course-of-action:mitigate_vulnerability", "type": "course-of-action", "description": "Mitigate vulnerability CVE-2020-4035", "related_objects": ["vulnerability:cve-2020-4035", "technique:t1059"]}, {"id": "course-of-action:implement_database_access_controls", "type": "course-of-action", "description": "Implement robust database access controls", "related_objects": ["vulnerability:cve-2020-4035", "technique:t1547", "technique:t1571"]}, {"id": "note:detect_unusual_database_queries", "type": "note", "description": "Detect unusual database queries", "related_objects": ["vulnerability:cve-2020-4035", "technique:t1059"]}]}]}, "technical_analysis": {"Introduction": "Unvalidated input in WatermelonDB's iOS adapter allows an attacker to inject malicious data, potentially leading to SQL injection.", "Impact and Scope": "CVSS 3.1 base score: 5.9; Attack Vector: Network; Attack Complexity: High; Confidentiality Impact: None; Integrity Impact: Low; Availability Impact: High.", "Related MITRE ATT&CK Techniques": "T1059, T1547, T1571", "Technical Details": "The vulnerability is due to the lack of input validation in WatermelonDB's iOS adapter. An attacker can exploit this vulnerability to inject malicious data, potentially leading to SQL injection.", "Detection": "Monitor for unusual database queries and limit access to sensitive data", "Mitigation": "Implement robust database access controls, validate user input, and regularly update software", "Conclusion": "The CVE-2020-4035 vulnerability is a high-priority issue that requires immediate attention to prevent exploitation and data breaches."}, "executive_analysis": {"Overview": "CVE-2020-4035 is a high-severity vulnerability in WatermelonDB's iOS adapter that allows an attacker to inject malicious data, potentially leading to SQL injection.", "Business Impact": "This vulnerability can lead to data breaches, resulting in significant financial and reputational damage.", "Technical Impact": "The vulnerability is critical, as it can be exploited to dump sensitive data, disrupt business operations, and compromise sensitive information.", "Mitigation Strategies": "Implement robust database access controls, validate user input, and regularly update software", "Recommendations": "Conduct a thorough risk assessment, prioritize vulnerability remediation, and develop a comprehensive incident response plan", "Conclusions": "The CVE-2020-4035 vulnerability is a high-priority issue that requires immediate attention to prevent exploitation and data breaches."}}