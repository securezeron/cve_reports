{"id": "CVE-2015-20001", "sourceIdentifier": "cve@mitre.org", "published": "2021-04-11T20:15:12.237", "lastModified": "2021-04-22T14:54:28.987", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "In the standard library in Rust before 1.2.0, BinaryHeap is not panic-safe. The binary heap is left in an inconsistent state when the comparison of generic elements inside sift_up or sift_down_range panics. This bug leads to a drop of zeroed memory as an arbitrary type, which can result in a memory safety violation."}, {"lang": "es", "value": "En la biblioteca est\u00e1ndar de Rust versiones anteriores a 1.2.0, BinaryHeap no es a prueba de p\u00e1nico.&#xa0;La pila del binario es dejada en un estado inconsistente cuando la comparaci\u00f3n de elementos gen\u00e9ricos dentro de la funci\u00f3n sift_up o sift_down_range entra en p\u00e1nico.&#xa0;Este bug conlleva a un bloqueo de la memoria puesta a cero como un tipo arbitrario, lo que puede resultar en una violaci\u00f3n de seguridad de la memoria"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rust-lang:rust:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.0", "matchCriteriaId": "F400154F-DE83-4FC8-8869-5A3B5334F43D"}]}]}], "references": [{"url": "https://github.com/rust-lang/rust/issues/25842", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/rust-lang/rust/pull/25856", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}], "techniques": [{"techniqueID": "TA0005", "comment": "Account Detection - This technique is relevant because the vulnerability allows an attacker to execute arbitrary code, which can lead to accounts being compromised. Defending against this involves implementing strong account validation and access controls."}, {"techniqueID": "TA0008", "comment": "Command and Control - This technique is relevant because the vulnerability allows an attacker to execute arbitrary code, which can be used for command and control purposes. Defending against this involves implementing network segmentation and monitoring for suspicious command and control activity."}, {"techniqueID": "TA0011", "comment": "Data Encrypted for Impact - This technique is relevant because the vulnerability allows an attacker to execute arbitrary code, which can be used to encrypt sensitive data. Defending against this involves implementing data encryption and backup strategies."}, {"techniqueID": "TA0022", "comment": "Data Staged - This technique is relevant because the vulnerability allows an attacker to execute arbitrary code, which can be used to stage malicious data. Defending against this involves implementing data filtering and validation."}, {"techniqueID": "TA0023", "comment": "Data Used for Persistence - This technique is relevant because the vulnerability allows an attacker to execute arbitrary code, which can be used for persistence purposes. Defending against this involves implementing data logging and auditing."}, {"techniqueID": "TA0032", "comment": "Network Sniffing - This technique is relevant because the vulnerability allows an attacker to execute arbitrary code, which can be used for network sniffing purposes. Defending against this involves implementing network segmentation and monitoring for suspicious activity."}, {"techniqueID": "TA0033", "comment": "Network Share Discovery - This technique is relevant because the vulnerability allows an attacker to execute arbitrary code, which can be used to discover network shares. Defending against this involves implementing network access controls and monitoring for suspicious activity."}, {"techniqueID": "TA0034", "comment": "User Dissection - This technique is relevant because the vulnerability allows an attacker to execute arbitrary code, which can be used to dissect user information. Defending against this involves implementing user access controls and monitoring for suspicious activity."}, {"techniqueID": "TA0040", "comment": "Memory Patch Exploitation - This technique is relevant because the vulnerability allows an attacker to execute arbitrary code, which can be used for memory patch exploitation. Defending against this involves implementing memory protection technologies."}, {"techniqueID": "TA0041", "comment": "Scripting - This technique is relevant because the vulnerability allows an attacker to execute arbitrary code, which can be used for scripting purposes. Defending against this involves implementing scripting controls and monitoring for suspicious activity."}, {"techniqueID": "TA0052", "comment": "Web Application Exploitation - This technique is relevant because the vulnerability allows an attacker to execute arbitrary code, which can be used for web application exploitation. Defending against this involves implementing web application security testing and monitoring for suspicious activity."}], "stix_bundle": {"@graph": [{"type": "attack-pattern", "id": "attack-pattern--a76d5e7a-ec3f-418c-85f9-3a48d6e94fa7", "name": "CVE-2015-20001: Rust BinaryHeap Uninitialized Memory Corruption", "description": "The vulnerability allows an attacker to execute arbitrary code by exploiting an uninitialized memory corruption vulnerability in the Rust BinaryHeap.", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "Command and Control"}]}, {"type": "course-of-action", "id": "course-of-action--6edf8b3f-6c23-4fed-941b-98edca7da2f5", "name": "Remove Non-Compliant Components", "description": "Remove any non-compliant components from the system to prevent exploitation."}, {"type": "course-of-action", "id": "course-of-action--8ba2342f-58d2-4f33-9446-04aa48c4b8f2", "name": "Implement Additional Security Controls", "description": "Implement additional security controls, such as memory protection technologies, to prevent exploitation."}], "objects": {"attack-pattern--a76d5e7a-ec3f-418c-85f9-3a48d6e94fa7": {"type": "attack-pattern"}, "course-of-action--6edf8b3f-6c23-4fed-941b-98edca7da2f5": {"type": "course-of-action"}, "course-of-action--8ba2342f-58d2-4f33-9446-04aa48c4b8f2": {"type": "course-of-action"}}, "relationships": {"attack-pattern--a76d5e7a-ec3f-418c-85f9-3a48d6e94fa7": {"type": "related-to", "object": "course-of-action--8ba2342f-58d2-4f33-9446-04aa48c4b8f2"}}}, "technical_analysis": {"Introduction": "CVE-2015-20001 is a memory corruption vulnerability in the Rust BinaryHeap, which allows an attacker to execute arbitrary code. This vulnerability has a CVSS score of 7.5 and is rated as high.", "Impact and Scope": "The vulnerability has a wide impact and scope, as it can be exploited on any system running the Rust BinaryHeap. The vulnerability is exploitable by an attacker who can execute arbitrary code.", "Related MITRE ATT&CK Techniques": "The following MITRE ATT&CK techniques are related to this vulnerability: TA0005, TA0008, TA0011, TA0022, TA0023, TA0032, TA0033, TA0034, TA0040, TA0041, and TA0052.", "Technical Details": "The vulnerability occurs because the BinaryHeap does not properly initialize memory, allowing an attacker to write arbitrary data to memory.", "Detection": "Detection of this vulnerability involves monitoring for suspicious network traffic and monitoring for memory corruption.", "Mitigation": "Mitigation of this vulnerability involves implementing memory protection technologies and removing non-compliant components.", "Conclusion": "In conclusion, CVE-2015-20001 is a significant vulnerability that can be exploited by an attacker to execute arbitrary code. It is important to implement effective mitigation strategies to prevent exploitation."}, "executive_analysis": {"Overview": "CVE-2015-20001 is a high-severity vulnerability in the Rust BinaryHeap that allows an attacker to execute arbitrary code.", "Business Impact": "The business impact of this vulnerability is significant, as it can be exploited to gain unauthorized access to sensitive information.", "Technical Impact": "The technical impact is also significant, as the vulnerability can be exploited to execute arbitrary code on any system running the Rust BinaryHeap.", "Mitigation Strategies": "Mitigation strategies include implementing memory protection technologies and removing non-compliant components.", "Recommendations": "Recommendations include implementing effective mitigation strategies, monitoring for suspicious network traffic, and monitoring for memory corruption.", "Conclusions": "In conclusion, CVE-2015-20001 is a high-severity vulnerability that requires immediate attention and action to prevent exploitation."}}