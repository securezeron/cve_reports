{"id": "CVE-2024-3891", "sourceIdentifier": "security@wordfence.com", "published": "2024-05-02T17:15:32.090", "lastModified": "2024-05-02T18:00:37.360", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "The Happy Addons for Elementor plugin for WordPress is vulnerable to Stored Cross-Site Scripting via HTML tags in widgets in all versions up to, and including, 3.10.5 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers, with contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page."}, {"lang": "es", "value": "El complemento Happy Addons para Elementor para WordPress es vulnerable a Cross-Site Scripting Almacenado a trav\u00e9s de etiquetas HTML en widgets en todas las versiones hasta la 3.10.5 incluida debido a una sanitizaci\u00f3n de entrada insuficiente y a un escape de salida en los atributos proporcionados por el usuario. Esto hace posible que atacantes autenticados, con acceso de nivel de colaborador y superior, inyecten scripts web arbitrarios en p\u00e1ginas que se ejecutar\u00e1n cada vez que un usuario acceda a una p\u00e1gina inyectada."}], "metrics": {"cvssMetricV31": [{"source": "security@wordfence.com", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.1, "impactScore": 2.7}]}, "references": [{"url": "https://plugins.trac.wordpress.org/changeset/3072960/happy-elementor-addons/trunk/widgets/site-title/widget.php", "source": "security@wordfence.com"}, {"url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/ade7f391-3824-4d0b-8718-f7995170a43d?source=cve", "source": "security@wordfence.com"}], "techniques": [{"techniqueID": "T1059.007", "comment": "CVE-2024-3891 - Stored Cross-Site Scripting (XSS) via HTML tags in widgets is a Classic Phishing technique that can lead to data exfiltration and unauthorized access to sensitive information. Defending against this vulnerability involves validating and sanitizing user input, as well as monitoring for suspicious script execution."}, {"techniqueID": "T1190", "comment": "Using APIs and Services or Invalid Code Pages to inject malicious code is a common tactic used in Stored XSS attacks. In this case, the vulnerability is exploited through contributor-level access and above, making it important to restrict privilege escalation and monitor access to sensitive areas of the application."}, {"techniqueID": "T1096", "comment": "The use of webshells to execute arbitrary code is a classic tactic used in stored XSS attacks. In this case, the vulnerability makes it possible for attackers to inject webshells and execute arbitrary code, making it important to monitor and restrict access to sensitive areas of the application."}], "stix_bundle": {"id": "https://example.com/cve-2024-3891", "type": "bundle", "components": [{"id": "https://example.com/cve-2024-3891", "type": "vulnerability", "name": "CVE-2024-3891: Stored Cross-Site Scripting in Happy Addons for Elementor", "description": "Stored Cross-Site Scripting in Happy Addons for Elementor", "created": "2024-05-02T17:15:32", "modified": "2024-05-02T18:00:37", "severity": "MEDIUM", "cvss": {"vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N", "baseScore": 6.4}}, {"id": "https://example.com/t1059.007", "type": "attack-pattern", "name": "T1059.007: Stored Cross-Site Scripting", "description": "Stored Cross-Site Scripting", "created": "2024-05-02T17:15:32", "modified": "2024-05-02T18:00:37", "attack_pattern": {"type": "stored-xss"}}, {"id": "https://example.com/t1190", "type": "attack-pattern", "name": "T1190: Using APIs and Services or Invalid Code Pages", "description": "Using APIs and Services or Invalid Code Pages to inject malicious code", "created": "2024-05-02T17:15:32", "modified": "2024-05-02T18:00:37", "attack_pattern": {"type": "code-injection"}}, {"id": "https://example.com/t1096", "type": "attack-pattern", "name": "T1096: Webshell", "description": "Webshell execution", "created": "2024-05-02T17:15:32", "modified": "2024-05-02T18:00:37", "attack_pattern": {"type": "webshell"}}], "relationship": [{"id": "https://example.com/cve-2024-3891/t1059.007", "type": "uses", "object_id": "https://example.com/t1059.007"}, {"id": "https://example.com/cve-2024-3891/t1190", "type": "uses", "object_id": "https://example.com/t1190"}, {"id": "https://example.com/cve-2024-3891/t1096", "type": "uses", "object_id": "https://example.com/t1096"}]}, "technical_analysis": {"Introduction": "Happy Addons for Elementor plugin for WordPress is vulnerable to Stored Cross-Site Scripting (XSS) due to insufficient input sanitization and output escaping.", "Impact and Scope": "This vulnerability allows authenticated attackers with contributor-level access and above to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.", "Related MITRE ATT&CK Techniques": "T1059.007, T1190, T1096", "Technical Details": "The vulnerability is due to the lack of input sanitization and output escaping on user-supplied attributes in widgets.", "Detection": "Detecting this vulnerability requires monitoring for suspicious script execution and inspecting user input for potential XSS payloads.", "Mitigation": "Validating and sanitizing user input, restricting privilege escalation, and monitoring access to sensitive areas of the application can help mitigate this vulnerability.", "Conclusion": "This vulnerability highlights the importance of proper input validation and sanitization in web applications to prevent XSS attacks."}, "executive_analysis": {"Overview": "The Happy Addons for Elementor plugin for WordPress is vulnerable to Stored Cross-Site Scripting (XSS) due to insufficient input sanitization and output escaping.", "Business Impact": "This vulnerability can lead to data exfiltration and unauthorized access to sensitive information, potentially compromising business operations and reputation.", "Technical Impact": "The vulnerability affects the security and integrity of the application, potentially allowing attackers to execute arbitrary code and inject malware.", "Mitigation Strategies": "Implementing input validation and sanitization, restricting privilege escalation, and monitoring access to sensitive areas of the application can help mitigate this vulnerability.", "Recommendations": "Entities using the affected plugin should prioritize patching and validating user input to prevent XSS attacks.", "Conclusions": "This vulnerability highlights the importance of regular security testing and adherence to secure coding practices to prevent similar vulnerabilities in the future."}}