{"id": "CVE-2020-2175", "sourceIdentifier": "jenkinsci-cert@googlegroups.com", "published": "2020-04-07T13:15:13.777", "lastModified": "2023-11-02T21:42:00.827", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "Jenkins FitNesse Plugin 1.31 and earlier does not correctly escape report contents before showing them on the Jenkins UI, resulting in a stored cross-site scripting (XSS) vulnerability exploitable by users able to control the XML input files processed by the plugin."}, {"lang": "es", "value": "En Jenkins FitNesse Plugin versiones 1.31 y anteriores, no escapan correctamente a los contenidos del reporte antes de mostrarlos en la Interfaz de Usuario de Jenkins, resultando en una vulnerabilidad de tipo cross-site scripting  (XSS) explotable por usuarios capaces de controlar los archivos de entrada XML procesados ??por el plugin."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jenkins:fitnesse:*:*:*:*:*:jenkins:*:*", "versionEndIncluding": "1.31", "matchCriteriaId": "965940E7-CB26-41DF-BB8C-DF7DA40FAD6A"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2020/04/07/3", "source": "jenkinsci-cert@googlegroups.com", "tags": ["Mailing List"]}, {"url": "https://jenkins.io/security/advisory/2020-04-07/#SECURITY-1801", "source": "jenkinsci-cert@googlegroups.com", "tags": ["Third Party Advisory"]}], "techniques": [{"techniqueID": "T1222", "comment": "Jenkins FitNesse Plugin's failure to correctly escape report contents before showing them on the Jenkins UI leads to a stored cross-site scripting (XSS) vulnerability. Cross-site scripting (XSS) is a technique used to inject malicious JavaScript code into a web page."}, {"techniqueID": "T1504", "comment": "The vulnerability allows attackers to inject malicious content into the Jenkins UI, making it a potential entry point for further attacks. Defenders should consider restricting user interaction with the Jenkins UI and implementing strict input validation and sanitization."}, {"techniqueID": "T1190", "comment": "The stored XSS vulnerability can be exploited by users able to control the XML input files processed by the plugin, making it a potential technique for an attacker to execute arbitrary JavaScript code."}, {"techniqueID": "T1505", "comment": "Defenders can mitigate the risk by configuring the Jenkins server to only allow trusted input sources and implementing strict input validation and sanitization to prevent malicious code injection."}], "stix_bundle": {"type": "bundle", "id": "CVE-2020-2175", "spec_version": "2.1", "objects": [{"type": "vulnerability", "id": "CVE-2020-2175", "title": "Jenkins FitNesse Plugin stored cross-site scripting (XSS) vulnerability", "description": "Jenkins FitNesse Plugin 1.31 and earlier does not correctly escape report contents before showing them on the Jenkins UI, resulting in a stored cross-site scripting (XSS) vulnerability exploitable by users able to control the XML input files processed by the plugin.", "severity": "Moderate", "base_score": 5.4, "vector_string": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "configuration": {"type": "cpe", "id": "cpe:2.3:a:jenkins:fitnesse:*:*:*:*:*:jenkins:*:*", "version_end_including": "1.31"}}, {"type": "course_of_action", "id": "DEFEND-1", "title": "Configure Jenkins server to only allow trusted input sources", "description": "Configure the Jenkins server to only allow trusted input sources to prevent malicious code injection.", "techniques": [{"type": "technique", "id": "T1505", "title": "Restrict user interaction with the Jenkins UI"}]}, {"type": "course_of_action", "id": "DEFEND-2", "title": "Implement strict input validation and sanitization", "description": "Implement strict input validation and sanitization to prevent malicious code injection.", "techniques": [{"type": "technique", "id": "T1504", "title": "Implement strict input validation and sanitization"}]}], "relationships": [{"type": "related", "from": "CVE-2020-2175", "to": "DEFEND-1", "label": "mitigates"}, {"type": "related", "from": "CVE-2020-2175", "to": "DEFEND-2", "label": "mitigates"}]}, "technical_analysis": {"Introduction": "The Jenkins FitNesse Plugin stored cross-site scripting (XSS) vulnerability occurs when the plugin fails to correctly escape report contents before showing them on the Jenkins UI.", "Impact and Scope": "The vulnerability has a base score of 5.4 with a CVSS 3.1 vector string of AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N, indicating a moderate severity attack vector.", "Related MITRE ATT&CK Techniques": "Related MITRE ATT&CK techniques include T1222, T1504, and T1190.", "Technical Details": "The vulnerability is exploitable by users able to control the XML input files processed by the plugin, making it a potential technique for an attacker to execute arbitrary JavaScript code.", "Detection": "Detection of this vulnerability is difficult because it requires careful analysis of the Jenkins UI and identifying potential malicious code injection.", "Mitigation": "Mitigation strategies include configuring the Jenkins server to only allow trusted input sources and implementing strict input validation and sanitization.", "Conclusion": "In conclusion, the Jenkins FitNesse Plugin stored cross-site scripting (XSS) vulnerability is a moderate severity threat that requires immediate attention to prevent exploitation."}, "executive_analysis": {"Overview": "The Jenkins FitNesse Plugin stored cross-site scripting (XSS) vulnerability is a moderate severity threat that requires immediate attention to prevent exploitation.", "Business Impact": "This vulnerability can lead to unauthorized access to sensitive data and financial losses.", "Technical Impact": "The vulnerability can be exploited by users able to control the XML input files processed by the plugin, making it a potential technique for an attacker to execute arbitrary JavaScript code.", "Mitigation Strategies": "Mitigation strategies include configuring the Jenkins server to only allow trusted input sources and implementing strict input validation and sanitization.", "Recommendations": "Recommendations for executives include conducting a thorough security audit and implementing immediate mitigation strategies to prevent exploitation.", "Conclusions": "In conclusion, the Jenkins FitNesse Plugin stored cross-site scripting (XSS) vulnerability is a serious threat that requires immediate attention and mitigation."}}