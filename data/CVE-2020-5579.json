{"id": "CVE-2020-5579", "sourceIdentifier": "vultures@jpcert.or.jp", "published": "2020-05-20T11:15:10.363", "lastModified": "2021-03-23T16:26:50.170", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "SQL injection vulnerability in the Paid Memberships versions prior to 2.3.3 allows attacker with administrator rights to execute arbitrary SQL commands via unspecified vectors."}, {"lang": "es", "value": "Una vulnerabilidad de inyecci\u00f3n SQL en el Paid Memberships versiones anteriores a 2.3.3, permite a atacantes con derechos de administrador ejecutar comandos SQL arbitrarios por medio de vectores no especificados."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:strangerstudios:paid_memberships_pro:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "2.3.3", "matchCriteriaId": "322E366D-3495-4A09-B267-66319B76F0FF"}]}]}], "references": [{"url": "https://jvn.jp/en/jp/JVN20248858/index.html", "source": "vultures@jpcert.or.jp", "tags": ["Third Party Advisory"]}, {"url": "https://www.paidmembershipspro.com/pmpro-update-2-3-3-security-release/", "source": "vultures@jpcert.or.jp", "tags": ["Vendor Advisory"]}], "techniques": [{"techniqueID": "TA0010", "comment": "CVE-2020-5579 - SQL Injection vulnerability, attackers can inject malicious SQL code to access sensitive data. This can be prevented by validating user input and protecting against common web attacks."}, {"techniqueID": "TA0040", "comment": "CVE-2020-5579 - Input validation and sanitization should be performed to prevent SQL injection attacks, this will prevent attackers from injecting malicious SQL code."}, {"techniqueID": "TA0048", "comment": "CVE-2020-5579 - It is essential to secure database connections by using secure protocols and cryptographic mechanisms, this can prevent attackers from accessing sensitive data."}], "stix_bundle": {"identity": {"type": "vulnerability", "id": "CVE-2020-5579"}, "objects": [{"type": "indicator", "id": "Indicator-1", "description": "SQL Injection attempt", "pattern": "{\"pattern\": \"\\b([\\w\\s]+)\\s+EXEC\\s*\\(\\s*(\\w+)\\s*\\)\""}, {"type": "course-of-action", "id": "COA-1", "title": "Defend against SQL Injection", "description": "Implement input validation and sanitization, secure database connections and monitor database logs"}, {"type": "course-of-action", "id": "COA-2", "title": "Mitigate SQL Injection", "description": "Implement web application firewalls, monitor network traffic and prevent unknown SQL statements"}, {"type": "note", "id": "Note-1", "title": "Detection", "content": "Monitor database logs and network traffic for suspicious activity, detect and alert on SQL injection attempts"}, {"type": "note", "id": "Note-2", "title": "Mitigation", "content": "Implement mitigation strategies such as input validation and sanitization, secure database connections, web application firewalls, and monitoring network traffic"}], "relationships": [{"type": "related-to", "score": 0.8, "description": "The vulnerability can be mitigated by implementing input validation and sanitization"}, {"type": "mitigates", "score": 0.7, "description": "The COA can mitigate the vulnerability by preventing SQL injection attacks"}, {"type": "indicates", "score": 0.6, "description": "The indicator can indicate a SQL injection attempt"}]}, "technical_analysis": {"Introduction": "Introduction to CVE-2020-5579", "Impact and Scope": "CVE-2020-5579 scores 7.2 in CVSSv3, it is an SQL injection vulnerability that can lead to data breaches and system compromise", "Related MITRE ATT&CK Techniques": "TA0010, TA0040, TA0048", "Technical Details": "The vulnerability occurs when user input is not properly sanitized and validated, allowing attackers to inject malicious SQL code", "Detection": "Detect SQL injection attempts by monitoring database logs and network traffic", "Mitigation": "Implement input validation and sanitization, secure database connections, web application firewalls, and monitor network traffic", "Conclusion": "This technical analysis aims to provide a comprehensive overview of the vulnerability and its mitigation strategies"}, "executive_analysis": {"Overview": "Overview of CVE-2020-5579", "Business Impact": "The vulnerability can lead to data breaches and system compromise, causing loss of sensitive data and reputational damage", "Technical Impact": "The vulnerability can lead to unauthorized access to sensitive data and system compromise", "Mitigation Strategies": "Implement input validation and sanitization, secure database connections, and monitor network traffic", "Recommendations": "Prioritize the mitigation of this vulnerability, consider implementing a web application firewall and monitoring network traffic", "Conclusions": "In conclusion, this executive analysis highlights the importance of mitigating this vulnerability to prevent data breaches and system compromise"}}