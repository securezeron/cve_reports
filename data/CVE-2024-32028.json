{"id": "CVE-2024-32028", "sourceIdentifier": "security-advisories@github.com", "published": "2024-04-12T23:15:06.643", "lastModified": "2024-04-15T13:15:31.997", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "OpenTelemetry dotnet is a dotnet telemetry framework. In affected versions of `OpenTelemetry.Instrumentation.Http` and `OpenTelemetry.Instrumentation.AspNetCore` the `url.full` writes attribute/tag on spans (`Activity`) when tracing is enabled for outgoing http requests and `OpenTelemetry.Instrumentation.AspNetCore` writes the `url.query` attribute/tag on spans (`Activity`) when tracing is enabled for incoming http requests. These attributes are defined by the Semantic Conventions for HTTP Spans. Up until version `1.8.1` the values written by `OpenTelemetry.Instrumentation.Http` & `OpenTelemetry.Instrumentation.AspNetCore` will pass-through the raw query string as was sent or received (respectively). This may lead to sensitive information (e.g. EUII - End User Identifiable Information, credentials, etc.) being leaked into telemetry backends (depending on the application(s) being instrumented) which could cause privacy and/or security incidents. Note: Older versions of `OpenTelemetry.Instrumentation.Http` & `OpenTelemetry.Instrumentation.AspNetCore` may use different tag names but have the same vulnerability. The `1.8.1` versions of `OpenTelemetry.Instrumentation.Http` & `OpenTelemetry.Instrumentation.AspNetCore` will now redact by default all values detected on transmitted or received query strings. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "OpenTelemetry dotnet es un framework de telemetr\u00eda dotnet. En las versiones afectadas de `OpenTelemetry.Instrumentation.Http` y `OpenTelemetry.Instrumentation.AspNetCore`, `url.full` escribe atributos/etiquetas en intervalos (`Activity`) cuando el rastreo est\u00e1 habilitado para solicitudes http salientes y `OpenTelemetry.Instrumentation. AspNetCore` escribe el atributo/etiqueta `url.query` en intervalos (`Actividad`) cuando el seguimiento est\u00e1 habilitado para solicitudes http entrantes. Estos atributos est\u00e1n definidos por las convenciones sem\u00e1nticas para intervalos HTTP. Hasta la versi\u00f3n `1.8.1`, los valores escritos por `OpenTelemetry.Instrumentation.Http` y `OpenTelemetry.Instrumentation.AspNetCore` pasar\u00e1n a trav\u00e9s de la cadena de consulta sin formato tal como se envi\u00f3 o recibi\u00f3 (respectivamente). Esto puede dar lugar a que se filtre informaci\u00f3n confidencial (por ejemplo, EUII: informaci\u00f3n identificable del usuario final, credenciales, etc.) a los servidores de telemetr\u00eda (dependiendo de las aplicaciones que se instrumenten), lo que podr\u00eda causar incidentes de privacidad y/o seguridad. Nota: Las versiones anteriores de `OpenTelemetry.Instrumentation.Http` y `OpenTelemetry.Instrumentation.AspNetCore` pueden usar nombres de etiquetas diferentes pero tienen la misma vulnerabilidad. Las versiones `1.8.1` de `OpenTelemetry.Instrumentation.Http` y `OpenTelemetry.Instrumentation.AspNetCore` ahora redactar\u00e1n de forma predeterminada todos los valores detectados en las cadenas de consulta transmitidas o recibidas. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:C/C:L/I:N/A:N", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-201"}, {"lang": "en", "value": "CWE-212"}]}], "references": [{"url": "https://github.com/open-telemetry/opentelemetry-dotnet/commit/e222ecb5942d4ce1cadfd4306c39e3f4933a5c42", "source": "security-advisories@github.com"}, {"url": "https://github.com/open-telemetry/opentelemetry-dotnet/security/advisories/GHSA-vh2m-22xx-q94f", "source": "security-advisories@github.com"}, {"url": "https://github.com/open-telemetry/semantic-conventions/blob/main/docs/http/http-spans.md", "source": "security-advisories@github.com"}], "techniques": [{"techniqueID": "T1499", "comment": "CVE-2024-32028 - OpenTelemetry dotnet instrumentation framework leak of sensitive data. This technique is relevant as it affects the integrity of HTTP requests and responses, allowing sensitive data to be exposed."}, {"techniqueID": "T1190", "comment": "CVE-2024-32028 - Redacted query strings can reveal sensitive information. This technique is relevant as it enables attackers to gain access to sensitive information, potentially leading to further exploitation."}, {"techniqueID": "T1059", "comment": "CVE-2024-32028 - Improper neutralization of special elements in a response. This technique is relevant as it can lead to the exposure of sensitive data, potentially compromising confidentiality and integrity."}], "stix_bundle": {"bundle": {"id": "CVE-2024-32028", "type": "bundle", "created_by_ref": "https://github.com/open-telemetry/opentelemetry-dotnet", "created": "2024-04-12T23:15:06.643", "last_updated": "2024-04-15T13:15:31.997", "labels": ["CVE-2024-32028", "OpenTelemetry", "dotnet"], "objects": [{"id": "https://github.com/open-telemetry/opentelemetry-dotnet/commit/e222ecb5942d4ce1cadfd4306c39e3f4933a5c42", "type": "incident", "label": "Security Advisory", "description": "OpenTelemetry dotnet instrumentation framework leak of sensitive data", "objects": [{"id": "https://github.com/open-telemetry/semantic-conventions/blob/main/docs/http/http-spans.md", "type": "document", "label": "Semantic Conventions for HTTP Spans"}], "relations": [{"id": "https://github.com/open-telemetry/opentelemetry-dotnet/security/advisories/GHSA-vh2m-22xx-q94f", "type": "has_reference", "relationship": "cve", "target_ref": "https://github.com/open-telemetry/opentelemetry-dotnet/commit/e222ecb5942d4ce1cadfd4306c39e3f4933a5c42"}]}]}}, "technical_analysis": {"Introduction": "The OpenTelemetry dotnet instrumentation framework has a vulnerability that allows sensitive data to be leaked into telemetry backends.", "Impact and Scope": "The vulnerability has a CVSS score of 4.1 with a low attack complexity, making it relevant for organizations using OpenTelemetry dotnet.", "Related MITRE ATT&CK Techniques": "The vulnerability is related to techniques such as T1499, T1190, and T1059, which can be used to exploit sensitive data.", "Technical Details": "The vulnerability occurs when user interaction is not required, making it easier for attackers to exploit.", "Detection": "Detection can be achieved through monitoring of telemetry data and identifying sensitive information exposure.", "Mitigation": "Mitigation strategies include updating OpenTelemetry dotnet to version 1.8.1 and above, and ensuring sensitive information is properly redacted.", "Conclusion": "The vulnerability highlights the importance of proper telemetry data handling and the need for regular updates to ensure security."}, "executive_analysis": {"Overview": "The OpenTelemetry dotnet instrumentation framework has a vulnerability that can expose sensitive data.", "Business Impact": "The vulnerability can compromise confidentiality and integrity, potentially leading to financial losses and reputational damage.", "Technical Impact": "The vulnerability allows attackers to gain access to sensitive information, potentially leading to further exploitation.", "Mitigation Strategies": "Mitigation strategies include updating OpenTelemetry dotnet and ensuring sensitive information is properly redacted.", "Recommendations": "Recommendations include conducting regular security assessments and implementing robust telemetry data handling practices.", "Conclusions": "The vulnerability emphasizes the importance of prioritizing security and following best practices for telemetry data handling."}}