{"id": "CVE-2024-32878", "sourceIdentifier": "security-advisories@github.com", "published": "2024-04-26T21:15:49.260", "lastModified": "2024-04-29T12:42:03.667", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "Llama.cpp is LLM inference in C/C++. There is a use of uninitialized heap variable vulnerability in gguf_init_from_file, the code will free this uninitialized variable later. In a simple POC, it will directly cause a crash. If the file is carefully constructed, it may be possible to control this uninitialized value and cause arbitrary address free problems. This may further lead to be exploited. Causes llama.cpp to crash (DoS) and may even lead to arbitrary code execution (RCE). This vulnerability has been patched in commit b2740.\n"}, {"lang": "es", "value": "Llama.cpp es una inferencia LLM en C/C++. Hay un uso de vulnerabilidad de variable de mont\u00f3n no inicializada en gguf_init_from_file, el c\u00f3digo liberar\u00e1 esta variable no inicializada m\u00e1s adelante. En una POC simple, provocar\u00e1 directamente un bloqueo. Si el archivo se construye cuidadosamente, es posible controlar este valor no inicializado y causar problemas sin direcciones arbitrarias. Esto puede llevar a\u00fan m\u00e1s a ser explotado. Provoca que llama.cpp falle (DoS) e incluso puede provocar la ejecuci\u00f3n de c\u00f3digo arbitrario (RCE). Esta vulnerabilidad ha sido parcheada en el commit b2740."}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-456"}]}], "references": [{"url": "https://github.com/ggerganov/llama.cpp/releases/tag/b2749", "source": "security-advisories@github.com"}, {"url": "https://github.com/ggerganov/llama.cpp/security/advisories/GHSA-p5mv-gjc5-mwqv", "source": "security-advisories@github.com"}], "techniques": [{"techniqueID": "T1190", "comment": "CVE-2024-32878 - Uninitialized heap variable vulnerability can be exploited to achieve arbitrary address free and crashes, potentially leading to DoS and RCE attacks.  Techniques like T1190 allow attackers to indirectly access and control sensitive data."}, {"techniqueID": "T1041", "comment": "CVE-2024-32878 - Network-based attack vector detected, where attackers can exploit uninitialized heap variable vulnerability to achieve DoS and RCE attacks.  Techniques like T1041 involve reconnaissance and initial access."}, {"techniqueID": "T1053", "comment": "CVE-2024-32878 - Weakness in Llama.cpp's gguf_init_from_file function, allowing attackers to influence uninitialized variables and potentially leading to arbitrary code execution.  Techniques like T1053 involve exploitation of system resources."}], "stix_bundle": {"$schema": "https://docs.oasis-open.org/STIX/stix/v2.1/stix-core-v2.1.json", "type": "bundle", "id": "CVE-2024-32878", "lang": "en", "spec_version": "2.1", "stix_version": "2.1", "objects": [{"type": "vulnerability", "id": "CVE-2024-32878", "lang": "en", "name": "Uninitialized Heap Variable Vulnerability in Llama.cpp", "description": [{"lang": "en", "value": "The gguf_init_from_file function in Llama.cpp allows attackers to influence uninitialized variables and potentially leading to arbitrary code execution."}], "_cvss-v3": {"vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L"}, "attack_pattern": [{"id": "ap:exploit-uninitialized-heap", "lang": "en", "description": [{"lang": "en", "value": "Exploits the uninitialized heap variable vulnerability in Llama.cpp's gguf_init_from_file function."}]}]}, {"type": "kill_chain_phase", "id": "kc:exploit", "lang": "en", "kill_chain_name": "MITRE ATT&CK", "kill_chain_version": "6.0", "phase_order": 1, "name": "Initial Access", "description": [{"lang": "en", "value": "Attacker exploits the uninitialized heap variable vulnerability in Llama.cpp's gguf_init_from_file function to gain initial access."}]}, {"type": "course_of_action", "id": "coa:patch", "lang": "en", "description": [{"lang": "en", "value": "Apply the patch released in commit b2740 to resolve the uninitialized heap variable vulnerability in Llama.cpp's gguf_init_from_file function."}], "mitigates": [{"id": "vulnerability:CVE-2024-32878", "lang": "en", "relationship": "mitigates"}]}]}, "technical_analysis": {"Introduction": "The Llama.cpp library contains a use-after-free vulnerability, which can be exploited to gain arbitrary code execution.", "Impact and Scope": "This vulnerability has a CVSS score of 7.1, with an attack vector of NETWORK, and can lead to partial or total damage to the system.", "Related MITRE ATT&CK Techniques": "T1190, T1041, T1053", "Technical Details": "The vulnerability occurs in the gguf_init_from_file function, where an uninitialized heap variable is used. Exploitation of this vulnerability can lead to arbitrary code execution.", "Detection": "Detect the usage of the uninitialized heap variable in the gguf_init_from_file function.", "Mitigation": "Apply the patch released in commit b2740 to resolve the uninitialized heap variable vulnerability.", "Conclusion": "Exploiting the uninitialized heap variable vulnerability can lead to arbitrary code execution, and it is essential to apply the patch released in commit b2740 to resolve this vulnerability."}, "executive_analysis": {"Overview": "The Llama.cpp library contains a use-after-free vulnerability, which can be exploited to gain arbitrary code execution.", "Business Impact": "This vulnerability can lead to partial or total damage to the system, affecting business operations and potentially causing financial losses.", "Technical Impact": "The vulnerability can be exploited to gain arbitrary code execution, allowing attackers to gain control of the system.", "Mitigation Strategies": "Apply the patch released in commit b2740 to resolve the uninitialized heap variable vulnerability.", "Recommendations": "Ensure timely patching, implement robust incident response, and conduct regular security assessments.", "Conclusions": "The use-after-free vulnerability in Llama.cpp can lead to catastrophic consequences, and it is essential to take proactive measures to mitigate this vulnerability."}}