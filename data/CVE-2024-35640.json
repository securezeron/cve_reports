{"id": "CVE-2024-35640", "sourceIdentifier": "audit@patchstack.com", "published": "2024-06-03T08:15:09.330", "lastModified": "2024-06-03T14:46:24.250", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "Improper Neutralization of Input During Web Page Generation (XSS or 'Cross-site Scripting') vulnerability in Tomas Cordero Safety Exit allows Stored XSS.This issue affects Safety Exit: from n/a through 1.7.0."}, {"lang": "es", "value": "La vulnerabilidad de neutralizaci\u00f3n inadecuada de la entrada durante la generaci\u00f3n de p\u00e1ginas web (XSS o 'Cross-site Scripting') en Tomas Cordero Safety Exit permite XSS almacenado. Este problema afecta a Safety Exit: desde n/a hasta 1.7.0."}], "metrics": {"cvssMetricV31": [{"source": "audit@patchstack.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 3.7}]}, "weaknesses": [{"source": "audit@patchstack.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "references": [{"url": "https://patchstack.com/database/vulnerability/safety-exit/wordpress-safety-exit-plugin-1-7-0-cross-site-scripting-xss-vulnerability?_s_id=cve", "source": "audit@patchstack.com"}], "techniques": [{"techniqueID": "T1059", "comment": "CVE-2024-35640 - This Stored XSS vulnerability allows an attacker to inject malicious code into the Safety Exit plugin of WordPress. This technique can be used to deliver other attacks, such as Pharming or Identity Theft."}, {"techniqueID": "T1048", "comment": "CVE-2024-35640 - Attackers can use this Stored XSS vulnerability to inject malicious JavaScript code into the Safety Exit plugin, which can be used to steal user credentials, cookies, or even sensitive information."}, {"techniqueID": "T1190", "comment": "CVE-2024-35640 - This technique involves the use of Cross-site Scripting (XSS) weakness to inject malicious scripts into the Safety Exit plugin, ultimately leading to the execution of unauthorized code."}], "stix_bundle": "{\"bundle\":{\"name\":\"CVE-2024-35640\",\"resources\":{\"vulnerability\":{\"id\":\"CVE-2024-35640\",\"description\":\"Improper Neutralization of Input During Web Page Generation (XSS or 'Cross-site Scripting') vulnerability in Tomas Cordero Safety Exit allows Stored XSS.\"}},\"objects\":{\"attack-pattern\":{\"id\":\"T1059\",\"name\":\"Command and Scripting Interpreter\",\"description\":\"An attacker delivers a malicious executable or script through various means using a variety of techniques.\"},\"intrusion-set\":{\"id\":\"T1048\",\"name\":\"Cross-site Scripting\",\"description\":\"The threat actor gains access to the system through cross-site scripting (XSS).\"},\"malware\":{\"id\":\"Stored XSS\",\"name\":\"Cross-site Scripting\",\"description\":\"The attacker injects JavaScript code into the Safety Exit plugin, which is then executed on the user's browser.\"}},\"relationship\":{\"attack-pattern\":{\"uses-objects\":{\"type\":\"uses\",\"id\":\"T1059\",\"object\":{\"object-relations\":{\"type\":\"has-part\",\"id\":\"T1048\",\"object\":{\"object-relations\":{\"type\":\"uses\",\"id\":\"Stored XSS\",\"object\":{\"object-relations\":{}}}}}}},\"vulnerability\":{\"uses-objects\":{\"type\":\"uses\",\"id\":\"CVE-2024-35640\",\"object\":{\"object-relations\":{\"type\":\"has-part\",\"id\":\"T1190\",\"object\":{\"object-relations\":{\"type\":\"precedes\",\"id\":\"T1059\",\"object\":{\"object-relations\":{}}}}}}},\"intrusion-set\":{\"uses-objects\":{\"type\":\"uses\",\"id\":\"T1048\",\"object\":{\"object-relations\":{\"type\":\"has-part\",\"id\":\"T1190\",\"object\":{\"object-relations\":{\"type\":\"precedes\",\"id\":\"T1059\",\"object\":{\"object-relations\":{}}}}}}}}}", "technical_analysis": {"Introduction": "This vulnerability allows an attacker to inject malicious code into the Safety Exit plugin of WordPress, which can lead to various attacks such as Pharming or Identity Theft.", "Impact and Scope": "The vulnerability affects Safety Exit plugin versions 1.7.0 and below, with a CVSSv3.1 score of 5.9 and an attack complexity of LOW.", "Related MITRE ATT&CK Techniques": "The related MITRE ATT&CK techniques are T1059, T1048, and T1190, which describe the use of command and scripting interpreters, cross-site scripting, and stored XSS.", "Technical Details": "The vulnerability occurs due to the improper neutralization of input during web page generation, allowing an attacker to inject malicious JavaScript code into the Safety Exit plugin.", "Detection": "Detection of this vulnerability relies on monitoring web page generation and identifying unusual activity, such as unexpected script execution.", "Mitigation": "Mitigation strategies include updating the Safety Exit plugin to the latest version, disabling JavaScript execution, and implementing web application firewalls.", "Conclusion": "This vulnerability highlights the importance of proper input validation and sanitization to prevent attacks such as cross-site scripting."}, "executive_analysis": {"Overview": "The Safety Exit plugin vulnerability allows an attacker to inject malicious code, which can lead to various attacks", "Business Impact": "The vulnerability can lead to loss of sensitive information, reputation damage, and financial losses", "Technical Impact": "The vulnerability allows an attacker to execute unauthorized code, which can compromise the entire system", "Mitigation Strategies": "Implement web application firewalls, disable JavaScript execution, and update the Safety Exit plugin", "Recommendations": "Regularly update plugins, implement security monitoring, and conduct regular security audits", "Conclusions": "The vulnerability emphasizes the importance of proper security practices and timely updates to prevent attacks"}}