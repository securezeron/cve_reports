{"id": "CVE-2023-5809", "sourceIdentifier": "contact@wpscan.com", "published": "2023-12-04T22:15:07.920", "lastModified": "2023-12-07T19:51:24.290", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "The Popup box WordPress plugin before 3.8.6 does not sanitise and escape some of its settings, which could allow high privilege users such as admin to perform Stored Cross-Site Scripting attacks even when the unfiltered_html capability is disallowed (for example in multisite setup)"}, {"lang": "es", "value": "El complemento Popup box de WordPress anterior a 3.8.6 no sanitiza ni escapa a algunas de sus configuraciones, lo que podr\u00eda permitir a usuarios con privilegios elevados, como el administrador, realizar ataques de Cross-Site Scripting Almacenado incluso cuando la capacidad unfiltered_html no est\u00e1 permitida (por ejemplo, en una configuraci\u00f3n multisitio)."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ays-pro:popup_box:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "3.8.6", "matchCriteriaId": "A0C059BC-AF0A-4954-870A-36C6B62D5B04"}]}]}], "references": [{"url": "https://wpscan.com/vulnerability/f1eb05e8-1b7c-45b1-912d-f668bd68e265", "source": "contact@wpscan.com", "tags": ["Exploit", "Third Party Advisory"]}], "techniques": [{"techniqueID": "T1190", "comment": "CVE-2023-5809 - This Stored Cross-Site Scripting (XSS) vulnerability allows high-privilege users, such as administrators, to perform attacks even when the unfiltered_html capability is disallowed. The attacker can inject malicious code into the affected plugin, which can lead to unauthorized access or data theft. Defense strategies include input validation, sanitization, and escaping of user-input data, as well as restricting access to sensitive areas of the application."}, {"techniqueID": "T11", "comment": "CVE-2023-5809 - This vulnerability can be exploited by an attacker to Stored XSS, which can be used to capture sensitive data, steal authentication cookies, and inject malicious code. Defense strategies include implementing Content Security Policy (CSP), validating and sanitizing user-input data, and using a secure web application firewall (WAF)."}], "stix_bundle": {"objects": [{"id": " urn:joint-registry:course_of_action:example_com:123456", "type": "course-of-action", "name": "Validate and Sanitize User-Input Data", "description": "Validate and sanitize user-input data to prevent Stored Cross-Site Scripting (XSS) attacks", "created_by_ref": "urn:joint-registry:entity:example_com:123456", "labels": ["Mitigation", "XSS"]}, {"id": "urn:joint-registry:course_of_action:example_com:789012", "type": "course-of-action", "name": "Implement Content Security Policy (CSP)", "description": "Implement Content Security Policy (CSP) to prevent malicious scripts from being executed", "created_by_ref": "urn:joint-registry:entity:example_com:123456", "labels": ["Mitigation", "CSP"]}, {"id": "urn:joint-registry:indicator:example_com:345678", "type": "indicator", "name": "Suspicious User-Input Data", "description": "Monitor for suspicious user-input data that may indicate Stored XSS attacks", "created_by_ref": "urn:joint-registry:entity:example_com:123456", "labels": ["Detection", "XSS"]}], "relationship": {"objects": [{"id": "urn:joint-registry:relationship:example_com:123456", "type": "has-part", "source_id": "urn:joint-registry:course_of_action:example_com:123456", "target_id": "urn:joint-registry:indicator:example_com:345678", "relationship_type": "uses"}]}}, "technical_analysis": {"Introduction": "The Popup box WordPress plugin before 3.8.6 is vulnerable to Stored Cross-Site Scripting (XSS) attacks due to improper sanitization and escaping of user-input data.", "Impact and Scope": "The vulnerability affects high-privilege users, such as administrators, who can inject malicious code into the affected plugin, leading to unauthorized access or data theft.", "Related MITRE ATT&CK Techniques": "The vulnerability is related to Stored XSS, which is a common technique used by attackers to inject malicious code into web applications.", "Technical Details": "The vulnerability is caused by the failure to properly sanitize and escape user-input data, which allows attackers to inject malicious code into the affected plugin.", "Detection": "Detection of the vulnerability involves monitoring for suspicious user-input data and analyzing network traffic for signs of Stored XSS attacks.", "Mitigation": "Mitigation of the vulnerability involves implementing input validation, sanitization, and escaping of user-input data, as well as restricting access to sensitive areas of the application.", "Conclusion": "The vulnerability is a significant threat to the security of WordPress websites and should be addressed promptly to prevent Stored XSS attacks."}, "executive_analysis": {"Overview": "The Popup box WordPress plugin before 3.8.6 is vulnerable to Stored Cross-Site Scripting (XSS) attacks, which can lead to unauthorized access or data theft.", "Business Impact": "The vulnerability can cause significant business disruption and data theft, leading to financial losses and damage to reputation.", "Technical Impact": "The vulnerability compromises the security of the WordPress application, allowing attackers to inject malicious code and gain unauthorized access.", "Mitigation Strategies": "Implement input validation, sanitization, and escaping of user-input data, as well as restricting access to sensitive areas of the application.", "Recommendations": "Recommendations for executives include implementing additional security measures, such as a secure web application firewall (WAF), and providing regular security training to employees.", "Conclusions": "The vulnerability is a significant threat to the security of WordPress websites and should be addressed promptly to prevent Stored XSS attacks."}}