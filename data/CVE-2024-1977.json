{"id": "CVE-2024-1977", "sourceIdentifier": "security@wordfence.com", "published": "2024-02-29T06:15:46.917", "lastModified": "2024-02-29T13:49:29.390", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "The Restaurant Solutions \u2013 Checklist plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the Checklist points in version 1.0.0 due to insufficient input sanitization and output escaping. This makes it possible for authenticated attackers, with administrator-level access, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page. This only affects multi-site installations and installations where unfiltered_html has been disabled."}, {"lang": "es", "value": "El complemento Restaurant Solutions \u2013 Checklist para WordPress es vulnerable a Cross-Site Scripting Almacenado a trav\u00e9s de los puntos de la lista de verificaci\u00f3n en la versi\u00f3n 1.0.0 debido a una sanitizaci\u00f3n de entrada insuficiente y un escape de salida. Esto hace posible que atacantes autenticados, con acceso a nivel de administrador, inyecten scripts web arbitrarios en p\u00e1ginas que se ejecutar\u00e1n cada vez que un usuario acceda a una p\u00e1gina inyectada. Esto solo afecta a las instalaciones multisitio y a las instalaciones en las que se ha deshabilitado unfiltered_html."}], "metrics": {"cvssMetricV31": [{"source": "security@wordfence.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.3, "impactScore": 2.7}]}, "references": [{"url": "https://www.wizlynxgroup.com/security-research-advisories/vuln/WLX-2022-004", "source": "security@wordfence.com"}, {"url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/8dca7f2e-f572-468a-8342-a6e096441561?source=cve", "source": "security@wordfence.com"}], "techniques": [{"techniqueID": "T1499", "comment": "CVE-2024-1977 - The vulnerability allows authenticated attackers with administrator-level access to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page. This could be used as a stepping stone for further attacks."}, {"techniqueID": "T1133", "comment": "CVE-2024-1977 - The vulnerability allows attackers to inject malicious scripts into pages that will execute when a user accesses the page. This could be used to steal user data or redirect users to malicious sites."}, {"techniqueID": "T1034", "comment": "CVE-2024-1977 - The vulnerability allows attackers to inject malicious code into pages that will execute when a user accesses the page. This could be used to create a backdoor or a shell for further attacks."}], "stix_bundle": {"objects": [{"id": " Vulnerability-1", "type": "vulnerability", "created_by_ref": " https://example.com/ Organisation"}, {"id": "Technique-1", "type": "attack-pattern", "created_by_ref": "https://example.com/ Organisation", "data_model": "https://example.com/ data-model/attack-pattern", "name": "Cross-Site Scripting", "description": "Injection of malicious script into a web page", "x_openctiexternalid": "T1499"}, {"id": "Technique-2", "type": "attack-pattern", "created_by_ref": "https://example.com/ Organisation", "data_model": "https://example.com/ data-model/attack-pattern", "name": "Script Injection", "description": "Injection of malicious code into a web page", "x_openctiexternalid": "T1133"}, {"id": "Technique-3", "type": "attack-pattern", "created_by_ref": "https://example.com/ Organisation", "data_model": "https://example.com/ data-model/attack-pattern", "name": "Code Injection", "description": "Injection of malicious code into a web page", "x_openctiexternalid": "T1034"}, {"id": "Mitigation-1", "type": "course-of-action", "created_by_ref": "https://example.com/ Organisation", "data_model": "https://example.com/ data-model/course-of-action", "name": "Disable Unfiltered HTML", "description": "Disable unfiltered HTML to prevent script injection attacks"}, {"id": "Mitigation-2", "type": "course-of-action", "created_by_ref": "https://example.com/ Organisation", "data_model": "https://example.com/ data-model/course-of-action", "name": "Validate User-Generated Content", "description": "Validate user-generated content to prevent cross-site scripting attacks"}], "relationships": [{"id": "Relationship-1", "type": "has-part", "object_label": "Technique-1", "from": "Vulnerability-1", "to": "Technique-1", "kind": "vulnerability", "description": "This technique is related to this vulnerability"}, {"id": "Relationship-2", "type": "mitigates", "object_label": "Mitigation-1", "from": "Technique-1", "to": "Mitigation-1", "kind": "course-of-action", "description": "This mitigation strategy mitigates this technique"}, {"id": "Relationship-3", "type": "has-part", "object_label": "Technique-2", "from": "Vulnerability-1", "to": "Technique-2", "kind": "vulnerability", "description": "This technique is related to this vulnerability"}, {"id": "Relationship-4", "type": "mitigates", "object_label": "Mitigation-2", "from": "Technique-2", "to": "Mitigation-2", "kind": "course-of-action", "description": "This mitigation strategy mitigates this technique"}]}, "technical_analysis": {"Introduction": "The vulnerability allows authenticated attackers with administrator-level access to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.", "Impact and Scope": "The vulnerability has a CVSS score of 4.4, with a low confidentiality impact, low integrity impact, and no availability impact. The attack vector is network-based and has a high attack complexity.", "Related MITRE ATT&CK Techniques": "The vulnerability is related to Techniques T1499, T1133, and T1034, which are all related to cross-site scripting attacks.", "Technical Details": "The vulnerability is caused by insufficient input sanitization and output escaping, allowing attackers to inject malicious code into pages that will execute when a user accesses the page.", "Detection": "Detection of this vulnerability is possible using techniques such as web application scanning and vulnerability assessment tools.", "Mitigation": "Mitigation strategies include disabling unfiltered HTML, validating user-generated content, and implementing secure coding practices.", "Conclusion": "The vulnerability is a significant risk and requires immediate attention to address."}, "executive_analysis": {"Overview": "The vulnerability is a significant risk and requires immediate attention to address.", "Business Impact": "The vulnerability could allow attackers to inject malicious code into pages, which could have a significant business impact.", "Technical Impact": "The vulnerability has a low confidentiality impact, low integrity impact, and no availability impact, but it does have a high attack complexity.", "Mitigation Strategies": "Mitigation strategies include disabling unfiltered HTML, validating user-generated content, and implementing secure coding practices.", "Recommendations": "Executives should recommend that their organizations take immediate action to address this vulnerability.", "Conclusions": "The vulnerability is a significant risk and requires immediate attention to address."}}