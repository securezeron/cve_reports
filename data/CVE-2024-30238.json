{"id": "CVE-2024-30238", "sourceIdentifier": "audit@patchstack.com", "published": "2024-03-27T14:15:13.800", "lastModified": "2024-03-27T15:49:41.437", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') vulnerability in Contest Gallery.This issue affects Contest Gallery: from n/a through 21.3.2.\n\n"}, {"lang": "es", "value": "Neutralizaci\u00f3n inadecuada de elementos especiales utilizados en una vulnerabilidad de comando SQL (\"Inyecci\u00f3n SQL\") en Contest Gallery. Este problema afecta a Contest Gallery: desde n/a hasta 21.3.2."}], "metrics": {"cvssMetricV31": [{"source": "audit@patchstack.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 8.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.1, "impactScore": 4.7}]}, "weaknesses": [{"source": "audit@patchstack.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "references": [{"url": "https://patchstack.com/database/vulnerability/contest-gallery/wordpress-photos-and-files-contest-gallery-plugin-21-3-2-sql-injection-vulnerability?_s_id=cve", "source": "audit@patchstack.com"}], "techniques": [{"techniqueID": "T1068", "comment": "CVE-2024-30238 - SQL Injection vulnerability allows attackers to inject malicious SQL code, leading to unauthorized data access and execution of arbitrary code. Defense strategies include validating user input, using prepared statements, and implementing input validation."}, {"techniqueID": "T1190", "comment": "CVE-2024-30238 - SQL Injection vulnerability allows attackers to inject malicious SQL code, leading to unauthorized data access and execution of arbitrary code. Defense strategies include validating user input, using prepared statements, and implementing input validation."}, {"techniqueID": "T1487", "comment": "CVE-2024-30238 - SQL Injection vulnerability allows attackers to inject malicious SQL code, leading to unauthorized data access and execution of arbitrary code. Defense strategies include validating user input, using prepared statements, and implementing input validation."}, {"techniqueID": "T1568", "comment": "CVE-2024-30238 - SQL Injection vulnerability allows attackers to inject malicious SQL code, leading to unauthorized data access and execution of arbitrary code. Defense strategies include validating user input, using prepared statements, and implementing input validation."}], "stix_bundle": {"version": "2.1", "objects": [{"type": "vulnerability", "id": "CVE-2024-30238", "name": "SQL Injection Vulnerability in Contest Gallery Plugin", "description": "SQL Injection vulnerability in Contest Gallery Plugin allows attackers to inject malicious SQL code, leading to unauthorized data access and execution of arbitrary code.", "impact": "HIGH", "severities": ["HIGH"], "scopes": ["CHANGED"], "attack_vectors": ["NETWORK"], "exploitability_scores": {"CVSSv3.1": 8.5}, "references": ["CVE-2024-30238"]}, {"type": "technique", "id": "T1068", "name": "SQL Injection", "description": "Use SQL Injection to inject malicious SQL code and execute arbitrary commands."}, {"type": "technique", "id": "T1190", "name": "Exploit Public-Facing Application", "description": "Exploit a publicly-facing application or service to inject malicious SQL code and execute arbitrary commands."}, {"type": "technique", "id": "T1487", "name": "XML External Entity (XXE) Injection", "description": "Inject malicious XML data to inject malicious SQL code and execute arbitrary commands."}, {"type": "technique", "id": "T1568", "name": "Modify Registry", "description": "Modify registry keys or values to inject malicious SQL code and execute arbitrary commands."}, {"type": "course-of-action", "id": "COA-1", "name": "Implement Input Validation", "description": "Implement input validation to prevent malicious SQL code from being injected."}, {"type": "course-of-action", "id": "COA-2", "name": "Use Prepared Statements", "description": "Use prepared statements to prevent malicious SQL code from being injected."}], "relationships": [{"type": "RELATES_TO", "source_ref": "CVE-2024-30238", "target_ref": "T1068"}, {"type": "RELATES_TO", "source_ref": "CVE-2024-30238", "target_ref": "T1190"}, {"type": "RELATES_TO", "source_ref": "CVE-2024-30238", "target_ref": "T1487"}, {"type": "RELATES_TO", "source_ref": "CVE-2024-30238", "target_ref": "T1568"}, {"type": "MITIGATES", "source_ref": "COA-1", "target_ref": "T1068"}, {"type": "MITIGATES", "source_ref": "COA-2", "target_ref": "T1068"}]}, "technical_analysis": {"Introduction": "CVE-2024-30238 is a SQL Injection vulnerability in Contest Gallery Plugin that allows attackers to inject malicious SQL code, leading to unauthorized data access and execution of arbitrary code.", "Impact and Scope": "The impact of this vulnerability is HIGH, with a CVSSv3.1 score of 8.5. The attack vector is NETWORK, and the scope is CHANGED.", "Related MITRE ATT&CK Techniques": "The related MITRE ATT&CK techniques are T1068, T1190, T1487, and T1568.", "Technical Details": "The vulnerability occurs when user input is not properly sanitized, allowing attackers to inject malicious SQL code.", "Detection": "Detection of this vulnerability can be achieved using tools that detect SQL Injection attacks, such as web application firewalls and intrusion detection systems.", "Mitigation": "Mitigation strategies include implementing input validation, using prepared statements, and configuring the application to prevent SQL Injection attacks.", "Conclusion": "This vulnerability highlights the importance of proper input validation and the use of prepared statements to prevent SQL Injection attacks."}, "executive_analysis": {"Overview": "CVE-2024-30238 is a SQL Injection vulnerability in Contest Gallery Plugin that can lead to unauthorized data access and execution of arbitrary code.", "Business Impact": "The business impact of this vulnerability is significant, as it can compromise sensitive data and lead to financial losses.", "Technical Impact": "The technical impact of this vulnerability is HIGH, with a CVSSv3.1 score of 8.5.", "Mitigation Strategies": "Mitigation strategies include implementing input validation, using prepared statements, and configuring the application to prevent SQL Injection attacks.", "Recommendations": "Recommendations for executives include implementing a comprehensive security policy, conducting regular security audits, and providing training to developers on secure coding practices.", "Conclusions": "The consequences of this vulnerability are severe, and immediate action is required to mitigate its impact."}}