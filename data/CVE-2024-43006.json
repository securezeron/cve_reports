{"id": "CVE-2024-43006", "sourceIdentifier": "cve@mitre.org", "published": "2024-08-16T20:15:13.333", "lastModified": "2024-08-19T18:35:15.920", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "A stored cross-site scripting (XSS) vulnerability exists in ZZCMS2023 in the ask/show.php file at line 21. An attacker can exploit this vulnerability by sending a specially crafted POST request to /user/ask_edit.php?action=add, which includes malicious JavaScript code in the 'content' parameter. When a user visits the ask/show_{newsid}.html page, the injected script is executed in the context of the user's browser, leading to potential theft of cookies, session tokens, or other sensitive information."}, {"lang": "es", "value": "Existe una vulnerabilidad de Cross-Site Scripting (XSS) almacenado en ZZCMS2023 en el archivo Ask/show.php en la l\u00ednea 21. Un atacante puede explotar esta vulnerabilidad enviando una solicitud POST especialmente manipulada a /user/ask_edit.php?action=add. que incluye c\u00f3digo JavaScript malicioso en el par\u00e1metro 'contenido'. Cuando un usuario visita la p\u00e1gina Ask/show_{newsid}.html, el script inyectado se ejecuta en el contexto del navegador del usuario, lo que genera un posible robo de cookies, tokens de sesi\u00f3n u otra informaci\u00f3n confidencial."}], "metrics": {"cvssMetricV31": [{"source": "134c704f-9b21-4f2e-91b3-4a467353bcc0", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "134c704f-9b21-4f2e-91b3-4a467353bcc0", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "references": [{"url": "http://www.zzcms.net/about/download.html", "source": "cve@mitre.org"}, {"url": "https://github.com/gkdgkd123/codeAudit/blob/main/CVE-2024-43006%20ZZCMS2023%E5%82%A8%E5%AD%98%E5%9E%8BXSS.md", "source": "cve@mitre.org"}], "techniques": [{"techniqueID": "T1130", "comment": "Injection - CVE-2024-43006 - This vulnerability can be exploited through injection of malicious JavaScript code, which executes in the context of the user's browser, leading to potential theft of cookies, session tokens, or other sensitive information."}, {"techniqueID": "T1046", "comment": "Web Shell - CVE-2024-43006 - An attacker can exploit this vulnerability by sending a specially crafted POST request to /user/ask_edit.php?action=add, which includes malicious JavaScript code in the 'content' parameter, leading to execution of the injected script."}, {"techniqueID": "T1190", "comment": "Exploit Public-Facing Application - CVE-2024-43006 - This vulnerability can be exploited by sending a specially crafted POST request to the affected application's URL, which includes malicious JavaScript code, leading to execution of the injected script."}, {"techniqueID": "T1595", "comment": "Cross-Site Scripting (XSS) - CVE-2024-43006 - This vulnerability allows an attacker to inject malicious JavaScript code, which executes in the context of the user's browser, leading to potential theft of cookies, session tokens, or other sensitive information."}, {"techniqueID": "T1601", "comment": "Web Attack: Cross-Site Scripting - CVE-2024-43006 - This vulnerability can be exploited through the injection of malicious JavaScript code, which executes in the context of the user's browser, leading to potential theft of cookies, session tokens, or other sensitive information."}], "stix_bundle": {"objects": [{"type": "vulnerability", "id": "vuln-1", "name": "ZZCMS2023 Stored XSS Vulnerability", "description": "A stored cross-site scripting (XSS) vulnerability exists in ZZCMS2023 in the ask/show.php file at line 21.", "stix_meta": {"created_by_ref": "user-1", "created": "2024-08-16T20:15:13.333"}, "objects": [{"type": "attack-pattern", "id": "ap-1", "name": "Stored XSS in ZZCMS2023", "description": "Exploit the stored XSS vulnerability in ZZCMS2023 ask/show.php file at line 21.", "kill_chain_phases": [{"kill_chain_name": "mitre-attck", "kill_chain_version": "2.0", "phase_name": "Initial Access"}]}], "references": [{"type": "reference", "id": "ref-1", "href": "http://www.zzcms.net/about/download.html"}, {"type": "reference", "id": "ref-2", "href": "https://github.com/gkdgkd123/codeAudit/blob/main/CVE-2024-43006%20ZZCMS2023%E5%82%A8%E5%AD%98%E5%9E%8BXSS.md"}]}]}, "technical_analysis": {"Introduction": "CVE-2024-43006 is a stored cross-site scripting (XSS) vulnerability existing in ZZCMS2023 in the ask/show.php file at line 21.", "Impact and Scope": "The vulnerability can be exploited through the injection of malicious JavaScript code, which executes in the context of the user's browser, leading to potential theft of cookies, session tokens, or other sensitive information.", "Related MITRE ATT&CK Techniques": "T1130, T1046, T1190, T1595, and T1601", "Technical Details": "The vulnerability can be exploited by sending a specially crafted POST request to /user/ask_edit.php?action=add, which includes malicious JavaScript code in the 'content' parameter.", "Detection": "Detection methods include monitoring for suspicious JavaScript code execution, inspecting incoming POST requests, and analyzing application logs.", "Mitigation": "Mitigation strategies include applying security patches, implementing Content Security Policy (CSP), and validating user input.", "Conclusion": "CVE-2024-43006 is a serious vulnerability that can be exploited by an attacker to steal sensitive information."}, "executive_analysis": {"Overview": "A stored cross-site scripting (XSS) vulnerability exists in ZZCMS2023 in the ask/show.php file at line 21.", "Business Impact": "The vulnerability poses a significant risk to business operations, as it can be exploited to steal sensitive information.", "Technical Impact": "The vulnerability can be exploited by sending a specially crafted POST request, which executes malicious JavaScript code in the context of the user's browser.", "Mitigation Strategies": "Apply security patches, implement Content Security Policy (CSP), and validate user input.", "Recommendations": "Regularly update software, implement web application firewalls, and monitor application logs.", "Conclusions": "The vulnerability must be addressed promptly to prevent potential exploitation and protect business operations."}}