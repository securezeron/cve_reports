{"id": "CVE-2020-21176", "sourceIdentifier": "cve@mitre.org", "published": "2021-02-01T18:15:13.263", "lastModified": "2021-02-03T21:43:06.097", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "SQL injection vulnerability in the model.increment and model.decrement function in ThinkJS 3.2.10 allows remote attackers to execute arbitrary SQL commands via the step parameter."}, {"lang": "es", "value": "Una vulnerabilidad de inyecci\u00f3n SQL en las funciones model.increment y model.decrement en ThinkJS versi\u00f3n 3.2.10, permite a atacantes remotos ejecutar comandos SQL arbitrarios por medio del par\u00e1metro step"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:thinkjs:thinkjs:3.2.10:*:*:*:*:node.js:*:*", "matchCriteriaId": "B4D3F6A8-E6A0-4479-B5B1-84A4799A0A7F"}]}]}], "references": [{"url": "https://blog.jiguang.xyz/posts/thinkjs-sql-injection/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/thinkjs/thinkjs", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}], "techniques": [{"techniqueID": "T1027", "comment": "CVE-2020-21176 - ThinkJS SQL injection vulnerability is an example of a command and control technique where attackers can execute arbitrary SQL commands via the step parameter, making it a high-severity vulnerability that attackers can exploit to gain unauthorized access and elevate privileges."}, {"techniqueID": "T1059", "comment": "The SQL injection vulnerability in ThinkJS allows attackers to inject arbitrary queries, which is an example of a data manipulation technique, as attackers can potentially modify or delete data, making it a critical vulnerability that requires immediate attention."}, {"techniqueID": "T1190", "comment": "The ThinkJS SQL injection vulnerability can be used to pivot and move laterally within the network, making it an example of a lateral movement technique, as attackers can exploit this vulnerability to gain access to other systems and escalate privileges."}, {"techniqueID": "T1078", "comment": "The vulnerability in ThinkJS can be used to execute arbitrary commands, making it an example of a command execution technique, as attackers can execute system commands, potentially leading to system compromise and data loss."}, {"techniqueID": "T1204", "comment": "The ThinkJS SQL injection vulnerability can be used to move laterally within the network, making it an example of a remote services technique, as attackers can exploit this vulnerability to connect to other systems and escalate privileges."}], "technical_analysis": {"Introduction": "The ThinkJS SQL injection vulnerability (CVE-2020-21176) is a high-severity vulnerability that allows remote attackers to execute arbitrary SQL commands and can potentially lead to unauthorized access, data manipulation, and system compromise.", "Impact and Scope": "The impact of this vulnerability is significant, with a CVSS score of 9.8 under CVSS 3.1 and 7.5 under CVSS 2.0, indicating a critical vulnerability that requires immediate attention. The attack vector is network-based, making it a remote vulnerability.", "Related MITRE ATT&CK Techniques": "The vulnerability can be exploited using various MITRE ATT&CK techniques, including T1027, T1059, T1190, T1078, and T1204, making it a critical vulnerability that requires a multi-layered defense approach.", "Technical Details": "The vulnerability is caused by an insecure implementation of the model.increment and model.decrement functions in ThinkJS 3.2.10, allowing remote attackers to inject arbitrary SQL queries via the step parameter.", "Detection": "Detection of this vulnerability can be done using security information and event management (SIEM) systems, intrusion detection systems (IDS), and vulnerability scanning tools.", "Mitigation": "Mitigation strategies include patching and updating ThinkJS to the latest version, implementing input validation and sanitization, and disabling remote access to the vulnerable function.", "Conclusion": "The ThinkJS SQL injection vulnerability is a critical vulnerability that requires immediate attention and a multi-layered defense approach."}, "executive_analysis": {"Overview": "The ThinkJS SQL injection vulnerability is a high-severity vulnerability that can potentially lead to unauthorized access, data manipulation, and system compromise.", "Business Impact": "The impact of this vulnerability on business operations is significant, as it can potentially lead to data loss, system downtime, and reputational damage.", "Technical Impact": "The vulnerability has a critical technical impact, as it allows remote attackers to execute arbitrary SQL commands, potentially leading to system compromise and data loss.", "Mitigation Strategies": "Mitigation strategies include patching and updating ThinkJS to the latest version, implementing input validation and sanitization, and disabling remote access to the vulnerable function.", "Recommendations": "Recommendations for executives include prioritizing patching and updates, implementing a multi-layered defense approach, and conducting regular vulnerability assessments and penetration testing.", "Conclusions": "The ThinkJS SQL injection vulnerability is a critical vulnerability that requires immediate attention and a multi-layered defense approach to prevent unauthorized access, data manipulation, and system compromise."}}