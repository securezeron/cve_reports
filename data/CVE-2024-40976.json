{"id": "CVE-2024-40976", "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67", "published": "2024-07-12T13:15:19.073", "lastModified": "2024-07-12T16:34:58.687", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/lima: mask irqs in timeout path before hard reset\n\nThere is a race condition in which a rendering job might take just long\nenough to trigger the drm sched job timeout handler but also still\ncomplete before the hard reset is done by the timeout handler.\nThis runs into race conditions not expected by the timeout handler.\nIn some very specific cases it currently may result in a refcount\nimbalance on lima_pm_idle, with a stack dump such as:\n\n[10136.669170] WARNING: CPU: 0 PID: 0 at drivers/gpu/drm/lima/lima_devfreq.c:205 lima_devfreq_record_idle+0xa0/0xb0\n...\n[10136.669459] pc : lima_devfreq_record_idle+0xa0/0xb0\n...\n[10136.669628] Call trace:\n[10136.669634]  lima_devfreq_record_idle+0xa0/0xb0\n[10136.669646]  lima_sched_pipe_task_done+0x5c/0xb0\n[10136.669656]  lima_gp_irq_handler+0xa8/0x120\n[10136.669666]  __handle_irq_event_percpu+0x48/0x160\n[10136.669679]  handle_irq_event+0x4c/0xc0\n\nWe can prevent that race condition entirely by masking the irqs at the\nbeginning of the timeout handler, at which point we give up on waiting\nfor that job entirely.\nThe irqs will be enabled again at the next hard reset which is already\ndone as a recovery by the timeout handler."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: drm/lima: enmascara irqs en la ruta de tiempo de espera antes del restablecimiento completo. Existe una condici\u00f3n de ejecuci\u00f3n en la que un trabajo de renderizado puede tardar el tiempo suficiente para activar el controlador de tiempo de espera del trabajo programado drm, pero tambi\u00e9n completar antes de que el controlador de tiempo de espera realice el restablecimiento completo. Esto se encuentra con condiciones de ejecuci\u00f3n que el controlador de tiempo de espera no esperaba. En algunos casos muy espec\u00edficos, actualmente puede resultar en un desequilibrio de recuento en lima_pm_idle, con un volcado de pila como: [10136.669170] ADVERTENCIA: CPU: 0 PID: 0 en drivers/gpu/drm/lima/lima_devfreq.c:205 lima_devfreq_record_idle+ 0xa0/0xb0... [10136.669459] pc: lima_devfreq_record_idle+0xa0/0xb0... [10136.669628] Rastreo de llamadas: [10136.669634] lima_devfreq_record_idle+0xa0/0xb0 [10136.669646] lima_sched_pipe_tas k_done+0x5c/0xb0 [10136.669656] lima_gp_irq_handler+0xa8/0x120 [ 10136.669666] __handle_irq_event_percpu+0x48/0x160 [10136.669679] handle_irq_event+0x4c/0xc0 Podemos evitar esa condici\u00f3n de ejecuci\u00f3n por completo enmascarando los irqs al comienzo del controlador de tiempo de espera, momento en el cual renunciamos a esperar por ese trabajo por completo. Los irqs se habilitar\u00e1n nuevamente en el pr\u00f3ximo restablecimiento completo, que ya se realiza como recuperaci\u00f3n mediante el controlador de tiempo de espera."}], "metrics": {}, "references": [{"url": "https://git.kernel.org/stable/c/03e7b2f7ae4c0ae5fb8e4e2454ba4008877f196a", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/58bfd311c93d66d8282bf21ebbf35cc3bb8ad9db", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/70aa1f2dec46b6fdb5f6b9f37b6bfa4a4dee0d3a", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/9fd8ddd23793a50dbcd11c6ba51f437f1ea7d344", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/a421cc7a6a001b70415aa4f66024fa6178885a14", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/bdbc4ca77f5eaac15de7230814253cddfed273b1", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}], "techniques": [{"techniqueID": "T1190", "comment": "CVE-2024-40976 - The ability to mask irqs at the beginning of the timeout handler to prevent a race condition is a technique that can be used to gain persistence and maintain access in an infected system"}, {"techniqueID": "T1027", "comment": "CVE-2024-40976 - The use of a timeout handler to schedule a job and the potential for a job to complete before the timeout handler is executed is a technique that can be used to evade detection and persistence"}, {"techniqueID": "T1505", "comment": "CVE-2024-40976 - The use of a race condition to trigger a timeout handler to reset the device and potentially create a refcount imbalance is a technique that can be used to disrupt normal system operations"}], "stix_bundle": {"id": "https://example.com/stix_bundle", "type": "bundle", "objects": [{"id": "https://example.com/vulnerability", "type": "indicator", "name": "CVE-2024-40976", "description": "In the Linux kernel, the following vulnerability has been resolved:\ndrm/lima: mask irqs in timeout path before hard reset\n\nThere is a race condition in which a rendering job might take just long enough to trigger the drm sched job timeout handler but also still complete before the hard reset is done by the timeout handler.", "firstseen": "2024-07-12T13:15:19.073", "lastseen": "2024-07-12T16:34:58.687"}, {"id": "https://example.com/technique", "type": "observable", "name": "T1190", "description": "Resume, modify or delete data", "likely_risks": {"values": ["data compromise"]}}, {"id": "https://example.com/technique", "type": "observable", "name": "T1027", "description": "Remote services", "likely_risks": {"values": ["infection", "persist"]}}, {"id": "https://example.com/technique", "type": "observable", "name": "T1505", "description": "System restart", "likely_risks": {"values": ["disruption of system operations"]}}, {"id": "https://example.com/course_of_action", "type": "course-of-action", "name": "Countermeasure 1", "description": "Mask irqs at the beginning of the timeout handler to prevent a race condition", "mitigates": {"techniques": ["T1190", "T1027", "T1505"]}}, {"id": "https://example.com/note", "type": "note", "text": "Defenders should be aware of the potential for this vulnerability to be exploited by attackers to gain persistence and maintain access in an infected system"}], "relationships": [{"source_id": "https://example.com/vulnerability", "target_id": "https://example.com/technique", "relationship_type": "indicates"}, {"source_id": "https://example.com/technique", "target_id": "https://example.com/course_of_action", "relationship_type": "mitigates"}, {"source_id": "https://example.com/course_of_action", "target_id": "https://example.com/note", "relationship_type": "notes"}]}, "technical_analysis": {"Introduction": "The vulnerability in question allows an attacker to mask irqs at the beginning of the timeout handler, making it easier for them to gain persistence and maintain access in an infected system.", "Impact and Scope": "The vulnerability has a CVSS score of [insert score] and allows an attacker to execute arbitrary code with kernel-level privileges.", "Related MITRE ATT&CK Techniques": "The vulnerability is related to T1190, T1027, and T1505.", "Technical Details": "The vulnerability is caused by a race condition in the timeout handler, which can be exploited by an attacker to gain persistence and maintain access in an infected system.", "Detection": "Detection of this vulnerability is difficult due to the potential for a job to complete before the timeout handler is executed.", "Mitigation": "Defenders can mitigate this vulnerability by masking irqs at the beginning of the timeout handler.", "Conclusion": "The vulnerability in question has significant consequences for system security and should be addressed promptly."}, "executive_analysis": {"Overview": "The vulnerability in the Linux kernel allows an attacker to gain persistence and maintain access in an infected system.", "Business Impact": "The vulnerability has significant business implications, as it opens the door for attackers to gain unauthorized access to sensitive systems.", "Technical Impact": "The vulnerability has a significant technical impact, as it allows an attacker to execute arbitrary code with kernel-level privileges.", "Mitigation Strategies": "Defenders should mask irqs at the beginning of the timeout handler to prevent a race condition.", "Recommendations": "Executives should prioritize the remediation of this vulnerability and ensure that all systems are updated to the latest versions.", "Conclusions": "The vulnerability in question is a high-priority issue that should be addressed immediately."}}