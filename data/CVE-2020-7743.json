{"id": "CVE-2020-7743", "sourceIdentifier": "report@snyk.io", "published": "2020-10-13T10:15:13.440", "lastModified": "2022-06-28T14:11:45.273", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "The package mathjs before 7.5.1 are vulnerable to Prototype Pollution via the deepExtend function that runs upon configuration updates."}, {"lang": "es", "value": "Las versiones anteriores a 7.5.1 del paquete mathjs, son vulnerables a una Contaminaci\u00f3n de Prototipo por medio de la funci\u00f3n deepExtend que se ejecuta con las actualizaciones de configuraci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "report@snyk.io", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mathjs:mathjs:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "7.5.1", "matchCriteriaId": "3A8FB1D1-BF2D-45EE-8ED1-10A79935D815"}]}]}], "references": [{"url": "https://github.com/josdejong/mathjs/blob/develop/src/utils/object.js%23L82", "source": "report@snyk.io", "tags": ["Broken Link", "Third Party Advisory"]}, {"url": "https://github.com/josdejong/mathjs/commit/ecb80514e80bce4e6ec7e71db8ff79954f07c57e", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARS-1017113", "source": "report@snyk.io", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-1017112", "source": "report@snyk.io", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1017111", "source": "report@snyk.io", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-MATHJS-1016401", "source": "report@snyk.io", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}], "techniques": [{"techniqueID": "T1190", "comment": "CVE-2020-7743 - This vulnerability allows an attacker to inject arbitrary object prototypes, leading to potential data exposure. The deepExtend function in mathjs is being used to manipulate the object prototype chain, which could be abused for code execution attacks."}, {"techniqueID": "T1191", "comment": "CVE-2020-7743 - The prototype pollution vulnerability in mathjs allows an attacker to inject arbitrary object prototypes, leading to potential data exposure. Defenders can use techniques like detecting anomalous data access patterns to identify potential exploitation attempts."}, {"techniqueID": "T1192", "comment": "CVE-2020-7743 - The deepExtend function in mathjs can be used to manipulate the object prototype chain, which could be abused for code execution attacks. Defenders can use techniques like monitoring network traffic and system calls to detect suspicious activity."}, {"techniqueID": "T1003", "comment": "CVE-2020-7743 - The attack vector for this vulnerability is likely network-based, given the CVSS score and attack complexity. Defenders can use techniques like network traffic analysis and intrusion detection to identify potential exploitation attempts."}], "stix_bundle": "https://example.com/STIX2.1_bundle.json", "technical_analysis": {"Introduction": "The Math.js library before version 7.5.1 is vulnerable to prototype pollution, which can lead to data exposure and potential code execution attacks.", "Impact and Scope": "The vulnerability has a CVSS score of 7.3, with an attack vector of network-based and a cvssData: {\"version\": \"3.1\", \"vectorString\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L\"}.", "Related MITRE ATT&CK Techniques": "T1190, T1191, T1192, T1003", "Technical Details": "The vulnerability occurs due to the deepExtend function in math.js, which can be used to manipulate the object prototype chain.", "Detection": "Detection can be done by monitoring network traffic and system calls for suspicious activity.", "Mitigation": "Mitigation can be done by updating math.js to version 7.5.1 or later and applying other countermeasures like detection and monitoring.", "Conclusion": "In conclusion, the prototype pollution vulnerability in math.js has significant implications for data exposure and potential code execution attacks."}, "executive_analysis": {"Overview": "The Math.js library before version 7.5.1 has a vulnerability that allows attackers to inject arbitrary object prototypes, leading to potential data exposure and code execution attacks.", "Business Impact": "This vulnerability can have significant business implications, such as data breaches and financial losses.", "Technical Impact": "This vulnerability has significant technical implications, such as potential code execution attacks and data exposure.", "Mitigation Strategies": "Updating math.js to version 7.5.1 or later and applying other countermeasures like detection and monitoring.", "Recommendations": "Executives should prioritize updating math.js and implementing detection and monitoring countermeasures to mitigate this vulnerability.", "Conclusions": "In conclusion, the prototype pollution vulnerability in math.js requires immediate attention from executives and developers to ensure data security and business continuity."}}