{"id": "CVE-2024-2714", "sourceIdentifier": "cna@vuldb.com", "published": "2024-03-20T20:15:09.303", "lastModified": "2024-05-17T02:38:26.850", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "A vulnerability has been found in Campcodes Complete Online DJ Booking System 1.0 and classified as critical. Affected by this vulnerability is an unknown functionality of the file /admin/booking-bwdates-reports-details.php. The manipulation of the argument fromdate leads to sql injection. The attack can be launched remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-257467."}, {"lang": "es", "value": "Una vulnerabilidad ha sido encontrada en Campcodes Complete Online DJ Booking System 1.0 y clasificada como cr\u00edtica. Una funci\u00f3n desconocida del archivo /admin/booking-bwdates-reports-details.php es afectada por esta vulnerabilidad. La manipulaci\u00f3n del argumento fromdate conduce a la inyecci\u00f3n de SQL. El ataque se puede lanzar de forma remota. El exploit ha sido divulgado al p\u00fablico y puede utilizarse. El identificador asociado de esta vulnerabilidad es VDB-257467."}], "metrics": {"cvssMetricV31": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "references": [{"url": "https://github.com/E1CHO/cve_hub/blob/main/Complete%20Online%20DJ%20Booking%20System/Complete%20Online%20DJ%20Booking%20System%20-%20vuln%203.pdf", "source": "cna@vuldb.com"}, {"url": "https://vuldb.com/?ctiid.257467", "source": "cna@vuldb.com"}, {"url": "https://vuldb.com/?id.257467", "source": "cna@vuldb.com"}], "techniques": [{"techniqueID": "TA0001", "comment": "Initial Access - LDAP Injection via Unvalidated User Input - This technique is relevant because it demonstrates how the vulnerability could be exploited for an initial access attack. To defend against this, ensure that user input is properly validated and sanitized."}, {"techniqueID": "TA0003", "comment": "Initial Access - File Inclusion via Unvalidated User Input - Similar to the previous comment, this technique is relevant because it showcases how the vulnerability could be used to include malicious files. To defend against this, implement input validation and file inclusion filtering."}, {"techniqueID": "TA0042", "comment": "Credential Access - SQL Injection - This technique is relevant because it highlights how the SQL injection vulnerability could be exploited to access sensitive information. To defend against this, ensure proper input validation, whitelist trusted SQL queries, and implement a WAF."}, {"techniqueID": "TA0043", "comment": "Data Tampering - SQL Injection - This technique is relevant because it demonstrates how the SQL injection vulnerability could be used to modify or manipulate data. To defend against this, implement input validation, use parameterized queries, and monitor database logs for suspicious activity."}, {"techniqueID": "TA0044", "comment": "Account Manipulation - SQL Injection - This technique is relevant because it highlights how the SQL injection vulnerability could be exploited to manipulate user accounts. To defend against this, implement input validation, use password hashing and salting, and monitor account activity for suspicious changes."}, {"techniqueID": "TA0053", "comment": "Exploitation of Public-Facing Applications - SQL Injection - This technique is relevant because it demonstrates how the vulnerability could be exploited in a public-facing application. To defend against this, implement input validation, subnet masking, and regularly update software and plugins."}, {"techniqueID": "TA0112", "comment": "Post-Exploitation - Data from Memory - This technique is relevant because it highlights how the vulnerability could be used to access sensitive information stored in memory. To defend against this, implement memory protection mechanisms, use memory-safe languages, and monitor system memory for suspicious activity."}, {"techniqueID": "TA0137", "comment": "Defense Evasion - Indirect Command Execution - This technique is relevant because it demonstrates how the SQL injection vulnerability could be used to bypass command execution restrictions. To defend against this, implement command filtering, use sandboxing, and monitor system calls for suspicious activity."}, {"techniqueID": "TA0140", "comment": "Persistence - Log File Delete or Modification - This technique is relevant because it highlights how the vulnerability could be used to delete or modify log files, hiding malicious activity. To defend against this, implement log file auditing, use log aggregation, and regularly back up logs."}, {"techniqueID": "TA0143", "comment": "Privileged Account Access - SQL Injection - This technique is relevant because it demonstrates how the SQL injection vulnerability could be used to access sensitive information in privileged accounts. To defend against this, implement input validation, use role-based access control, and monitor account activity for suspicious changes."}], "stix_bundle": {"Bundle": {"@type": "stix:Bundle", "@id": "", "name": "Campcodes Complete Online DJ Booking System 1.0 Vulnerability", "description": "A STIX 2.1 bundle expressing the vulnerability, techniques, and defense strategies for CVE-2024-2714"}, "Package": {"@type": "stix:Package", "@id": "package", "name": "Campcodes Complete Online DJ Booking System 1.0 Vulnerability", "description": "A package containing the vulnerability, threat actors, and defense strategies"}, "Vulnerability": {"@type": "stix:Vulnerability", "@id": "vulnerability", "name": "Campcodes Complete Online DJ Booking System 1.0 Vulnerability", "description": "A CVE-2024-2714 vulnerability in the Campcodes Complete Online DJ Booking System 1.0 software."}, "ThreatActor": {"@type": "stix:ThreatActor", "@id": "threat_actor", "name": "Unknown", "description": "A generic threat actor that may utilize this vulnerability"}, "CourseOfAction": {"@type": "stix:CourseOfAction", "@id": "course_of_action", "name": "Remediate the vulnerability", "description": "Remediate the vulnerability by updating the software and implementing input validation and sanitization"}, "Note": {"@type": "stixv2:Note", "@id": "note", "label": "Vulnerability Description", "name": "Campcodes Complete Online DJ Booking System 1.0 Vulnerability", "description": "A SQL injection vulnerability in the /admin/booking-bwdates-reports-details.php file."}}, "technical_analysis": {"Introduction": "The Campcodes Complete Online DJ Booking System 1.0 software contains a SQL injection vulnerability that can be exploited by an attacker to access sensitive information and potentially gain control of the system.", "Impact and Scope": "The vulnerability has a CVSS score of 6.3 and is classified as a Medium severity vulnerability.", "Related MITRE ATT&CK Techniques": "Several MITRE ATT&CK techniques are relevant to this vulnerability, including Initial Access, Credential Access, Data Tampering, and Persistence.", "Technical Details": "The vulnerability is located in the /admin/booking-bwdates-reports-details.php file and can be exploited by inserting malicious SQL code into the fromdate argument.", "Detection": " Detection of this vulnerability can be achieved through the use of web application firewalls and intrusion detection systems.", "Mitigation": "Mitigation strategies include updating the software to a patched version, implementing input validation and sanitization, and using parameterized queries.", "Conclusion": "In conclusion, the Campcodes Complete Online DJ Booking System 1.0 vulnerability is a serious security threat that requires prompt remediation."}, "executive_analysis": {"Overview": "The Campcodes Complete Online DJ Booking System 1.0 software contains a SQL injection vulnerability that can be exploited by an attacker to access sensitive information and potentially gain control of the system.", "Business Impact": "The vulnerability can result in significant financial losses and reputational damage if exploited by an attacker.", "Technical Impact": "The vulnerability can allow an attacker to access sensitive information, modify or delete data, and potentially gain control of the system.", "Mitigation Strategies": "Immediate mitigation strategies include patching the software and implementing input validation and sanitization.", "Recommendations": "Recommendations for executives include prioritizing the remediation of the vulnerability, implementing additional security controls, and conducting regular vulnerability assessments.", "Conclusions": "In conclusion, the Campcodes Complete Online DJ Booking System 1.0 vulnerability is a serious security threat that requires prompt remediation and prioritization."}}