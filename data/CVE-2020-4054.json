{"id": "CVE-2020-4054", "sourceIdentifier": "security-advisories@github.com", "published": "2020-06-16T22:15:10.693", "lastModified": "2020-09-28T20:15:13.373", "vulnStatus": "Modified", "cveTags": [], "descriptions": [{"lang": "en", "value": "In Sanitize (RubyGem sanitize) greater than or equal to 3.0.0 and less than 5.2.1, there is a cross-site scripting vulnerability. When HTML is sanitized using Sanitize's \"relaxed\" config, or a custom config that allows certain elements, some content in a math or svg element may not be sanitized correctly even if math and svg are not in the allowlist. You are likely to be vulnerable to this issue if you use Sanitize's relaxed config or a custom config that allows one or more of the following HTML elements: iframe, math, noembed, noframes, noscript, plaintext, script, style, svg, xmp. Using carefully crafted input, an attacker may be able to sneak arbitrary HTML through Sanitize, potentially resulting in XSS (cross-site scripting) or other undesired behavior when that HTML is rendered in a browser. This has been fixed in 5.2.1."}, {"lang": "es", "value": "En Sanitize (RubyGem sanitize) versiones mayor o igual a 3.0.0 y menor a 5.2.1, se presenta una vulnerabilidad de tipo cross-site scripting. Cuando se sanea HTML usando la configuraci\u00f3n \"relaxed\" de Sanitize, o una configuraci\u00f3n personalizada que permite determinados elementos, alg\u00fan contenido en un elemento math o svg puede no ser saneado correctamente incluso si math y svg no est\u00e1n en la lista de permitidos. Es probable que sea vulnerable a este problema si usa la configuraci\u00f3n relaxed de Sanitize o una configuraci\u00f3n personalizada que permite uno o m\u00e1s de los siguientes elementos HTML: iframe, math, noembed, noframes, noscript, plaintext, script, style, svg, xmp. Usando entradas cuidadosamente dise\u00f1ada, un atacante puede infiltrar HTML arbitrario por medio de Sanitize, resultando potencialmente en un ataque de tipo XSS (cross-site scripting) u otro comportamiento no deseado cuando ese HTML es renderizado en un navegador. Esto se ha corregido en la versi\u00f3n 5.2.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sanitize_project:sanitize:*:*:*:*:*:ruby:*:*", "versionStartIncluding": "3.0.0", "versionEndExcluding": "5.2.1", "matchCriteriaId": "74D82176-DC06-4206-8B6A-EFD1D3D54694"}]}]}], "references": [{"url": "https://github.com/rgrove/sanitize/commit/a11498de9e283cd457b35ee252983662f7452aa9", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/rgrove/sanitize/releases/tag/v5.2.1", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/rgrove/sanitize/security/advisories/GHSA-p4x4-rw2p-8j8m", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4543-1/", "source": "security-advisories@github.com"}, {"url": "https://www.debian.org/security/2020/dsa-4730", "source": "security-advisories@github.com"}], "techniques": [{"techniqueID": "T1190", "comment": "The use of Sanitize in relaxed or custom config allows an attacker to inject malicious HTML tags. This can lead to Cross-Site Scripting (XSS) attacks. Defend against this by validating all user-inputted HTML."}, {"techniqueID": "T1505", "comment": "The use of Sanitize in relaxed or custom config can allow certain HTML elements to be inserted. This can lead to unintended interactions with the application's functionality. Defend against this by thoroughly validating all user-inputted HTML."}, {"techniqueID": "T1045", "comment": "An attacker can use the xmp element to inject malicious HTML. Defend against this by validating all user-inputted HTML, especially the xmp element."}, {"techniqueID": "T1112", "comment": "An attacker can use the style element to inject malicious CSS. Defend against this by validating all user-inputted HTML, especially the style element."}], "stix_bundle": {"@type": "indicator", "name": "Sanitize Cross-Site Scripting Vulnerability", "description": "Vulnerability in Sanitize allowing for Cross-Site Scripting (XSS) attacks", "intrusion_set_idref": "", "created_by_ref": "", "modified": "2020-09-28T20:15:13.373Z", "created": "2020-06-16T22:15:10.693Z", "modified_by_ref": "", "type": "vulnerability", "labels": ["Sanitize", "Cross-Site Scripting", "XSS"], "objects": [{"@type": "vulnerability", "description": "Vulnerability in Sanitize allowing for Cross-Site Scripting (XSS) attacks", "severity": "HIGH", "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L"}, {"@type": "intrusion_set", "name": "Sanitize Cross-Site Scripting Intrusion Set", "description": "Intrusion Set related to Sanitize Cross-Site Scripting Vulnerability"}, {"@type": "course_of_action", "description": "Use a secure configuration for Sanitize", "relates_to": "vulnerability"}, {"@type": "course_of_action", "description": "Thoroughly validate all user-inputted HTML", "relates_to": "vulnerability"}]}, "technical_analysis": {"Introduction": "The Sanitize Cross-Site Scripting vulnerability allows attackers to inject malicious HTML tags into a web application. This was discovered in Sanitize versions 3.0.0 through 5.2.1.", "Impact and Scope": "The vulnerability allows attackers to inject malicious HTML tags, which can lead to Cross-Site Scripting (XSS) attacks. The CVSS score for this vulnerability is 7.3.", "Related MITRE ATT&CK Techniques": "T1190: Exploit Open Redirect, T1505: Code Injection, T1045: Network Sniffing, and T1112: Upload and Execute Arbitrary Code.", "Technical Details": "The vulnerability occurs when Sanitize is used in relaxed or custom config. This allows certain HTML elements to be inserted into the web application. By injecting malicious HTML tags, an attacker can steal user data, hijack user sessions, or take over the web application.", "Detection": "Detection for this vulnerability involves monitoring for malicious HTML tags being inserted into the web application. This can be done using web application firewalls or intrusion detection systems.", "Mitigation": "Mitigation for this vulnerability involves using a secure configuration for Sanitize and thoroughly validating all user-inputted HTML. This can be done by using HTML sanitization libraries that have been tested for security vulnerabilities.", "Conclusion": "The Sanitize Cross-Site Scripting vulnerability is a high-priority vulnerability that should be addressed as soon as possible. By using a secure configuration for Sanitize and thoroughly validating all user-inputted HTML, web applications can protect themselves against this vulnerability."}, "executive_analysis": {"Overview": "The Sanitize Cross-Site Scripting vulnerability is a critical vulnerability that can be exploited to inject malicious HTML tags into a web application.", "Business Impact": "The business impact of this vulnerability is the potential for sensitive data to be stolen or customer accounts to be hijacked.", "Technical Impact": "The technical impact of this vulnerability is the potential for web applications to be compromised and the potential for data breaches.", "Mitigation Strategies": "Mitigation strategies include using a secure configuration for Sanitize, thoroughly validating all user-inputted HTML, and monitoring for malicious HTML tags being inserted into the web application.", "Recommendations": "Recommendations for executives include classifying this vulnerability as high-priority and implementing mitigation strategies as soon as possible.", "Conclusions": "The Sanitize Cross-Site Scripting vulnerability is a critical vulnerability that requires immediate attention. By implementing mitigation strategies, web applications can protect themselves against this vulnerability."}}