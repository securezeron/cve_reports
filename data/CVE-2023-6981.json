{"id": "CVE-2023-6981", "sourceIdentifier": "security@wordfence.com", "published": "2024-01-03T06:15:47.663", "lastModified": "2024-01-09T18:55:41.547", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "The WP SMS \u2013 Messaging & SMS Notification for WordPress, WooCommerce, GravityForms, etc plugin for WordPress is vulnerable to SQL Injection via the 'group_id' parameter in all versions up to, and including, 6.5 due to insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query.  This makes it possible for authenticated attackers, with contributor-level access and above, to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database. This can leveraged to achieve Reflected Cross-site Scripting."}, {"lang": "es", "value": "WP SMS \u2013 Messaging &amp; SMS Notification for WordPress, WooCommerce, GravityForms, etc plugin for WordPress es vulnerable a la inyecci\u00f3n SQL a trav\u00e9s del par\u00e1metro 'group_id' en todas las versiones hasta la 6.5 inclusive debido a un escape insuficiente en el par\u00e1metro proporcionado por el usuario y falta de preparaci\u00f3n suficiente en la consulta SQL existente. Esto hace posible que los atacantes autenticados, con acceso de nivel de colaborador y superior, agreguen consultas SQL adicionales a consultas ya existentes que pueden usarse para extraer informaci\u00f3n confidencial de la base de datos. Esto se puede aprovechar para lograr cross site scripting reflejado."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}, {"source": "security@wordfence.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:veronalabs:wp_sms:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "6.5.1", "matchCriteriaId": "8FA38489-0282-4D9A-8AFF-1048C1FEE5FA"}]}]}], "references": [{"url": "https://github.com/wp-sms/wp-sms/commit/6656de201efe67c7983102c344a546eed976a819", "source": "security@wordfence.com", "tags": ["Patch"]}, {"url": "https://plugins.trac.wordpress.org/changeset?sfp_email=&sfph_mail=&reponame=&old=3015006%40wp-sms&new=3015006%40wp-sms&sfp_email=&sfph_mail=", "source": "security@wordfence.com", "tags": ["Patch"]}, {"url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/b8f53053-5150-4fba-b8d6-3d6c9df32c69?source=cve", "source": "security@wordfence.com", "tags": ["Patch", "Third Party Advisory"]}], "techniques": [{"techniqueID": "T1059.001", "comment": "CVE-2023-6981 - Insufficient input validation and lack of prepared SQL queries can lead to SQL injection attacks, which can be used to extract sensitive information or modify data. Defense strategies include verifying user inputs and using prepared statements in SQL queries."}, {"techniqueID": "T1190", "comment": "CVE-2023-6981 - The vulnerability can be used to achieve Reflected Cross-site Scripting attacks, which can be used by attackers to steal user credentials or manipulate user actions. Defense strategies include validating user input and using Content Security Policy to prevent XSS attacks."}, {"techniqueID": "T1088", "comment": "CVE-2023-6981 - The SQL injection vulnerability can be used to read sensitive data or modify data in the database. Defense strategies include limiting database access and monitoring database queries."}], "stix_bundle": {"objects": [{"id": "vulnerability--5f41a60a-62be-4e6e-8ca4-fbb45f9f6d2d", "type": "vulnerability", "name": "WP SMS \u2013 Messaging & SMS Notification for WordPress", "description": "A vulnerability in the WP SMS plugin for WordPress allows authenticated attackers to inject SQL code, leading to data extraction or modification. The vulnerability affects all versions up to and including 6.5.", "cvssV3": {"vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N", "baseScore": 4.9}}, {"id": "attackpattern--f324e83b-d6f7-46f5-b3f5-131ce7be33f9", "type": "attack-pattern", "name": "SQL Injection using Unvalidated User Input", "description": "An attacker injects SQL code into a vulnerable application, exploiting insufficient input validation and lack of prepared SQL queries. This can lead to data extraction or modification."}, {"id": "malware--93f4e1e3-fa11-48a1-aa2a-42dd31f0ebd1", "type": "malware", "name": "Reflected Cross-Site Scripting", "description": "A malicious script is injected into a vulnerable web application, exploiting insufficient input validation and lack of Content Security Policy. This can lead to stealing user credentials or manipulating user actions."}, {"id": "course-of-action--e03b8e1c-d6c1-4bb5-9830-43d7c46423e2", "type": "course-of-action", "name": "Verify User Inputs", "description": "Verify user inputs and use prepared statements in SQL queries to prevent SQL injection attacks."}, {"id": "course-of-action--53a3c9d9-1a52-45c5-add5-e4af4566ef63", "type": "course-of-action", "name": "Implement Content Security Policy", "description": "Implement Content Security Policy to prevent Reflected Cross-Site Scripting attacks."}], "relationships": [{"source_id": "vulnerability--5f41a60a-62be-4e6e-8ca4-fbb45f9f6d2d", "target_id": "attackpattern--f324e83b-d6f7-46f5-b3f5-131ce7be33f9", "relationship_type": "related_to"}, {"source_id": "attackpattern--f324e83b-d6f7-46f5-b3f5-131ce7be33f9", "target_id": "malware--93f4e1e3-fa11-48a1-aa2a-42dd31f0ebd1", "relationship_type": "indicates_tactics"}, {"source_id": "attackpattern--f324e83b-d6f7-46f5-b3f5-131ce7be33f9", "target_id": "course-of-action--e03b8e1c-d6c1-4bb5-9830-43d7c46423e2", "relationship_type": "uses_prevention"}, {"source_id": "malware--93f4e1e3-fa11-48a1-aa2a-42dd31f0ebd1", "target_id": "course-of-action--53a3c9d9-1a52-45c5-add5-e4af4566ef63", "relationship_type": "uses_prevention"}]}, "technical_analysis": {"Introduction": "CVE-2023-6981 is a SQL injection vulnerability in the WP SMS plugin for WordPress, allowing authenticated attackers to inject SQL code and extract sensitive data.", "Impact and Scope": "The vulnerability affects all versions of WP SMS up to and including 6.5, and has a CVSS score of 4.9.", "Related MITRE ATT&CK Techniques": "T1059.001, T1190, T1088", "Technical Details": "The vulnerability occurs due to insufficient input validation and lack of prepared SQL queries, allowing attackers to inject SQL code.", "Detection": "Detection can be done by monitoring database queries and identifying suspicious patterns.", "Mitigation": "Verification of user inputs, use of prepared SQL queries, and implementation of Content Security Policy can mitigate the vulnerability.", "Conclusion": "CVE-2023-6981 is a serious vulnerability that can be exploited by attackers to extract sensitive data or modify data in the database."}, "executive_analysis": {"Overview": "CVE-2023-6981 is a significant vulnerability in the WP SMS plugin for WordPress, affecting all versions up to and including 6.5.", "Business Impact": "The vulnerability can lead to data theft, data tampering, or unauthorized access to sensitive data, which can have severe business consequences.", "Technical Impact": "The vulnerability affects the technical security of the WP SMS plugin, potentially leading to security breaches and data leaks.", "Mitigation Strategies": "Implementing Content Security Policy, verifying user inputs, and using prepared SQL queries can mitigate the vulnerability.", "Recommendations": "Executives should immediately update the WP SMS plugin to a patched version, and implement the recommended mitigation strategies.", "Conclusions": "CVE-2023-6981 is a critical vulnerability that requires immediate attention and action to prevent potential security breaches."}}