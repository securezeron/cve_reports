{"id": "CVE-2023-5338", "sourceIdentifier": "security@wordfence.com", "published": "2023-11-22T16:15:11.083", "lastModified": "2023-11-27T22:11:12.553", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "The Theme Blvd Shortcodes plugin for WordPress is vulnerable to Stored Cross-Site Scripting via shortcodes in versions up to, and including, 1.6.8 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers with contributor-level and above permissions to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page."}, {"lang": "es", "value": "El complemento Theme Blvd Shortcodes para WordPress es incluida es vulnerable a Cross-Site Scripting Almacenado a trav\u00e9s de c\u00f3digos cortos en versiones hasta la 1.6.8 incluida debido a una sanitizaci\u00f3n de entrada insuficiente y a un escape de salida en los atributos proporcionados por el usuario. Esto hace posible que atacantes autenticados con permisos de nivel de colaborador y superiores inyecten scripts web arbitrarios en p\u00e1ginas que se ejecutar\u00e1n cada vez que un usuario acceda a una p\u00e1gina inyectada."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security@wordfence.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.1, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:themeblvd:theme_blvd_shortcodes:*:*:*:*:*:wordpress:*:*", "versionEndIncluding": "1.6.8", "matchCriteriaId": "9091EE24-FFAF-42DD-ADE1-E8CC6E6BFAAD"}]}]}], "references": [{"url": "https://plugins.trac.wordpress.org/browser/theme-blvd-shortcodes/tags/1.6.8/includes/class-tb-column-shortcode.php#L97", "source": "security@wordfence.com", "tags": ["Product"]}, {"url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/88809668-ea6b-41df-b2a7-ffe03a931c86?source=cve", "source": "security@wordfence.com", "tags": ["Third Party Advisory"]}], "techniques": [{"techniqueID": "T1190", "comment": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N - Stored XSS via shortcodes in versioned attributes. Possible attack vector is User-Provided Data. A defense strategy is to sanitize user input and output escape."}, {"techniqueID": "T1194", "comment": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N - Cross-Site Scripting (XSS) attack via a web application without user interaction. Possible attack vector is Network. A defense strategy is to use Content Security Policy and validate user input."}], "stix_bundle": {"objects": [{"id": "vulnerability:cve-2023-5338", "type": "vulnerability", "description": "The Theme Blvd Shortcodes plugin for WordPress is vulnerable to Stored Cross-Site Scripting via shortcodes in versions up to, and including, 1.6.8 due to insufficient input sanitization and output escaping on user-supplied attributes.", "attributes": {"cvssv3": {"attack_vector": "NETWORK", "attack_complexity": "LOW", "privileges_required": "LOW", "user_interaction": "REQUIRED", "scope": "CHANGED", "confidentiality_impact": "LOW", "integrity_impact": "LOW", "availability_impact": "NONE"}}, "relationships": [{"type": "relates_to", "id_ref": "attack_pattern:Stored XSS via shortcodes"}, {"type": "relates_to", "id_ref": "indicator:User-Provided Data"}]}, {"id": "attack_pattern:Stored XSS via shortcodes", "type": "attack-pattern", "description": "Stored Cross-Site Scripting (XSS) attack via a web application without user interaction", "attributes": {"kill_chain_phases": "Command and Control"}}, {"id": "indicator:User-Provided Data", "type": "indicator", "description": "User-provided data", "attributes": {"pattern": "User-supplied attributes"}}]}, "technical_analysis": {"Introduction": "The vulnerability in the Theme Blvd Shortcodes plugin for WordPress can be exploited by storing malicious scripts in user-supplied attributes.", "Impact and Scope": "The attack vector is User-provided data, and the attack complexity is low. The confidentiality impact is LOW, integrity impact is LOW, and availability impact is NONE.", "Related MITRE ATT&CK Techniques": "T1190 Stored XSS via shortcodes and T1194 Cross-Site Scripting (XSS) attack via a web application without user interaction.", "Technical Details": "The vulnerability is due to insufficient input sanitization and output escaping on user-supplied attributes.", "Detection": "Detect by monitoring for suspicious activity on the web application and validating user input.", "Mitigation": "Mitigate by sanitizing user input, output escaping, and implementing Content Security Policy.", "Conclusion": "In conclusion, this vulnerability can be exploited to store malicious scripts in user-supplied attributes, and it is essential to take measures to mitigate it."}, "executive_analysis": {"Overview": "The vulnerability in the Theme Blvd Shortcodes plugin for WordPress can be exploited to store malicious scripts.", "Business Impact": "The business impact is that the vulnerability can be exploited to store malicious scripts, which can lead to data breaches and financial loss.", "Technical Impact": "The technical impact is that the vulnerability can be exploited to store malicious scripts, which can compromise the security of the web application.", "Mitigation Strategies": "Mitigate by implementing Content Security Policy, validating user input, and sanitizing user-supplied attributes.", "Recommendations": "Recommendations include implementing security patches, updating plugins, and monitoring for suspicious activity.", "Conclusions": "Conclusions and next steps include prioritizing vulnerability remediation, implementing security measures, and conducting regular security assessments."}}