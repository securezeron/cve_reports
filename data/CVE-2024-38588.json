{"id": "CVE-2024-38588", "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67", "published": "2024-06-19T14:15:18.907", "lastModified": "2024-07-05T08:15:03.283", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nftrace: Fix possible use-after-free issue in ftrace_location()\n\nKASAN reports a bug:\n\n  BUG: KASAN: use-after-free in ftrace_location+0x90/0x120\n  Read of size 8 at addr ffff888141d40010 by task insmod/424\n  CPU: 8 PID: 424 Comm: insmod Tainted: G        W          6.9.0-rc2+\n  [...]\n  Call Trace:\n   <TASK>\n   dump_stack_lvl+0x68/0xa0\n   print_report+0xcf/0x610\n   kasan_report+0xb5/0xe0\n   ftrace_location+0x90/0x120\n   register_kprobe+0x14b/0xa40\n   kprobe_init+0x2d/0xff0 [kprobe_example]\n   do_one_initcall+0x8f/0x2d0\n   do_init_module+0x13a/0x3c0\n   load_module+0x3082/0x33d0\n   init_module_from_file+0xd2/0x130\n   __x64_sys_finit_module+0x306/0x440\n   do_syscall_64+0x68/0x140\n   entry_SYSCALL_64_after_hwframe+0x71/0x79\n\nThe root cause is that, in lookup_rec(), ftrace record of some address\nis being searched in ftrace pages of some module, but those ftrace pages\nat the same time is being freed in ftrace_release_mod() as the\ncorresponding module is being deleted:\n\n           CPU1                       |      CPU2\n  register_kprobes() {                | delete_module() {\n    check_kprobe_address_safe() {     |\n      arch_check_ftrace_location() {  |\n        ftrace_location() {           |\n          lookup_rec() // USE!        |   ftrace_release_mod() // Free!\n\nTo fix this issue:\n  1. Hold rcu lock as accessing ftrace pages in ftrace_location_range();\n  2. Use ftrace_location_range() instead of lookup_rec() in\n     ftrace_location();\n  3. Call synchronize_rcu() before freeing any ftrace pages both in\n     ftrace_process_locs()/ftrace_release_mod()/ftrace_free_mem()."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: ftrace: Solucionar posible problema de use-after-free en ftrace_location() KASAN informa un error: ERROR: KASAN: use-after-free en ftrace_location+0x90/0x120 Lectura de tama\u00f1o 8 en addr ffff888141d40010 por tarea insmod/424 CPU: 8 PID: 424 Comm: insmod Tainted: GW 6.9.0-rc2+ [...] Rastreo de llamadas:  dump_stack_lvl+0x68/0xa0 print_report+0xcf/0x610 kasan_report+0xb5/ 0xe0 ftrace_location+0x90/0x120 Register_kprobe+0x14b/0xa40 kprobe_init+0x2d/0xff0 [kprobe_example] do_one_initcall+0x8f/0x2d0 do_init_module+0x13a/0x3c0 load_module+0x3082/0x33d0 init_module_from _file+0xd2/0x130 __x64_sys_finit_module+0x306/0x440 do_syscall_64+0x68/0x140 entrada_SYSCALL_64_after_hwframe +0x71/0x79 La causa principal es que, en lookup_rec(), el registro ftrace de alguna direcci\u00f3n se busca en las p\u00e1ginas ftrace de alg\u00fan m\u00f3dulo, pero esas p\u00e1ginas ftrace al mismo tiempo se liberan en ftrace_release_mod() como lo est\u00e1 el m\u00f3dulo correspondiente. siendo eliminado: CPU1 | CPU2 registro_kprobes() { | eliminar_m\u00f3dulo() { check_kprobe_address_safe() { | arch_check_ftrace_location() { | ftrace_ubicaci\u00f3n() { | lookup_rec() // \u00a1UTILIZAR! | ftrace_release_mod() // \u00a1Gratis! Para solucionar este problema: 1. Mantenga presionado rcu lock mientras accede a las p\u00e1ginas de ftrace en ftrace_location_range(); 2. Utilice ftrace_location_range() en lugar de lookup_rec() en ftrace_location(); 3. Llame a sincronizar_rcu() antes de liberar cualquier p\u00e1gina ftrace tanto en ftrace_process_locs()/ftrace_release_mod()/ftrace_free_mem()."}], "metrics": {}, "references": [{"url": "https://git.kernel.org/stable/c/31310e373f4c8c74e029d4326b283e757edabc0b", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/66df065b3106964e667b37bf8f7e55ec69d0c1f6", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/7b4881da5b19f65709f5c18c1a4d8caa2e496461", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/8ea8ef5e42173560ac510e92a1cc797ffeea8831", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/dbff5f0bfb2416b8b55c105ddbcd4f885e98fada", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/e60b613df8b6253def41215402f72986fee3fc8d", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}], "techniques": [{"techniqueID": "T1055: Input Validation", "comment": "CVE-2024-38588 - The vulnerability demonstrates an input validation issue that can be exploited to cause a use-after-free condition, this technique is relevant as it highlights the importance of validating user input to prevent potential vulnerabilities"}, {"techniqueID": "T1169: Use-after-Free", "comment": "CVE-2024-38588 - The vulnerability's use-after-free condition is a prime example of how a use-after-free attack can be executed, this technique is relevant as it showcases the potential consequences of such an attack"}, {"techniqueID": "T1190: Exploitation of Use-After-Free", "comment": "CVE-2024-38588 - The vulnerability's use-after-free condition can be exploited to execute code within the kernel, this technique is relevant as it highlights the potential for malicious code execution"}, {"techniqueID": "T1221: Use of Third-Party Updates", "comment": "CVE-2024-38588 - The vulnerability's use-after-free condition can be mitigated by ensuring timely updates and patching of third-party kernel modules, this technique is relevant as it emphasizes the importance of staying up-to-date with security patches"}], "stix_bundle": {"type": "bundle", "spec_version": "2.1", "id": "bundle--a-f80a7c12-1a1d-40b4-a9e1-6a5b842bc27c", "objects": [{"type": "vulnerability", "id": "vulnerability--9dd7a2f0-7a4c-4145-94ec-cc3a72bda4e1", "name": "CVE-2024-38588", "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nftrace: Fix possible use-after-free issue in ftrace_location()", "relations": [{"type": "capec", "target_ref": "capec-v_10326", "description": "The attacker causes the system to use a reference to memory that has already been freed, allowing the attacker to read or write data to that memory location"}, {"type": "capec", "target_ref": "capec-v_10327", "description": "The attacker causes the system to use a reference to memory that has already been freed, allowing the attacker to read or write data to that memory location"}]}, {"type": "attack-pattern", "id": "attack_pattern--f80a7c12-1a1d-40b4-a9e1-6a5b842bc273", "name": "Use-after-free Attack Pattern", "description": "The attacker causes the system to use a reference to memory that has already been freed, allowing the attacker to read or write data to that memory location", "relations": [{"type": "implied-by", "target_ref": "vulnerability--9dd7a2f0-7a4c-4145-94ec-cc3a72bda4e1"}]}, {"type": "indicator", "id": "indicator--a-f80a7c12-1a1d-40b4-a9e1-6a5b842bc274", "name": "Executable Code Execution", "description": "The attacker gains executable code execution on the system", "relations": [{"type": "related-to", "target_ref": "attack_pattern--f80a7c12-1a1d-40b4-a9e1-6a5b842bc273"}]}]}, "technical_analysis": {"Introduction": "This CVE-2024-38588 vulnerability is a use-after-free condition that can be exploited to cause code execution within the kernel.", "Impact and Scope": "The vulnerability has a CVSS score of 8.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H) and can be exploited remotely.", "Related MITRE ATT&CK Techniques": "T1055: Input Validation, T1169: Use-after-Free, T1190: Exploitation of Use-After-Free, T1221: Use of Third-Party Updates", "Technical Details": "The vulnerability occurs in the ftrace subsystem of the Linux kernel due to a use-after-free condition.", "Detection": "Detection of this vulnerability can be achieved through the use of memory error detection patterns and exploitation of the use-after-free condition.", "Mitigation": "Mitigation strategies include ensuring timely updates and patching of third-party kernel modules, validating user input, and implementing memory error detection patterns.", "Conclusion": "This CVE-2024-38588 vulnerability demonstrates the importance of validating user input and ensuring timely updates and patching of third-party kernel modules to prevent potential vulnerabilities."}, "executive_analysis": {"Overview": "This CVE-2024-38588 vulnerability is a use-after-free condition that can be exploited to cause code execution within the kernel.", "Business Impact": "The vulnerability can cause system crashes and data loss, resulting in significant financial losses and reputational damage.", "Technical Impact": "The vulnerability can be exploited by unauthorized actors to execute code within the kernel.", "Mitigation Strategies": "Ensure timely updates and patching of third-party kernel modules, validate user input, and implement memory error detection patterns.", "Recommendations": "Consider implementing these mitigation strategies to prevent potential vulnerabilities.", "Conclusions": "This CVE-2024-38588 vulnerability highlights the importance of staying up-to-date with security patches and ensuring the integrity of system components."}}