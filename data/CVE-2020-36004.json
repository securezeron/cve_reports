{"id": "CVE-2020-36004", "sourceIdentifier": "cve@mitre.org", "published": "2021-06-03T23:15:08.487", "lastModified": "2021-06-08T16:47:10.283", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "AppCMS 2.0.101 in /admin/download_frame.php has a SQL injection vulnerability which allows attackers to obtain sensitive database information."}, {"lang": "es", "value": "AppCMS versi\u00f3n 2.0.101 en el archivo /admin/download_frame.php presenta una vulnerabilidad de inyecci\u00f3n SQL que permite a atacantes obtener informaci\u00f3n confidencial de la base de datos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:appcms:appcms:2.0.101:*:*:*:*:*:*:*", "matchCriteriaId": "354B85ED-D1D1-4CDB-BCF8-2C410C74F537"}]}]}], "references": [{"url": "https://github.com/source-trace/appcms/issues/2", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}], "techniques": [{"techniqueID": "T1027", "comment": "CVE-2020-36004 - This SQL Injection vulnerability allows attackers to extract sensitive database information. Defenses should focus on restricting input data and validating user input."}, {"techniqueID": "T1055", "comment": "CVE-2020-36004 - This vulnerability can also be used to inject malicious code. Defenses should focus on preventing unauthorized code execution and monitoring application logs."}, {"techniqueID": "T1190", "comment": "CVE-2020-36004 - This SQL Injection vulnerability can be used to escalate privileges. Defenses should focus on restricting access to sensitive data and monitoring user permissions."}, {"techniqueID": "T1568", "comment": "CVE-2020-36004 - This vulnerability can be used to inject web shells. Defenses should focus on monitoring web application logs and preventing unauthorized code execution."}], "stix_bundle": {"type": "bundle", "id": "CVE-2020-36004-bundle", "created_by_ref": "identity-- Identity of the creator", "created": "2021-06-08T16:47:10.283", "modified": "2021-06-08T16:47:10.283", "objects": [{"type": "vulnerability", "id": "CVE-2020-36004", "created_by_ref": "identity-- Identity of the creator", "created": "2021-06-03T23:15:08.487", "modified": "2021-06-08T16:47:10.283", "name": "AppCMS 2.0.101 SQL Injection Vulnerability", "description": "SQL Injection vulnerability in AppCMS 2.0.101", "severity": "Medium", "references": [{"type": "reference", "id": "reference-1", "name": "GitHub Issue 2", "description": "AppCMS 2.0.101 SQL Injection Vulnerability", "url": "https://github.com/source-trace/appcms/issues/2"}], "relationships": [{"type": "related technique", "id": "T1027", "relationship": "uses"}, {"type": "related technique", "id": "T1055", "relationship": "uses"}, {"type": "related technique", "id": "T1190", "relationship": "uses"}, {"type": "related technique", "id": "T1568", "relationship": "uses"}]}, {"type": "technique", "id": "T1027", "created_by_ref": "identity-- Identity of the creator", "created": "2021-06-08T16:47:10.283", "modified": "2021-06-08T16:47:10.283", "name": "SQL Injection", "description": "SQL Injection is a web application vulnerability that allows an attacker to inject malicious SQL code into a web application's database", "mitigation": [{"type": "note", "id": "note-1", "description": "Restrict input data and validate user input"}]}, {"type": "technique", "id": "T1055", "created_by_ref": "identity-- Identity of the creator", "created": "2021-06-08T16:47:10.283", "modified": "2021-06-08T16:47:10.283", "name": "Command Injection", "description": "Command Injection is a web application vulnerability that allows an attacker to inject malicious commands into a web application", "mitigation": [{"type": "note", "id": "note-2", "description": "Prevent unauthorized code execution and monitor application logs"}]}, {"type": "technique", "id": "T1190", "created_by_ref": "identity-- Identity of the creator", "created": "2021-06-08T16:47:10.283", "modified": "2021-06-08T16:47:10.283", "name": "Exploit Public-Facing Application", "description": "Exploit Public-Facing Application is a technique used to exploit vulnerabilities in public-facing applications", "mitigation": [{"type": "note", "id": "note-3", "description": "Restrict access to sensitive data and monitor user permissions"}]}, {"type": "technique", "id": "T1568", "created_by_ref": "identity-- Identity of the creator", "created": "2021-06-08T16:47:10.283", "modified": "2021-06-08T16:47:10.283", "name": "Web Shell", "description": "Web Shell is a technique used to inject web shells into a web application", "mitigation": [{"type": "note", "id": "note-4", "description": "Monitor web application logs and prevent unauthorized code execution"}]}]}, "technical_analysis": {"Introduction": "AppCMS 2.0.101 SQL Injection Vulnerability is a medium-severity vulnerability that allows attackers to extract sensitive database information. This vulnerability can be exploited using various techniques such as SQL Injection, Command Injection, Exploit Public-Facing Application, and Web Shell.", "Impact and Scope": "This vulnerability affects the AppCMS 2.0.101 version of the AppCMS web application. The impact of this vulnerability is the extraction of sensitive database information, and the potential to escalate privileges.", "Related MITRE ATT&CK Techniques": "The related MITRE ATT&CK techniques are T1027, T1055, T1190, and T1568.", "Technical Details": "The vulnerability occurs due to the lack of proper input validation and sanitization in the AppCMS 2.0.101 web application. This allows attackers to inject malicious SQL code into the database.", "Detection": "Detection of this vulnerability can be done by monitoring application logs for suspicious SQL injection attempts.", "Mitigation": "Mitigation strategies include restricting input data and validating user input, preventing unauthorized code execution and monitoring application logs, restricting access to sensitive data and monitoring user permissions, and monitoring web application logs for web shell injection.", "Conclusion": "The AppCMS 2.0.101 SQL Injection Vulnerability is a medium-severity vulnerability that can be exploited using various techniques. Defenses should focus on restricting input data and validating user input, preventing unauthorized code execution and monitoring application logs, restricting access to sensitive data and monitoring user permissions, and monitoring web application logs for web shell injection."}, "executive_analysis": {"Overview": "The AppCMS 2.0.101 SQL Injection Vulnerability is a medium-severity vulnerability that allows attackers to extract sensitive database information. This vulnerability can be exploited using various techniques such as SQL Injection, Command Injection, Exploit Public-Facing Application, and Web Shell.", "Business Impact": "The impact of this vulnerability is the potential leakage of sensitive data, which can lead to data breaches and loss of customer trust.", "Technical Impact": "The technical impact of this vulnerability is the potential to escalate privileges and gain unauthorized access to sensitive data.", "Mitigation Strategies": "The mitigation strategies for this vulnerability are: restricting input data and validating user input, preventing unauthorized code execution and monitoring application logs, restricting access to sensitive data and monitoring user permissions, and monitoring web application logs for web shell injection.", "Recommendations": "Recommended actions include patching the vulnerability, implementing input validation and sanitization, and monitoring application logs for suspicious activity.", "Conclusions": "In conclusion, the AppCMS 2.0.101 SQL Injection Vulnerability is a medium-severity vulnerability that can be exploited using various techniques. Defenses should focus on restricting input data and validating user input, preventing unauthorized code execution and monitoring application logs, restricting access to sensitive data and monitoring user permissions, and monitoring web application logs for web shell injection."}}