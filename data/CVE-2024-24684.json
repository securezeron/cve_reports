{"id": "CVE-2024-24684", "sourceIdentifier": "talos-cna@cisco.com", "published": "2024-05-28T14:15:11.830", "lastModified": "2024-06-10T18:15:26.487", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "Multiple stack-based buffer overflow vulnerabilities exist in the readOFF functionality of libigl v2.5.0. A specially crafted .off file can lead to stack-based buffer overflow. An attacker can provide a malicious file to trigger this vulnerability.This vulnerability concerns the header parsing occuring while processing an `.off`  file via the `readOFF` function. \r\n\r\n\r\nWe can see above that at [0] a stack-based buffer called `comment` is defined with an hardcoded size of `1000 bytes`.  The call to `fscanf` at [1] is unsafe and if the first line of the header of the `.off` files is longer than 1000 bytes it will overflow the `header` buffer."}, {"lang": "es", "value": "Existen m\u00faltiples vulnerabilidades de desbordamiento de b\u00fafer en la regi\u00f3n stack de la memoria en la funcionalidad readOFF de libigl v2.5.0. Un archivo .off especialmente manipulado puede provocar un desbordamiento de b\u00fafer en la regi\u00f3n stack de la memoria. Un atacante puede proporcionar un archivo malicioso para desencadenar esta vulnerabilidad. Esta vulnerabilidad se refiere al an\u00e1lisis del encabezado que se produce al procesar un archivo \".off\" a trav\u00e9s de la funci\u00f3n \"readOFF\". Podemos ver arriba que en [0] se define un b\u00fafer basado en pila llamado \"comentario\" con un tama\u00f1o codificado de \"1000 bytes\". La llamada a `fscanf` en [1] no es segura y si la primera l\u00ednea del encabezado de los archivos `.off` tiene m\u00e1s de 1000 bytes, desbordar\u00e1 el b\u00fafer del `header`."}], "metrics": {"cvssMetricV31": [{"source": "talos-cna@cisco.com", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "talos-cna@cisco.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-121"}]}], "references": [{"url": "https://talosintelligence.com/vulnerability_reports/TALOS-2024-1929", "source": "talos-cna@cisco.com"}, {"url": "https://www.talosintelligence.com/vulnerability_reports/TALOS-2024-1929", "source": "talos-cna@cisco.com"}], "techniques": [{"techniqueID": "T1190", "comment": "CVE-2024-24684 - Utilizing code injection techniques to trigger stack-based buffer overflow vulnerabilities in libigl. Attackers can provide malicious files to exploit this vulnerability, leading to data corruption or arbitrary code execution. Defense strategies include input validation, boundary checking, and secure coding practices."}, {"techniqueID": "T1027", "comment": "CVE-2024-24684 - The use of file inclusion vulnearbilities to include malicious files in the .off file format, which can lead to code execution. Defenses include validating file extensions, checking file metadata, and using Secure File Transfer Protocol (SFTP) for sensitive file transmissions."}, {"techniqueID": "T1505", "comment": "CVE-2024-24684 - Exploiting the .off file parsing vulnerability to inject malicious code and execute arbitrary commands. Defense strategies include input sanitization, encoding detection, and secure coding practices."}], "stix_bundle": {"Bundle": {"type": "bundle", "id": "https://example.com/CVE-2024-24684", "created_by_ref": "https://example.com/Cisco-Cert-Talos", "created": "2024-06-10T18:15:26.487", "updated": "2024-06-10T18:15:26.487", "objects": [{"type": "vulnerability", "id": "CVE-2024-24684", "name": "libigl .off file parsing vulnerability", "description": "Multiple stack-based buffer overflow vulnerabilities exist in the readOFF functionality of libigl v2.5.0.", "cve_id": "CVE-2024-24684", "cvss_base_score": 7.8, "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H"}, {"type": "attack_pattern", "id": "https://example.com/T1190", "name": "Code Injection", "description": "The attack pattern involves injecting malicious code into a vulnerable application's input stream to trigger a buffer overflow vulnerability."}, {"type": "attack_pattern", "id": "https://example.com/T1027", "name": "File Inclusion", "description": "The attack pattern involves including malicious files in a vulnerable application's .off file format to execute arbitrary code."}, {"type": "attack_pattern", "id": "https://example.com/T1505", "name": "Command Injection", "description": "The attack pattern involves injecting malicious commands into a vulnerable application's input stream to execute arbitrary code."}, {"type": "tactic", "id": "https://example.com/T1055", "name": "Execution", "description": "The goal is to execute malicious code on the targeted system."}], "relationships": [{"id": "https://example.com/rel-1", "type": "has-part", "target_id": "https://example.com/CVE-2024-24684"}, {"id": "https://example.com/rel-2", "type": "uses-technique", "target_id": "https://example.com/T1190"}, {"id": "https://example.com/rel-3", "type": "uses-technique", "target_id": "https://example.com/T1027"}, {"id": "https://example.com/rel-4", "type": "uses-technique", "target_id": "https://example.com/T1505"}, {"id": "https://example.com/rel-5", "type": "uses-tactic", "target_id": "https://example.com/T1055"}]}}, "technical_analysis": {"Introduction": "This vulnerability exists in the readOFF functionality of libigl v2.5.0, allowing attackers to provide malicious files to trigger a stack-based buffer overflow.", "Impact and Scope": "The vulnerability has a CVSS base score of 7.8, with an attack vector of LOCAL and a potential impact on data integrity and confidentiality.", "Related MITRE ATT&CK Techniques": "The exploit for this vulnerability can be mitigated using input validation, boundary checking, and secure coding practices. The use of Secure File Transfer Protocol (SFTP) for sensitive file transmissions is also recommended.", "Technical Details": "The vulnerability occurs when a malicious file is provided to the readOFF function, which does not properly check the size of the input data. This can lead to a stack-based buffer overflow, allowing attackers to execute arbitrary code.", "Detection": "Detection methods include monitoring file transfers and input data for anomalies, as well as logging and tracking suspicious activity.", "Mitigation": "Mitigation strategies include validating file extensions, checking file metadata, and using SFTP for sensitive file transmissions.", "Conclusion": "In conclusion, this vulnerability is a serious concern and requires immediate attention. Implementing proper input validation, boundary checking, and secure coding practices can help mitigate the risk."}, "executive_analysis": {"Overview": "A stack-based buffer overflow vulnerability exists in the readOFF functionality of libigl v2.5.0, allowing attackers to provide malicious files to trigger arbitrary code execution.", "Business Impact": "The vulnerability poses a significant threat to organizations that use libigl, as it can lead to data corruption or arbitrary code execution.", "Technical Impact": "The vulnerability has a high severity and can be exploited by attackers to gain unauthorized access to systems.", "Mitigation Strategies": "Implementing input validation, boundary checking, and secure coding practices can help mitigate the risk of this vulnerability.", "Recommendations": "Recommendations include validating file extensions, checking file metadata, and using SFTP for sensitive file transmissions.", "Conclusions": "In conclusion, this vulnerability is a serious concern and requires immediate attention. We recommend implementing mitigation strategies and providing employee training to prevent exploitation."}}