{"id": "CVE-2007-2148", "sourceIdentifier": "cve@mitre.org", "published": "2007-04-19T10:19:00.000", "lastModified": "2018-10-16T16:42:20.130", "vulnStatus": "Modified", "cveTags": [], "descriptions": [{"lang": "en", "value": "Direct static code injection vulnerability in admin/save.php in Stephen Craton (aka WiredPHP) Chatness 2.5.3 and earlier allows remote authenticated administrators to inject PHP code into .html files via the html parameter, as demonstrated by head.html and foot.html, which are included and executed upon a direct request for index.php.  NOTE: a separate vulnerability could be leveraged to make this issue exploitable by remote unauthenticated attackers."}, {"lang": "es", "value": "Vulnerabilidad de inyecci\u00f3n directa de c\u00f3digo est\u00e1tico en admin/save.php de Stephen Craton (tambi\u00e9n conocido como WiredPHP) Chatness 2.5.3  y versiones anteriores permite a administradores remotos autenticados inyectar c\u00f3digo PHP en fichero .html a trav\u00e9s del par\u00e1metro html, como se demuestra en head.html y foot.html, que son incluidos y ejecutados en peticiones directas de index.php.\r\nNOTA: una vulnerabilidad distinta podr\u00eda ser utilizada para explotar esta vulnerabilidad por atacantes remotos no autenticados."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": true, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:stephen_craton:chatness:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.5.3", "matchCriteriaId": "DD9A3E41-FD28-4098-AE3A-D181E1133872"}]}]}], "references": [{"url": "http://secunia.com/advisories/24873", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "http://securityreason.com/securityalert/2595", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/archive/1/465547/100/0/threaded", "source": "cve@mitre.org"}, {"url": "http://www.vupen.com/english/advisories/2007/1386", "source": "cve@mitre.org"}], "techniques": [{"techniqueID": "T1086", "comment": "CVE-2007-2148 - Direct code injection vulnerability via user input in PHP code, uses weak authentication and potentially allows remote unauthenticated attackers to exploit - defense against this is through input validation and sanitization"}, {"techniqueID": "T1027", "comment": "CVE-2007-2148 - The vulnerability would allow an attacker to inject arbitrary php code into the PHP file, which could lead to arbitrary code execution - defense against this is through implementing a WAF and monitoring for suspicious activity"}, {"techniqueID": "T1046", "comment": "CVE-2007-2148 - The vulnerability is a result of weak authentication and data validation, attackers could use this to gain unauthorized access to the system and execute arbitrary code - defense against this is through implementing strong authentication and data validation"}], "stix_bundle": {"styx_bundle": {"description": "STIX Bundle for CVE-2007-2148", "objects": [{"id": "http://example.com/CVE-2007-2148", "type": "vulnerability", "description": "Direct code injection vulnerability via user input in PHP code", "properties": {"cvssV2": {"vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "baseScore": 6.5}}, "relationships": [{"type": "exploited-by", "objectRef": "http://example.com/T1086"}, {"type": "mitigated-by", "objectRef": "http://example.com/D3FEND-TPH-001"}]}, {"id": "http://example.com/T1086", "type": "attack-pattern", "description": "Direct code injection", "properties": {"name": "Direct code injection"}, "relationships": [{"type": "exploits", "objectRef": "http://example.com/CVE-2007-2148"}]}, {"id": "http://example.com/D3FEND-TPH-001", "type": "course-of-action", "description": "Implement input validation and sanitization", "properties": {"name": "Implement input validation and sanitization"}, "relationships": [{"type": "mitigates", "objectRef": "http://example.com/CVE-2007-2148"}]}]}}, "technical_analysis": {"Introduction": "CVE-2007-2148 is a direct code injection vulnerability in PHP code that allows attackers to inject arbitrary PHP code into the file. The vulnerability is due to weak authentication and data validation.", "Impact and Scope": "The vulnerability has a CVSS score of 6.5 and affects systems running PHP 2.5.3 and earlier. The attack vector is network-based and requires minimal user interaction.", "Related MITRE ATT&CK Techniques": "T1086, T1046, and T1027", "Technical Details": "The vulnerability is caused by the lack of input validation and sanitization in the PHP code. Attackers can manipulate user input to inject arbitrary PHP code into the file, which can be executed remotely.", "Detection": "Detect the vulnerability by monitoring for suspicious PHP code execution and identifying injection attempts.", "Mitigation": "Implement input validation and sanitization to prevent arbitrary code injection. Monitor for suspicious PHP code execution and block any suspicious traffic.", "Conclusion": "CVE-2007-2148 is a critical vulnerability that requires immediate attention and remediation. Implementing input validation and sanitization and monitoring for suspicious traffic can help mitigate the risk of exploitation."}, "executive_analysis": {"Overview": "CVE-2007-2148 is a critical vulnerability in PHP code that can allow attackers to inject arbitrary code and execute malicious actions.", "Business Impact": "The vulnerability can lead to data breaches, financial losses, and reputational damage.", "Technical Impact": "The vulnerability is a result of weak authentication and data validation, and can be exploited remotely with minimal user interaction.", "Mitigation Strategies": "Implement input validation and sanitization, monitor for suspicious traffic, and apply patches and updates regularly.", "Recommendations": "Improve PHP code quality, implement security testing and vulnerability management, and provide employees with regular security training.", "Conclusions": "Mitigating this vulnerability requires immediate attention and remediation. By implementing best practices and staying informed, organizations can reduce the risk of exploitation and protect their assets."}}