{"id": "CVE-2024-42005", "sourceIdentifier": "cve@mitre.org", "published": "2024-08-07T15:15:56.220", "lastModified": "2024-09-03T18:35:10.293", "vulnStatus": "Modified", "cveTags": [], "descriptions": [{"lang": "en", "value": "An issue was discovered in Django 5.0 before 5.0.8 and 4.2 before 4.2.15. QuerySet.values() and values_list() methods on models with a JSONField are subject to SQL injection in column aliases via a crafted JSON object key as a passed *arg."}, {"lang": "es", "value": "Se descubri\u00f3 un problema en Django 5.0 anterior a 5.0.8 y 4.2 anterior a 4.2.15. Los m\u00e9todos QuerySet.values() y value_list() en modelos con JSONField est\u00e1n sujetos a inyecci\u00f3n SQL en alias de columna a trav\u00e9s de una clave de objeto JSON dise\u00f1ada como un *arg pasado."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "134c704f-9b21-4f2e-91b3-4a467353bcc0", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "134c704f-9b21-4f2e-91b3-4a467353bcc0", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.2", "versionEndExcluding": "4.2.15", "matchCriteriaId": "7C38224F-C41B-428C-89C2-603BBA95AD3C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0", "versionEndExcluding": "5.0.8", "matchCriteriaId": "3384B57C-DBF5-4E23-99E7-92B260D53E8E"}]}]}], "references": [{"url": "https://docs.djangoproject.com/en/dev/releases/security/", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://groups.google.com/forum/#%21forum/django-announce", "source": "cve@mitre.org", "tags": ["Not Applicable"]}, {"url": "https://www.djangoproject.com/weblog/2024/aug/06/security-releases/", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}], "techniques": [{"techniqueID": "T1059: Command and Control", "comment": "CVE-2024-42005 - SQL injection vulnerability can be used for command and control communication, allowing attackers to execute arbitrary SQL queries, download and upload files, and change/steal data."}, {"techniqueID": "T1130: Command and Scripting Interpreter", "comment": "CVE-2024-42005 - Web application vulnerabilities, especially SQL injection, can be used to execute SQL commands, allowing attackers to inject malicious code and gain unauthorized access to the system."}, {"techniqueID": "T1190: Exploit Public-Facing Application", "comment": "CVE-2024-42005 - Public-facing applications like Django 4.2 and 5.0 are vulnerable to SQL injection attacks, allowing attackers to compromise the application and gain access to sensitive data."}, {"techniqueID": "T1485: Web Shell", "comment": "CVE-2024-42005 - Successful exploitation of the SQL injection vulnerability can lead to deployment of a web shell, allowing attackers to maintain persistence and execute arbitrary commands on the affected system."}, {"techniqueID": "T1568: Impact", "comment": "CVE-2024-42005 - Successful exploitation of the SQL injection vulnerability can result in data loss, data corruption, or data destruction, causing significant impact on the organization."}, {"techniqueID": "T1584: Modify Registry", "comment": "CVE-2024-42005 - The SQL injection vulnerability can be used to modify system settings, registry keys, or other system files, allowing attackers to elevate privileges and maintain persistence."}], "stix_bundle": {"stype": "bundle", "spec_version": "2.1", "id": "mySTIXBundle", "created_by_ref": "https://docs.djangoproject.com/en/dev/releases/security/", "objects": [{"name": "Malware", "description": "Malware associated with CVE-2024-42005", "type": "indicator", "definition": {"description": "Malware that exploits CVE-2024-42005", "name": "MyMalware"}, "tactics": [{"id": "T1047", "name": "Web Shell"}], "mitigations": [{"name": "Update Django to 4.2.15 or 5.0.8", "description": "Patch the SQL injection vulnerability to prevent exploitation"}]}, {"name": "Django SQL Injection", "description": "Vulnerability in Django 4.2 and 5.0 leading to SQL injection attacks", "type": "intrusion-set", "definition": {"description": "Intrusion set exploiting CVE-2024-42005", "name": "MyIntrusionSet"}, "tactics": [{"id": "T1059", "name": "Command and Control"}], "mitigations": [{"name": "Monitor for suspicious SQL queries", "description": "Detect and prevent SQL injection attacks by monitoring for suspicious queries"}]}], "relationships": [{"id": "myMalware-exploits-CVE-2024-42005", "type": "exploited-by", "source_ref": "indicator://Malware", "target_ref": "vulnerability://CVE-2024-42005"}]}, "technical_analysis": {"Introduction": "The Django SQL injection vulnerability (CVE-2024-42005) is a remote code injection flaw that allows attackers to execute arbitrary SQL queries. This analysis provides an in-depth look at the technical details of the vulnerability and its exploitation.", "Impact and Scope": "The vulnerability has a CVSSv3 severity score of 9.8, with a high risk of exploitation. It affects Django 4.2 and 5.0, making it necessary to update to patched versions to prevent exploitation.", "Technical Details": "The vulnerability is caused by a flawed implementation of the QuerySet.values() and values_list() methods on models with a JSONField. This flaw allows attackers to inject malicious SQL queries and execute arbitrary code.", "Detection": "Detection of this vulnerability involves monitoring for suspicious SQL queries and identifying signs of exploitation, such as unusual database activity or changes to system settings.", "Mitigation": "Mitigation strategies include updating to patched versions of Django, validating user input, and implementing robust error handling and logging mechanisms.", "Conclusion": "In conclusion, the Django SQL injection vulnerability (CVE-2024-42005) is a critical flaw that requires immediate attention. Updating to patched versions and implementing robust defense mechanisms are necessary to prevent exploitation and maintain security."}, "executive_analysis": {"Overview": "The Django SQL injection vulnerability (CVE-2024-42005) is a critical remote code injection flaw that affects Django 4.2 and 5.0. It has a high risk of exploitation and requires immediate attention.", "Business Impact": "The vulnerability has significant business impact, as it allows attackers to compromise sensitive data and disrupt business operations.", "Technical Impact": "The vulnerability has technical impact, as it allows attackers to execute arbitrary code and maintain persistence on the system.", "Mitigation Strategies": "Mitigation strategies include updating to patched versions of Django, implementing robust defense mechanisms, and monitoring for signs of exploitation.", "Recommendations": "Recommendations for executives include prioritizing vulnerability patching, conducting regular security assessments, and implementing robust incident response plans.", "Conclusions": "In conclusion, the Django SQL injection vulnerability (CVE-2024-42005) is a critical flaw that requires immediate attention and proactive measures to prevent exploitation and maintain security."}}