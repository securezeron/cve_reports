{"id": "CVE-2024-24002", "sourceIdentifier": "cve@mitre.org", "published": "2024-02-07T00:15:56.503", "lastModified": "2024-08-26T20:35:11.220", "vulnStatus": "Modified", "cveTags": [], "descriptions": [{"lang": "en", "value": "jshERP v3.3 is vulnerable to SQL Injection. The com.jsh.erp.controller.MaterialController: com.jsh.erp.utils.BaseResponseInfo getListWithStock() function of jshERP does not filter `column` and `order` parameters well enough, and an attacker can construct malicious payload to bypass jshERP's protection mechanism in `safeSqlParse` method for sql injection."}, {"lang": "es", "value": "jshERP v3.3 es vulnerable a la inyecci\u00f3n SQL. La funci\u00f3n com.jsh.erp.controller.MaterialController: com.jsh.erp.utils.BaseResponseInfo getListWithStock() de jshERP no filtra los par\u00e1metros de `columna` y `orden` lo suficientemente bien, y un atacante puede construir un payload malicioso para eludir los de jshERP. Mecanismo de protecci\u00f3n en el m\u00e9todo `safeSqlParse` para inyecci\u00f3n SQL."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "134c704f-9b21-4f2e-91b3-4a467353bcc0", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "134c704f-9b21-4f2e-91b3-4a467353bcc0", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jishenghua:jsherp:3.3:*:*:*:*:*:*:*", "matchCriteriaId": "A549663F-7809-4723-9F1F-251DB15E31CA"}]}]}], "references": [{"url": "https://github.com/cxcxcxcxcxcxcxc/cxcxcxcxcxcxcxc/blob/main/cxcxcxcxcxc/about-2024/24002.txt", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/jishenghua/jshERP/issues/99", "source": "cve@mitre.org", "tags": ["Exploit", "Vendor Advisory"]}], "techniques": [{"techniqueID": "TA0040", "comment": "SQL Injection - CVE-2024-24002 - An attacker can inject SQL queries to extract sensitive data or manipulate database records. This technique is used to bypass jshERP's protection mechanism."}, {"techniqueID": "TA0045", "comment": "Weakness of Authentication - CVE-2024-24002 - The vulnerability allows an attacker to inject malicious queries without authentication, which can lead to unauthorized access to sensitive data."}, {"techniqueID": "TA0049", "comment": "Information Gathering - CVE-2024-24002 - An attacker can use this vulnerability to gather sensitive information such as database credentials, user names, and credit card numbers."}], "stix_bundle": {"__orderingKey": "id", "objects": [{"id": "vulnerability", "type": "vulnerability", "createdBy": "user", "created": "2024-02-07T00:15:56.503", "modified": "2024-08-26T20:35:11.220", "name": "jshERP v3.3 SQL Injection", "description": {"lang": "en", "value": "jshERP v3.3 is vulnerable to SQL Injection..."}, "cve": {"id": "CVE-2024-24002"}}, {"id": "attack_pattern", "type": "attack-pattern", "name": "SQL Injection", "description": {"lang": "en", "value": "An attack pattern in which an attacker injects malicious SQL..."}, "cve": {"id": "CVE-2024-24002"}, "related_object": [{"id": "vulnerability", "type": "vulnerability", "role": "related"}]}, {"id": "intrusion_set", "type": "intrusion-set", "name": "Unidentified", "description": {"lang": "en", "value": "An unidentified intrusion set that is using..."}, "related_object": [{"id": "attack_pattern", "type": "attack-pattern", "role": "related"}, {"id": "vulnerability", "type": "vulnerability", "role": "related"}]}, {"id": "course_of_action", "type": "course-of-action", "name": "Upgrade to Patched Version", "description": {"lang": "en", "value": "Upgrade to patched version to mitigate the weakness..."}, " relacioned_object": [{"id": "attack_pattern", "type": "attack-pattern", "role": "related"}, {"id": "vulnerability", "type": "vulnerability", "role": "mitigates"}]}]}, "technical_analysis": {"Introduction": "jshERP v3.3 SQL Injection vulnerability allows attackers to inject malicious SQL queries, leading to unauthorized access to sensitive data.", "Impact and Scope": "CVSS score 9.8, attack vector is NETWORK, and privileges required is NONE.", "Related MITRE ATT&CK Techniques": "TA0040, TA0045, and TA0049", "Technical Details": "The vulnerability occurs due to unfiltered `column` and `order` parameters in the `ListGroupBy` function. An attacker can construct malicious payload to bypass jshERP's protection mechanism.", "Detection": "Detection involves monitoring database queries for suspicious activity and logging of database exceptions.", "Mitigation": "Upgrade to patched version, restrict database access to authorized users, and monitor database queries for suspicious activity.", "Conclusion": "The jshERP v3.3 SQL Injection vulnerability is a critical issue that requires immediate attention and patching to prevent data breaches."}, "executive_analysis": {"Overview": "The jshERP v3.3 SQL Injection vulnerability poses a significant risk to sensitive data and requires immediate attention.", "Business Impact": "The vulnerability can lead to unauthorized access to sensitive data, resulting in financial loss, reputational damage, and regulatory non-compliance.", "Technical Impact": "The vulnerability allows attackers to inject malicious SQL queries, leading to unauthorized access to sensitive data.", "Mitigation Strategies": "Upgrade to patched version, restrict database access to authorized users, and monitor database queries for suspicious activity.", "Recommendations": "Apply patches, conduct regular vulnerability scanning, and implement incident response plan.", "Conclusions": "The jshERP v3.3 SQL Injection vulnerability is a critical issue that requires immediate attention and patching to prevent data breaches."}}