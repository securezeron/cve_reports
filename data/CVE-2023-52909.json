{"id": "CVE-2023-52909", "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67", "published": "2024-08-21T07:15:06.857", "lastModified": "2024-08-21T12:30:33.697", "vulnStatus": "Undergoing Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nnfsd: fix handling of cached open files in nfsd4_open codepath\n\nCommit fb70bf124b05 (\"NFSD: Instantiate a struct file when creating a\nregular NFSv4 file\") added the ability to cache an open fd over a\ncompound. There are a couple of problems with the way this currently\nworks:\n\nIt's racy, as a newly-created nfsd_file can end up with its PENDING bit\ncleared while the nf is hashed, and the nf_file pointer is still zeroed\nout. Other tasks can find it in this state and they expect to see a\nvalid nf_file, and can oops if nf_file is NULL.\n\nAlso, there is no guarantee that we'll end up creating a new nfsd_file\nif one is already in the hash. If an extant entry is in the hash with a\nvalid nf_file, nfs4_get_vfs_file will clobber its nf_file pointer with\nthe value of op_file and the old nf_file will leak.\n\nFix both issues by making a new nfsd_file_acquirei_opened variant that\ntakes an optional file pointer. If one is present when this is called,\nwe'll take a new reference to it instead of trying to open the file. If\nthe nfsd_file already has a valid nf_file, we'll just ignore the\noptional file and pass the nfsd_file back as-is.\n\nAlso rework the tracepoints a bit to allow for an \"opened\" variant and\ndon't try to avoid counting acquisitions in the case where we already\nhave a cached open file."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: nfsd: corrige el manejo de archivos abiertos almacenados en cach\u00e9 en la ruta de c\u00f3digo nfsd4_open el commit fb70bf124b05 (\"NFSD: crear una instancia de un archivo de estructura al crear un archivo NFSv4 normal\") agreg\u00f3 la capacidad de almacenar en cach\u00e9 un fd abierto sobre un compuesto. Hay un par de problemas con la forma en que esto funciona actualmente: Es picante, ya que un nfsd_file reci\u00e9n creado puede terminar con su bit PENDIENTE borrado mientras el nf tiene hash, y el puntero nf_file todav\u00eda est\u00e1 puesto a cero. Otras tareas pueden encontrarlo en este estado y esperan ver un nf_file v\u00e1lido, y pueden ir si nf_file es NULL. Adem\u00e1s, no hay garant\u00eda de que terminemos creando un nuevo nfsd_file si ya hay uno en el hash. Si una entrada existente est\u00e1 en el hash con un nf_file v\u00e1lido, nfs4_get_vfs_file golpear\u00e1 su puntero nf_file con el valor de op_file y el antiguo nf_file se filtrar\u00e1. Solucione ambos problemas creando una nueva variante nfsd_file_acquirei_opened que toma un puntero de archivo opcional. Si hay uno presente cuando se llama, tomaremos una nueva referencia en lugar de intentar abrir el archivo. Si el nfsd_file ya tiene un nf_file v\u00e1lido, simplemente ignoraremos el archivo opcional y devolveremos el nfsd_file tal como est\u00e1. Tambi\u00e9n vuelva a trabajar un poco los puntos de seguimiento para permitir una variante \"abierta\" y no intente evitar contar adquisiciones en el caso de que ya tengamos un archivo abierto en cach\u00e9."}], "metrics": {}, "references": [{"url": "https://git.kernel.org/stable/c/0b3a551fa58b4da941efeb209b3770868e2eddd7", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/0b778361998d6c6356b8d2fc7ddf025fb3224654", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/45c08a752982116f3287afcd1bd9c50f4fab0c28", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/973acfdfe90c8a4e58ade97ff0653a498531ff2e", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}], "techniques": [{"techniqueID": "TA0008", "comment": "CVE-2023-52909 - This technique is relevant to the vulnerability due to the potential for an unauthorized attacker to obtain sensitive information by exploiting a race condition in the handling of cached open files."}, {"techniqueID": "TA0010", "comment": "CVE-2023-52909 - This technique is relevant to the vulnerability due to the potential for an attacker to obtain elevated privileges by exploiting a weakness in the kernel's handling of file descriptors."}, {"techniqueID": "TA0033", "comment": "CVE-2023-52909 - This technique is relevant to the vulnerability due to the potential for an attacker to inject malicious code into the kernel's memory without being detected."}], "stix_bundle": {"stixBundle": {"type": "bundle", "id": "bundle--cve-2023-52909", "created_by_ref": "https://example.com", "created": "2024-08-21T07:15:06.857", "modified": "2024-08-21T12:30:33.697", "identifiers": [{"category": "x-opencti", "value": "CVE-2023-52909"}], "objects": [{"type": "vulnerability", "id": "vulnerability--cve-2023-52909", "created_by_ref": "https://example.com", "created": "2024-08-21T07:15:06.857", "modified": "2024-08-21T12:30:33.697", "title": "CVE-2023-52909: Linux Kernel NFSv4 File Handling Vulnerability", "description": "A vulnerability in the Linux kernel's NFSv4 file handling code, which could allow an attacker to obtain sensitive information by exploiting a race condition.", "severity": "high", "problemtype": "problem", "references": [{"rel_type": "uses", "id_ref": "relationship--cve-2023-52909-d3fend"}]}, {"type": "uses", "id": "relationship--cve-2023-52909-d3fend", "created_by_ref": "https://example.com", "created": "2024-08-21T07:15:06.857", "modified": "2024-08-21T12:30:33.697", "source_ref": "vulnerability--cve-2023-52909", "target_ref": "d3fend--kernel-filesystem"}, {"type": "d3fend", "id": "d3fend--kernel-filesystem", "created_by_ref": "https://example.com", "created": "2024-08-21T07:15:06.857", "modified": "2024-08-21T12:30:33.697", "title": "Kernel Filesystem D3FEND Tactic", "description": "Detects and mitigates kernel filesystem vulnerabilities", "attack_pattern": "kernel-filesystem", "detection": {"rule": "kernel-filesystem.rules"}, "mitigation": {"action": "block"}}]}}, "technical_analysis": {"Introduction": "The Linux kernel NFSv4 file handling vulnerability (CVE-2023-52909) is a race condition that allows an attacker to obtain sensitive information by exploiting the kernel's handling of cached open files.", "Impact and Scope": "The impact of this vulnerability is high, as an attacker could obtain sensitive information such as file contents, file permissions, and file metadata.", "Related MITRE ATT&CK Techniques": "TA0008, TA0010, and TA0033", "Technical Details": "The vulnerability occurs in the kernel's NFSv4 file handling code, which handles cached open files in an insecure manner.", "Detection": "Detecting this vulnerability requires monitoring the kernel's file handling activity and looking for signs of unauthorized file access.", "Mitigation": "Mitigate this vulnerability by implementing kernel-level access controls and monitoring kernel activity.", "Conclusion": "In conclusion, the Linux kernel NFSv4 file handling vulnerability (CVE-2023-52909) is a high-impact vulnerability that requires timely detection and mitigation."}, "executive_analysis": {"Overview": "The Linux kernel NFSv4 file handling vulnerability (CVE-2023-52909) is a critical vulnerability that requires immediate attention.", "Business Impact": "The business impact of this vulnerability is significant, as it could allow an attacker to obtain sensitive information, disrupt business operations, and compromise data integrity.", "Technical Impact": "The technical impact of this vulnerability is high, as it allows an attacker to exploit the kernel's file handling code and obtain unauthorized access to sensitive information.", "Mitigation Strategies": "Implement kernel-level access controls and monitor kernel activity to mitigate this vulnerability.", "Recommendations": "Recommendations include implementing kernel-level access controls, monitoring kernel activity, and conducting regular security audits.", "Conclusions": "In conclusion, the Linux kernel NFSv4 file handling vulnerability (CVE-2023-52909) is a critical vulnerability that requires immediate attention, and implementing timely mitigation strategies is crucial to preventing data breaches and protecting business operations."}}