{"id": "CVE-2024-35181", "sourceIdentifier": "security-advisories@github.com", "published": "2024-05-27T19:15:08.620", "lastModified": "2024-05-28T12:39:28.377", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "Meshery is an open source, cloud native manager that enables the design and management of Kubernetes-based infrastructure and applications. A SQL injection vulnerability in Meshery prior to version 0.7.22 may lead to arbitrary file write by using a SQL injection stacked queries payload, and the ATTACH DATABASE command. Additionally, attackers may be able to access and modify any data stored in the database, like performance profiles (which may contain session cookies), Meshery application data, or any Kubernetes configuration added to the system. The Meshery project exposes the function `GetMeshSyncResourcesKinds` at the API URL `/api/system/meshsync/resources/kinds`. The order query parameter is directly used to build a SQL query in `meshync_handler.go`. Version 0.7.22 fixes this issue."}, {"lang": "es", "value": "Meshery es un administrador nativo de la nube de c\u00f3digo abierto que permite el dise\u00f1o y la administraci\u00f3n de infraestructura y aplicaciones basadas en Kubernetes. Una vulnerabilidad de inyecci\u00f3n SQL en Meshery anterior a la versi\u00f3n 0.7.22 puede provocar la escritura arbitraria de archivos mediante el uso de un payload de consultas apiladas de inyecci\u00f3n SQL y el comando ATTACH DATABASE. Adem\u00e1s, los atacantes pueden acceder y modificar cualquier dato almacenado en la base de datos, como perfiles de rendimiento (que pueden contener cookies de sesi\u00f3n), datos de la aplicaci\u00f3n Meshery o cualquier configuraci\u00f3n de Kubernetes agregada al sistema. El proyecto Meshery expone la funci\u00f3n `GetMeshSyncResourcesKinds` en la URL de API `/api/system/meshsync/resources/kinds`. El par\u00e1metro de consulta de pedido se utiliza directamente para crear una consulta SQL en `meshync_handler.go`. La versi\u00f3n 0.7.22 soluciona este problema."}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 4.2}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-89"}]}], "references": [{"url": "https://github.com/meshery/meshery/blob/b331f45c9083d7abf6b90105072b04cd22473de7/server/handlers/meshsync_handler.go#L187", "source": "security-advisories@github.com"}, {"url": "https://github.com/meshery/meshery/commit/8e995ce21af02d32ef61689c1e1748a745917f13", "source": "security-advisories@github.com"}, {"url": "https://github.com/meshery/meshery/commit/b55f6064d0c6a965aee38f30281f99da7dc4420c", "source": "security-advisories@github.com"}, {"url": "https://github.com/meshery/meshery/pull/10207", "source": "security-advisories@github.com"}, {"url": "https://github.com/meshery/meshery/pull/10280", "source": "security-advisories@github.com"}, {"url": "https://securitylab.github.com/advisories/GHSL-2024-013_GHSL-2024-014_Meshery/", "source": "security-advisories@github.com"}], "techniques": [{"techniqueID": "T1059.006", "comment": "CVE-2024-35181 - This is a SQL injection vulnerability that allows attackers to execute arbitrary queries, leading to arbitrary file write and data access. This is relevant because it provides an entry point for attackers to manipulate the system files and escalate privileges. To defend against this, implement input validation and sanitization, and restrict database access to authorized users."}, {"techniqueID": "T1027.001", "comment": "CVE-2024-35181 - This vulnerability is exploitable by an attacker who can send a malicious request to the affected Meshery API endpoint. The attacker can manipulate the query parameter to inject SQL code, allowing them to access and modify sensitive data. To defend against this, implement secure coding practices and regular security audits."}, {"techniqueID": "T1068", "comment": "CVE-2024-35181 - This vulnerability allows an attacker to access and modify sensitive data stored in the Meshery database. This is relevant because it provides an opportunity for attackers to steal or destroy important data. To defend against this, implement robust backups and data encryption, and regularly monitor database access."}], "stix_bundle": {"objects": [{"type": "attack-pattern", "id": "attack-pattern--1", "name": "Meshery SQL Injection Vulnerability"}, {"type": "indicative", "id": "indicative--1", "name": "Meshery SQL Injection"}, {"type": "tactics", "id": "tactics--1", "name": "Lateral Movement"}, {"type": "techniques", "id": "techniques--1", "name": "T1059.006", "description": "This is a SQL injection vulnerability that allows attackers to execute arbitrary queries, leading to arbitrary file write and data access."}, {"type": "grouping", "id": "grouping--1", "name": "Meshery SQL Injection Attack"}, {"type": "indicator--created", "id": "indicator--1", "name": "Meshery SQL Injection Indicator"}, {"type": "identity", "id": "identity--1", "name": "Meshery SQL Injection"}, {"type": "course-of-action", "id": "course-of-action--1", "name": "Regular Security Audits"}, {"type": "note", "id": "note--1", "content": "Input validation and sanitization should be implemented to prevent SQL injection attacks."}], "relationships": [{"id": "r1", "source_ref": "attack-pattern--1", "target_ref": "indicative--1", "type": "indicates"}, {"id": "r2", "source_ref": "indicative--1", "target_ref": "tactics--1", "type": "tactic-used"}, {"id": "r3", "source_ref": "techniques--1", "target_ref": "grouping--1", "type": "technique-used"}, {"id": "r4", "source_ref": "grouping--1", "target_ref": "indicator--1", "type": "indicator-generated"}, {"id": "r5", "source_ref": "identity--1", "target_ref": "course-of-action--1", "type": "mitigates"}, {"id": "r6", "source_ref": "note--1", "target_ref": "techniques--1", "type": "notes"}]}, "technical_analysis": {"Introduction": "Meshery is an open-source cloud native manager for Kubernetes-based infrastructure and applications. A SQL injection vulnerability in Meshery prior to version 0.7.22 allows attackers to execute arbitrary queries, leading to arbitrary file write and data access.", "Impact and Scope": "The vulnerability is exploitable by any user who can send a malicious request to the affected Meshery API endpoint. The attack vector is HIGH, and the attack complexity is LOW.", "Related MITRE ATT&CK Techniques": "T1059.006, T1027.001, T1068", "Technical Details": "The vulnerability occurs when the `GetMeshSyncResourcesKinds` function in Meshery's `meshync_handler.go` file is called with an unvalidated input parameter. This allows an attacker to inject SQL code and execute arbitrary queries.", "Detection": "Detecting this vulnerability requires monitoring for unusual database requests and suspicious activity in the database logs.", "Mitigation": "To mitigate this vulnerability, implement input validation and sanitization, restrict database access to authorized users, and regularly monitor database access.", "Conclusion": "This vulnerability in Meshery allows attackers to execute arbitrary queries, leading to arbitrary file write and data access. To defend against this, implement secure coding practices and regular security audits."}, "executive_analysis": {"Overview": "Meshery has a SQL injection vulnerability that allows attackers to execute arbitrary queries, leading to arbitrary file write and data access.", "Business Impact": "This vulnerability can result in unauthorized access to sensitive data and the ability to manipulate the system files. This can lead to significant business disruption and financial loss.", "Technical Impact": "The vulnerability allows an attacker to execute arbitrary queries, leading to arbitrary file write and data access. This can result in data loss or corruption and system compromise.", "Mitigation Strategies": "Implement input validation and sanitization, restrict database access to authorized users, and regularly monitor database access.", "Recommendations": "Regular security audits, secure coding practices, and input validation and sanitization should be implemented to prevent SQL injection attacks.", "Conclusions": "This vulnerability in Meshery highlights the importance of implementing robust security measures to prevent attacks. We recommend implementing the mitigation strategies outlined above to prevent future attacks."}}