{"id": "CVE-2020-7471", "sourceIdentifier": "cve@mitre.org", "published": "2020-02-03T12:15:26.993", "lastModified": "2023-11-07T03:26:06.483", "vulnStatus": "Modified", "cveTags": [], "descriptions": [{"lang": "en", "value": "Django 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3 allows SQL Injection if untrusted data is used as a StringAgg delimiter (e.g., in Django applications that offer downloads of data as a series of rows with a user-specified column delimiter). By passing a suitably crafted delimiter to a contrib.postgres.aggregates.StringAgg instance, it was possible to break escaping and inject malicious SQL."}, {"lang": "es", "value": "Django versiones 1.11 anteriores a 1.11.28, versiones 2.2 anteriores a 2.2.10 y versiones 3.0 anteriores a 3.0.3, permite una Inyecci\u00f3n SQL si se usan datos no confiables como un delimitador de StringAgg (por ejemplo, en aplicaciones Django que ofrecen descargas de datos como una serie de filas con un delimitador de columna especificado por el usuario). Al pasar un delimitador apropiadamente dise\u00f1ado a una instancia contrib.postgres.aggregates.StringAgg, fue posible romper el escape e inyectar SQL malicioso."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11", "versionEndExcluding": "1.11.28", "matchCriteriaId": "00FE8079-CAF7-494D-BC2A-0B964A883EA6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2", "versionEndExcluding": "2.2.10", "matchCriteriaId": "4771CEA7-2ECE-4620-98E0-D5F1AA91889C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.0", "versionEndExcluding": "3.0.3", "matchCriteriaId": "BC272D38-BBBC-4440-A120-C2D60CC42A12"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2020/02/03/1", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://docs.djangoproject.com/en/3.0/releases/security/", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/django/django/commit/eb31d845323618d688ad429479c6dda973056136", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://groups.google.com/forum/#%21topic/django-announce/X45S86X5bZI", "source": "cve@mitre.org"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/4A2AP4T7RKPBCLTI2NNQG3T6MINDUUMZ/", "source": "cve@mitre.org"}, {"url": "https://seclists.org/bugtraq/2020/Feb/30", "source": "cve@mitre.org"}, {"url": "https://security.gentoo.org/glsa/202004-17", "source": "cve@mitre.org"}, {"url": "https://security.netapp.com/advisory/ntap-20200221-0006/", "source": "cve@mitre.org"}, {"url": "https://usn.ubuntu.com/4264-1/", "source": "cve@mitre.org"}, {"url": "https://www.debian.org/security/2020/dsa-4629", "source": "cve@mitre.org"}, {"url": "https://www.djangoproject.com/weblog/2020/feb/03/security-releases/", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://www.openwall.com/lists/oss-security/2020/02/03/1", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}], "techniques": [{"techniqueID": "TA0001", "comment": "SQL Injection - CVE-2020-7471 - Untrusted user input is used as a delimiter in StringAgg which can lead to SQL Injection. This can be mitigated by implementing proper validation and sanitization of user input."}, {"techniqueID": "TA0003", "comment": "Command and Control - CVE-2020-7471 - The vulnerable application may allow attackers to execute malicious commands to gain control. This can be mitigated by implementing proper access controls and validating user input."}, {"techniqueID": "TA0008", "comment": "Exfiltration Over Command and Control - CVE-2020-7471 - The vulnerable application may allow attackers to exfiltrate sensitive data. This can be mitigated by implementing proper data encryption and access controls."}, {"techniqueID": "TA0040", "comment": "Data Staged - CVE-2020-7471 - The vulnerable application may allow attackers to stage data on the system. This can be mitigated by implementing proper data validation and access controls."}], "stix_bundle": {"type": "bundle", "id": "cve-2020-7471-stix-bundle", "title": "CVE-2020-7471 - Django SQL Injection Vulnerability", "created": "2023-11-07T03:26:06.483", "modified": "2023-11-07T03:26:06.483", "objects": {"vulnerability": {"type": "vulnerability", "id": "cve-2020-7471", "title": "Django SQL Injection Vulnerability", "description": "CVE-2020-7471 - Django 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3 allows SQL Injection if untrusted data is used as a StringAgg delimiter.", "cvssscore": 9.8, "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "cvssv2": "AV:N/AC:L/Au:N/C:P/I:P/A:P"}, "technique": {"type": "technique", "id": "ta0001", "title": "SQL Injection", "description": "The technique involves injecting malicious SQL code to manipulate the database.", "mitigated_by": "Implement proper validation and sanitization of user input."}, "course_of_action": {"type": "course-of-action", "id": "coa-2020-7471", "title": "Mitigation Strategy", "description": "Implement proper validation and sanitization of user input to prevent SQL Injection.", "mitigates": ["ta0001"]}, "defense": {"type": "defense", "id": "d-2020-7471", "title": "Defense against CVE-2020-7471", "description": "Implement proper validation and sanitization of user input to prevent SQL Injection.", "mitigates": ["ta0001"]}}, "relationships": {"vulnerability_to_technique": {"type": "vulnerability_to_technique", "id": "vt-2020-7471", "vulnerability": "cve-2020-7471", "technique": "ta0001"}, "technique_to_course_of_action": {"type": "technique_to_course_of_action", "id": "tcoa-2020-7471", "technique": "ta0001", "course_of_action": "coa-2020-7471"}, "technique_to_defense": {"type": "technique_to_defense", "id": "td-2020-7471", "technique": "ta0001", "defense": "d-2020-7471"}}}, "technical_analysis": {"Introduction": "The vulnerability affects Django versions 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3. It allows untrusted data to be used as a delimiter in StringAgg, which can lead to SQL Injection.", "Impact and Scope": "The vulnerability has a CVSS score of 9.8, indicating a high severity. It affects a wide range of users and applications, including Django developers and users.", "Related MITRE ATT&CK Techniques": "The vulnerability is related to several MITRE ATT&CK techniques, including TA0001 (SQL Injection), TA0003 (Command and Control), and TA0008 (Exfiltration Over Command and Control).", "Technical Details": "The vulnerability is caused by the use of untrusted data as a delimiter in StringAgg. This allows attackers to inject malicious SQL code and manipulate the database.", "Detection": "Detection of the vulnerability can be done by implementing proper validation and sanitization of user input.", "Mitigation": "Mitigation of the vulnerability can be done by implementing proper validation and sanitization of user input.", "Conclusion": "In conclusion, the vulnerability is a high-severity flaw that affects Django versions 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3. It allows untrusted data to be used as a delimiter in StringAgg, which can lead to SQL Injection."}, "executive_analysis": {"Overview": "The vulnerability is a high-severity flaw that affects Django versions 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3. It allows untrusted data to be used as a delimiter in StringAgg, which can lead to SQL Injection.", "Business Impact": "The vulnerability has a significant business impact, as it can compromise sensitive data and lead to reputational damage.", "Technical Impact": "The vulnerability has a significant technical impact, as it allows attackers to inject malicious SQL code and manipulate the database.", "Mitigation Strategies": "Mitigation strategies include implementing proper validation and sanitization of user input, updating to affected versions, and restricting access to the database.", "Recommendations": "Recommendations include prioritizing vulnerability patching and implementing proper security controls to prevent SQL Injection.", "Conclusions": "In conclusion, the vulnerability is a high-severity flaw that requires immediate attention and mitigation. It is essential to update to affected versions, implement proper security controls, and prioritize vulnerability patching."}}