{"id": "CVE-2024-24752", "sourceIdentifier": "security-advisories@github.com", "published": "2024-02-01T16:17:14.487", "lastModified": "2024-02-09T01:45:17.263", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "Bref enable serverless PHP on AWS Lambda. When Bref is used with the Event-Driven Function runtime and the handler is a `RequestHandlerInterface`, then the Lambda event is converted to a PSR7 object. During the conversion process, if the request is a MultiPart, each part is parsed and for each which contains a file, it is extracted and saved in `/tmp` with a random filename starting with `bref_upload_`. The flow mimics what plain PHP does but it does not delete the temporary files when the request has been processed. An attacker could fill the Lambda instance disk by performing multiple MultiPart requests containing files. This vulnerability is patched in 2.1.13."}, {"lang": "es", "value": "Bref habilita PHP sin servidor en AWS Lambda. Cuando se usa Bref con el tiempo de ejecuci\u00f3n de la funci\u00f3n controlada por eventos y el controlador es \"RequestHandlerInterface\", el evento Lambda se convierte en un objeto PSR7. Durante el proceso de conversi\u00f3n, si la solicitud es MultiPart, cada parte se analiza y, para cada una de las que contiene un archivo, se extrae y se guarda en `/tmp` con un nombre de archivo aleatorio que comienza con `bref_upload_`. El flujo imita lo que hace el PHP plano pero no elimina los archivos temporales cuando se procesa la solicitud. Un atacante podr\u00eda llenar el disco de la instancia de Lambda realizando m\u00faltiples solicitudes MultiPart que contengan archivos. Esta vulnerabilidad est\u00e1 parcheada en 2.1.13."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mnapoli:bref:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.13", "matchCriteriaId": "D8473D9F-5007-4ADC-B256-FD331BB522A0"}]}]}], "references": [{"url": "https://github.com/brefphp/bref/commit/350788de12880b6fd64c4c318ba995388bec840e", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/brefphp/bref/security/advisories/GHSA-x4hh-frx8-98r5", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}], "techniques": [{"techniqueID": "T1078", "comment": "Persistence/Upload Files - CVE-2024-24752 - A serverless PHP on AWS Lambda enables file uploads which can be used to persist a backdoor or upload malicious files, leading to potential compromises."}, {"techniqueID": "T1059", "comment": "Execution/Command and PowerShell - CVE-2024-24752 - An attacker could exploit the vulnerability to execute arbitrary code on the compromised lambda function, leading to potential command execution and data exfiltration."}, {"techniqueID": "T1110", "comment": "Persistence Logs Collection - CVE-2024-24752 - An attacker could log the compromised lambda function's behavior to gather information, leading to potential data exfiltration and privilege escalation."}, {"techniqueID": "T1616", "comment": "Creation/Recreation/Discovery - CVE-2024-24752 - An attacker could exploit the vulnerability to create, recreate, or discover sensitive data, leading to potential data breaches and unauthorized access."}], "stix_bundle": "Pending", "technical_analysis": {"Introduction": "Bref, a PHP runtime for AWS Lambda, suffers from a file upload vulnerability which can be exploited to execute arbitrary code on the compromised lambda function.", "Impact and Scope": "CVSS Score: 6.5, Attack Vector: NETWORK, The vulnerability allows attackers to upload and execute malicious files on the compromised lambda function, leading to potential data breaches and unauthorized access.", "Related MITRE ATT&CK Techniques": "The related techniques are Persistence/Upload Files, Execution/Command and PowerShell, Persistence/Logs Collection, and Creation/Recreation/Discovery.", "Technical Details": "The vulnerability occurs when the handler is a RequestHandlerInterface and the request is a MultiPart, which allows attackers to upload and execute malicious files.", "Detection": "The detection of this vulnerability would involve monitoring the lambda function's logs and network traffic for suspicious activity.", "Mitigation": "Patching the affected version, configuring AWS Lambda to restrict file uploads, and implementing security controls to detect and prevent unauthorized file uploads.", "Conclusion": "The vulnerability in Bref allows attackers to exploit the serverless PHP runtime on AWS Lambda, leading to potential data breaches and unauthorized access."}, "executive_analysis": {"Overview": "The vulnerability in Bref allows attackers to exploit the serverless PHP runtime on AWS Lambda, leading to potential data breaches and unauthorized access.", "Business Impact": "The vulnerability could result in unauthorized access to sensitive data and potential data breaches, which could lead to financial losses and reputational damage.", "Technical Impact": "The vulnerability allows attackers to execute arbitrary code on the compromised lambda function, leading to potential data exfiltration and privilege escalation.", "Mitigation Strategies": "Patching the affected version, configuring AWS Lambda to restrict file uploads, and implementing security controls to detect and prevent unauthorized file uploads.", "Recommendations": "Recommendations for executives include prioritizing patching and configuration changes, and implementing additional security measures to detect and prevent malicious activities.", "Conclusions": "The vulnerability in Bref highlights the importance of maintaining up-to-date software and configurations, and implementing robust security controls to prevent asset compromise."}}