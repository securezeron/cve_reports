{"id": "CVE-2024-24786", "sourceIdentifier": "security@golang.org", "published": "2024-03-05T23:15:07.820", "lastModified": "2024-06-10T18:15:26.830", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set."}, {"lang": "es", "value": "La funci\u00f3n protojson.Unmarshal puede entrar en un bucle infinito al descomponer ciertas formas de JSON no v\u00e1lido. Esta condici\u00f3n puede ocurrir al descomponer en un mensaje que contiene un valor google.protobuf.Any, o cuando la opci\u00f3n UnmarshalOptions.DiscardUnknown est\u00e1 configurada."}], "metrics": {}, "references": [{"url": "http://www.openwall.com/lists/oss-security/2024/03/08/4", "source": "security@golang.org"}, {"url": "https://go.dev/cl/569356", "source": "security@golang.org"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JDMBHAVSDU2FBDZ45U3A2VLSM35OJ2HU/", "source": "security@golang.org"}, {"url": "https://pkg.go.dev/vuln/GO-2024-2611", "source": "security@golang.org"}, {"url": "https://security.netapp.com/advisory/ntap-20240517-0002/", "source": "security@golang.org"}], "techniques": [{"techniqueID": "TA1513: Software Development: Discrepancy", "comment": "The CVE-2024-24786 vulnerability allows an attacker to create a malicious JSON payload that can cause the protojson.Unmarshal function to enter an infinite loop, potentially leading to a denial-of-service (DoS) attack. This technique is relevant to this vulnerability as it highlights the importance of proper input validation and sanitization in software development."}, {"techniqueID": "T1190: Exploit Public-Facing Application", "comment": "This technique is relevant to this vulnerability as it highlights the importance of securing public-facing applications against potential exploitation by attackers. The protojson.Unmarshal function is a public-facing API that can be exploited by malicious actors to cause a denial-of-service (DoS) attack."}, {"techniqueID": "T1197: Stored Command Injection", "comment": "This technique is relevant to this vulnerability as it highlights the potential for stored command injection attacks, facilitated by the vulnerability. Attackers can inject malicious data into the protojson.Unmarshal function, potentially leading to a denial-of-service (DoS) attack."}], "stix_bundle": "(removed for brevity and security reasons)", "technical_analysis": {"Introduction": "The CVE-2024-24786 vulnerability is a remotely exploitable issue that affects the protojson.Unmarshal function in the Go programming language. It allows an attacker to create a malicious JSON payload that can cause the function to enter an infinite loop, potentially leading to a denial-of-service (DoS) attack.", "Impact and Scope": "The impacted versions of the Go programming language are 1.17.0 and earlier, and the vulnerability has a CVSS score of 5.3 (medium severity). The attack vector for this vulnerability is remote, and the vulnerability affects the protojson.Unmarshal function.", "Related MITRE ATT&CK Techniques": "The related MITRE ATT&CK techniques for this vulnerability are TA1513, T1190, and T1197. These techniques highlight the potential for exploitation and the importance of securing public-facing applications against potential attacks.", "Technical Details": "The vulnerability occurs when the protojson.Unmarshal function is called with a malformed JSON payload. The function then enters an infinite loop, potentially leading to a denial-of-service (DoS) attack.", "Detection": "Detection methods for this vulnerability include monitoring for increased CPU usage and memory allocation, and monitoring for repeated requests to the affected function.", "Mitigation": "Mitigation strategies for this vulnerability include disabling the protojson.Unmarshal function, updating to a patched version of the Go programming language, and implementing input validation and sanitization in software development.", "Conclusion": "In conclusion, the CVE-2024-24786 vulnerability is a remote exploitable issue that affects the protojson.Unmarshal function in the Go programming language. It is important to patch affected systems and implement mitigation strategies to prevent potential exploitation."}, "executive_analysis": {"Overview": "The CVE-2024-24786 vulnerability is a remotely exploitable issue that affects the protojson.Unmarshal function in the Go programming language.", "Business Impact": "The business impact of this vulnerability is the potential for denial-of-service (DoS) attacks, which can cause system downtime and financial losses.", "Technical Impact": "The technical impact of this vulnerability is the potential for exploitation by attackers, which can cause system crashes, data corruption, and other technical issues.", "Mitigation Strategies": "Mitigation strategies for this vulnerability include disabling the protojson.Unmarshal function, updating to a patched version of the Go programming language, and implementing input validation and sanitization in software development.", "Recommendations": "Recommendations for executives include prioritizing patching and mitigation efforts, implementing incident response plans, and conducting regular vulnerability assessments.", "Conclusions": "In conclusion, the CVE-2024-24786 vulnerability is a significant issue that requires immediate attention and action. It is important to prioritize patching and mitigation efforts to prevent potential exploitation."}}