{"id": "CVE-2024-26698", "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67", "published": "2024-04-03T15:15:52.933", "lastModified": "2024-06-25T22:15:21.233", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nhv_netvsc: Fix race condition between netvsc_probe and netvsc_remove\n\nIn commit ac5047671758 (\"hv_netvsc: Disable NAPI before closing the\nVMBus channel\"), napi_disable was getting called for all channels,\nincluding all subchannels without confirming if they are enabled or not.\n\nThis caused hv_netvsc getting hung at napi_disable, when netvsc_probe()\nhas finished running but nvdev->subchan_work has not started yet.\nnetvsc_subchan_work() -> rndis_set_subchannel() has not created the\nsub-channels and because of that netvsc_sc_open() is not running.\nnetvsc_remove() calls cancel_work_sync(&nvdev->subchan_work), for which\nnetvsc_subchan_work did not run.\n\nnetif_napi_add() sets the bit NAPI_STATE_SCHED because it ensures NAPI\ncannot be scheduled. Then netvsc_sc_open() -> napi_enable will clear the\nNAPIF_STATE_SCHED bit, so it can be scheduled. napi_disable() does the\nopposite.\n\nNow during netvsc_device_remove(), when napi_disable is called for those\nsubchannels, napi_disable gets stuck on infinite msleep.\n\nThis fix addresses this problem by ensuring that napi_disable() is not\ngetting called for non-enabled NAPI struct.\nBut netif_napi_del() is still necessary for these non-enabled NAPI struct\nfor cleanup purpose.\n\nCall trace:\n[  654.559417] task:modprobe        state:D stack:    0 pid: 2321 ppid:  1091 flags:0x00004002\n[  654.568030] Call Trace:\n[  654.571221]  <TASK>\n[  654.573790]  __schedule+0x2d6/0x960\n[  654.577733]  schedule+0x69/0xf0\n[  654.581214]  schedule_timeout+0x87/0x140\n[  654.585463]  ? __bpf_trace_tick_stop+0x20/0x20\n[  654.590291]  msleep+0x2d/0x40\n[  654.593625]  napi_disable+0x2b/0x80\n[  654.597437]  netvsc_device_remove+0x8a/0x1f0 [hv_netvsc]\n[  654.603935]  rndis_filter_device_remove+0x194/0x1c0 [hv_netvsc]\n[  654.611101]  ? do_wait_intr+0xb0/0xb0\n[  654.615753]  netvsc_remove+0x7c/0x120 [hv_netvsc]\n[  654.621675]  vmbus_remove+0x27/0x40 [hv_vmbus]"}, {"lang": "es", "value": "En el kernel de Linux, se resolvi\u00f3 la siguiente vulnerabilidad: hv_netvsc: corrige la condici\u00f3n de ejecuci\u00f3n entre netvsc_probe y netvsc_remove En el commit ac5047671758 (\"hv_netvsc: deshabilite NAPI antes de cerrar el canal VMBus\"), se llamaba a napi_disable para todos los canales, incluidos todos los subcanales sin confirmando si est\u00e1n habilitados o no. Esto provoc\u00f3 que hv_netvsc se colgara en napi_disable, cuando netvsc_probe() termin\u00f3 de ejecutarse pero nvdev-&gt;subchan_work a\u00fan no se inici\u00f3. netvsc_subchan_work() -&gt; rndis_set_subchannel() no ha creado los subcanales y por eso netvsc_sc_open() no se est\u00e1 ejecutando. netvsc_remove() llama a cancel_work_sync(&amp;nvdev-&gt;subchan_work), para lo cual netvsc_subchan_work no se ejecut\u00f3. netif_napi_add() establece el bit NAPI_STATE_SCHED porque garantiza que NAPI no se pueda programar. Luego netvsc_sc_open() -&gt; napi_enable borrar\u00e1 el bit NAPIF_STATE_SCHED, para que pueda programarse. napi_disable() hace lo contrario. Ahora, durante netvsc_device_remove(), cuando se llama a napi_disable para esos subcanales, napi_disable se atasca en msleep infinito. Esta soluci\u00f3n soluciona este problema garantizando que no se llame a napi_disable() para una estructura NAPI no habilitada. Pero netif_napi_del() sigue siendo necesario para estas estructuras NAPI no habilitadas con fines de limpieza. Rastreo de llamadas: [654.559417] tarea:modprobe estado:D pila: 0 pid: 2321 ppid: 1091 banderas:0x00004002 [654.568030] Rastreo de llamadas: [654.571221]  [654.573790] __schedule+0x2d6/0x960 [ 65 4.577733] horario+0x69 /0xf0 [654.581214] Schedule_timeout+0x87/0x140 [654.585463]? __bpf_trace_tick_stop+0x20/0x20 [ 654.590291] msleep+0x2d/0x40 [ 654.593625] napi_disable+0x2b/0x80 [ 654.597437] netvsc_device_remove+0x8a/0x1f0 [hv_netvsc] [ 6 54.603935] rndis_filter_device_remove+0x194/0x1c0 [hv_netvsc] [654.611101]? do_wait_intr+0xb0/0xb0 [ 654.615753] netvsc_remove+0x7c/0x120 [hv_netvsc] [ 654.621675] vmbus_remove+0x27/0x40 [hv_vmbus]"}], "metrics": {}, "references": [{"url": "https://git.kernel.org/stable/c/0e8875de9dad12805ff66e92cd5edea6a421f1cd", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/22a77c0f5b8233237731df3288d067af51a2fd7b", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/48a8ccccffbae10c91d31fc872db5c31aba07518", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/7656372ae190e54e8c8cf1039725a5ea59fdf84a", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/9ec807e7b6f5fcf9499f3baa69f254bb239a847f", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/e0526ec5360a48ad3ab2e26e802b0532302a7e11", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}], "techniques": [{"techniqueID": "TA0008", "comment": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H - The vulnerability in the Linux kernel allows an attacker with unauthenticated access to cause a denial-of-service (DoS) condition, which can lead to a hang or a crash of the kernel. This vulnerability can be exploited by an attacker to gain unauthorized access to the system, or to cause a DoS condition. The vulnerability can be mitigated by disabling the hv_netvsc module, or by upgrading the kernel to a version that is not affected by this vulnerability."}, {"techniqueID": "TA0010", "comment": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H - The vulnerability in the Linux kernel allows an attacker with unauthenticated access to cause a denial-of-service (DoS) condition, which can lead to a hang or a crash of the kernel. This vulnerability can be exploited by an attacker to gain unauthorized access to the system, or to cause a DoS condition. The vulnerability can be mitigated by disabling the hv_netvsc module, or by upgrading the kernel to a version that is not affected by this vulnerability."}], "stix_bundle": {"bundle_id": "b0a580a4-44f9-4f9f-8a55-d4a4548e77bf", "bundle_label": "CVE-2024-26698 Bundle", "Bundle_Mangement": [{"id": "b0a580a4-44f9-4f9f-8a55-d4a4548e77bf", "type": "bundle"}], "custom_properties": [{"name": "cvss_score", "value": "7.0", "xsi:type": "xsd:decimal"}, {"name": "cvss_vector", "value": "AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "xsi:type": "xsd:string"}], "indicator": [{"id": "ebd46ced-4a5a-4a4c-89c3-d5f79e73f42d", "type": "indicator", "name": "Linux_kernel_hv_netvsc_vulnerability", "description": "Detection of Linux kernel hv_netvsc vulnerability", "created_by_ref": "user: admin", "created": "2024-06-25T22:15:21.233", "modified": "2024-06-25T22:15:21.233", "note": "This is a signature for detecting the Linux kernel hv_netvsc vulnerability"}], "observable": [{"id": "ebd46ced-4a5a-4a4c-89c3-d5f79e73f42d", "type": "observable", "name": "Linux_kernel_hv_netvsc_vulnerability", "description": "Detection of Linux kernel hv_netvsc vulnerability", "created_by_ref": "user: admin", "created": "2024-06-25T22:15:21.233", "modified": "2024-06-25T22:15:21.233", "note": "This is a signature for detecting the Linux kernel hv_netvsc vulnerability"}], "relationship": [{"id": "ebd46ced-4a5a-4a4c-89c3-d5f79e73f42d", "type": "relationship", "source_ref": "ebd46ced-4a5a-4a4c-89c3-d5f79e73f42d", "target_ref": "b0a580a4-44f9-4f9f-8a55-d4a4548e77bf", "relationship_type": "indicates"}], "tag": [{"id": "ebd46ced-4a5a-4a4c-89c3-d5f79e73f42d", "type": "tag", "name": "linux_kernel_vulnerability", "description": "Linux kernel vulnerability detected", "created_by_ref": "user: admin", "created": "2024-06-25T22:15:21.233", "modified": "2024-06-25T22:15:21.233", "note": "This is a tag for detecting Linux kernel vulnerabilities"}]}, "technical_analysis": {"Introduction": "The Linux kernel hv_netvsc vulnerability allows an attacker to cause a denial-of-service (DoS) condition, which can lead to a hang or a crash of the kernel.", "Impact and Scope": "The scope of this vulnerability is limited to the Linux kernel and its dependencies. The impact of this vulnerability is significant, as it allows an attacker to cause a denial-of-service (DoS) condition, which can lead to a hang or a crash of the kernel.", "Related MITRE ATT&CK Techniques": "TA0008: Initial Access, TA0010: Execution", "Technical Details": "The vulnerability is caused by a race condition between the netvsc_probe and netvsc_remove functions, which can lead to a hang or a crash of the kernel.", "Detection": "Detection of this vulnerability can be done by monitoring system logs for kernel errors or by using a vulnerability scanning tool.", "Mitigation": "Mitigation of this vulnerability can be done by disabling the hv_netvsc module or by upgrading the kernel to a version that is not affected by this vulnerability.", "Conclusion": "In conclusion, the Linux kernel hv_netvsc vulnerability is a significant vulnerability that can lead to a denial-of-service (DoS) condition, which can cause a hang or a crash of the kernel. Detection and mitigation of this vulnerability is crucial to prevent exploitation by attackers."}, "executive_analysis": {"Overview": "This analysis provides an overview of the Linux kernel hv_netvsc vulnerability and its implications for the security of the Linux kernel.", "Business Impact": "The business impact of this vulnerability is significant, as it can lead to a denial-of-service (DoS) condition, which can cause downtime and loss of revenue.", "Technical Impact": "The technical impact of this vulnerability is significant, as it can cause a hang or a crash of the kernel, which can lead to system instability and downtime.", "Mitigation Strategies": "Mitigation strategies for this vulnerability include disabling the hv_netvsc module or upgrading the kernel to a version that is not affected by this vulnerability.", "Recommendations": "Recommended actions for executives include implementing mitigation strategies, monitoring system logs for kernel errors, and conducting regular vulnerability scanning.", "Conclusions": "In conclusion, the Linux kernel hv_netvsc vulnerability is a significant vulnerability that requires immediate attention and action to prevent exploitation by attackers."}}