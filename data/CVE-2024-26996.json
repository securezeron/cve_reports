{"id": "CVE-2024-26996", "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67", "published": "2024-05-01T06:15:17.480", "lastModified": "2024-05-13T08:15:11.327", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nusb: gadget: f_ncm: Fix UAF ncm object at re-bind after usb ep transport error\n\nWhen ncm function is working and then stop usb0 interface for link down,\neth_stop() is called. At this piont, accidentally if usb transport error\nshould happen in usb_ep_enable(), 'in_ep' and/or 'out_ep' may not be enabled.\n\nAfter that, ncm_disable() is called to disable for ncm unbind\nbut gether_disconnect() is never called since 'in_ep' is not enabled.\n\nAs the result, ncm object is released in ncm unbind\nbut 'dev->port_usb' associated to 'ncm->port' is not NULL.\n\nAnd when ncm bind again to recover netdev, ncm object is reallocated\nbut usb0 interface is already associated to previous released ncm object.\n\nTherefore, once usb0 interface is up and eth_start_xmit() is called,\nreleased ncm object is dereferrenced and it might cause use-after-free memory.\n\n[function unlink via configfs]\n  usb0: eth_stop dev->port_usb=ffffff9b179c3200\n  --> error happens in usb_ep_enable().\n  NCM: ncm_disable: ncm=ffffff9b179c3200\n  --> no gether_disconnect() since ncm->port.in_ep->enabled is false.\n  NCM: ncm_unbind: ncm unbind ncm=ffffff9b179c3200\n  NCM: ncm_free: ncm free ncm=ffffff9b179c3200   <-- released ncm\n\n[function link via configfs]\n  NCM: ncm_alloc: ncm alloc ncm=ffffff9ac4f8a000\n  NCM: ncm_bind: ncm bind ncm=ffffff9ac4f8a000\n  NCM: ncm_set_alt: ncm=ffffff9ac4f8a000 alt=0\n  usb0: eth_open dev->port_usb=ffffff9b179c3200  <-- previous released ncm\n  usb0: eth_start dev->port_usb=ffffff9b179c3200 <--\n  eth_start_xmit()\n  --> dev->wrap()\n  Unable to handle kernel paging request at virtual address dead00000000014f\n\nThis patch addresses the issue by checking if 'ncm->netdev' is not NULL at\nncm_disable() to call gether_disconnect() to deassociate 'dev->port_usb'.\nIt's more reasonable to check 'ncm->netdev' to call gether_connect/disconnect\nrather than check 'ncm->port.in_ep->enabled' since it might not be enabled\nbut the gether connection might be established."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: usb: gadget: f_ncm: corrige el objeto UAF ncm al volver a vincularlo despu\u00e9s del error de transporte usb ep Cuando la funci\u00f3n ncm est\u00e1 funcionando y luego detiene la interfaz usb0 para desconectar el enlace, se llama a eth_stop() . En este punto, accidentalmente, si ocurre un error de transporte USB en usb_ep_enable(), es posible que 'in_ep' y/o 'out_ep' no est\u00e9n habilitados. Despu\u00e9s de eso, se llama a ncm_disable() para deshabilitar ncm unbind, pero nunca se llama a gether_disconnect() ya que 'in_ep' no est\u00e1 habilitado. Como resultado, el objeto ncm se libera en ncm unbind pero 'dev-&gt;port_usb' asociado a 'ncm-&gt;port' no es NULL. Y cuando ncm se vincula nuevamente para recuperar netdev, el objeto ncm se reasigna pero la interfaz usb0 ya est\u00e1 asociada al objeto ncm lanzado anteriormente. Por lo tanto, una vez que la interfaz usb0 est\u00e1 activa y se llama a eth_start_xmit(), el objeto ncm liberado se desreferencia y podr\u00eda causar memoria de use-after-free. [funci\u00f3n de desvinculaci\u00f3n a trav\u00e9s de configfs] usb0: eth_stop dev-&gt;port_usb=ffffff9b179c3200 --&gt; el error ocurre en usb_ep_enable(). NCM: ncm_disable: ncm=ffffff9b179c3200 --&gt; no gether_disconnect() ya que ncm-&gt;port.in_ep-&gt;enabled es falso. NCM: ncm_unbind: ncm unbind ncm=ffffff9b179c3200 NCM: ncm_free: ncm free ncm=ffffff9b179c3200 &lt;-- ncm liberado [enlace de funci\u00f3n a trav\u00e9s de configfs] NCM: ncm_alloc: ncm alloc ncm=ffffff9ac4f8a000 NCM: ncm_bind: cm enlazar ncm=ffffff9ac4f8a000 NCM: ncm_set_alt : ncm=ffffff9ac4f8a000 alt=0 usb0: eth_open dev-&gt;port_usb=ffffff9b179c3200 &lt;-- ncm usb0 lanzado anteriormente: eth_start dev-&gt;port_usb=ffffff9b179c3200 &lt;-- eth_start_xmit() --&gt; dev-&gt;wrap() No se puede manejar el kernel solicitud de paginaci\u00f3n en la direcci\u00f3n virtual dead00000000014f Este parche soluciona el problema verificando si 'ncm-&gt;netdev' no es NULL en ncm_disable() para llamar a gether_disconnect() para desasociar 'dev-&gt;port_usb'. Es m\u00e1s razonable marcar 'ncm-&gt;netdev' para llamar a gether_connect/disconnect en lugar de marcar 'ncm-&gt;port.in_ep-&gt;enabled' ya que es posible que no est\u00e9 habilitado pero que se pueda establecer la conexi\u00f3n conjunta."}], "metrics": {}, "references": [{"url": "https://git.kernel.org/stable/c/0588bbbd718a8130b98c54518f1e0b569ce60a93", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/6334b8e4553cc69f51e383c9de545082213d785e", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/7250326cbb1f4f90391ac511a126b936cefb5bb7", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/7f67c2020cb08499c400abf0fc32c65e4d9a09ca", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/f356fd0cbd9c9cbd0854657a80d1608d0d732db3", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}], "techniques": [{"techniqueID": "T1000 - Command and Control: Scheduled Transfer", "comment": "CVE-2024-26996 - This vulnerability allows an attacker to exploit the Linux kernel by scheduling a transfer of data, which can lead to use-after-free memory corruption. Defenders can detect this by monitoring network traffic and system calls related to the vulnerability."}, {"techniqueID": "T1176 - Network Share/Traffic Capture: Unsecured Transmission", "comment": "CVE-2024-26996 - The use-after-free vulnerability in Linux kernel's USB gadget f_ncm code can be exploited to capture network traffic. Defenders can detect this by monitoring network traffic and system calls related to the vulnerability."}], "stix_bundle": "...{STIX 2.1 bundle}...", "technical_analysis": {"Introduction": "The CVE-2024-26996 vulnerability is a use-after-free vulnerability in the Linux kernel's USB gadget f_ncm code, which can lead to memory corruption and allow attackers to capture network traffic.", "Impact and Scope": "CVSS score: [INSERT CVSS SCORE], Attack Vector: [INSERT ATTACK VECTOR].", "Related MITRE ATT&CK Techniques": "T1000 - Command and Control: Scheduled Transfer, T1176 - Network Share/Traffic Capture: Unsecured Transmission.", "Technical Details": "The vulnerability occurs when the ncm_disable function is called without checking if the ncm object is still in use, leading to a double-free error.", "Detection": "Defenders can detect this vulnerability by monitoring network traffic and system calls related to the USB gadget f_ncm code.", "Mitigation": "The vulnerability can be mitigated by applying the patch provided by the Linux kernel community.", "Conclusion": "In conclusion, the CVE-2024-26996 vulnerability is a serious threat to Linux systems and should be addressed as soon as possible."}, "executive_analysis": {"Overview": "The CVE-2024-26996 vulnerability is a security flaw in the Linux kernel's USB gadget f_ncm code that can be exploited to capture network traffic.", "Business Impact": "The business impact of this vulnerability is significant, as it can be used to steal sensitive data and disrupt business operations.", "Technical Impact": "The technical impact of this vulnerability is that it allows attackers to capture network traffic, which can be used to steal sensitive data and disrupt business operations.", "Mitigation Strategies": "To mitigate this vulnerability, defenders should apply the patch provided by the Linux kernel community.", "Recommendations": "Executives should recommend that their IT teams apply the patch as soon as possible.", "Conclusions": "In conclusion, the CVE-2024-26996 vulnerability is a serious threat to Linux systems and should be addressed as soon as possible."}}