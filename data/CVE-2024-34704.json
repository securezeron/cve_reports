{"id": "CVE-2024-34704", "sourceIdentifier": "security-advisories@github.com", "published": "2024-05-14T15:39:29.560", "lastModified": "2024-05-14T16:12:23.490", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "era-compiler-solidity is the ZKsync compiler for Solidity.  The problem occurred during instruction selection in the `DAGCombine` phase while visiting the XOR operation. The issue arises when attempting to fold the expression `!(x cc y)` into `(x !cc y)`. To perform this transformation, the second operand of XOR should be a constant representing the true value. However, it was incorrectly assumed that -1 represents the true value, when in fact, 1 is the correct representation, so this transformation for this case should be skipped. This vulnerability is fixed in 1.4.1."}, {"lang": "es", "value": "era-compiler-solidity es el compilador ZKsync para Solidity. El problema ocurri\u00f3 durante la selecci\u00f3n de instrucciones en la fase \"DAGCombine\" mientras se visitaba la operaci\u00f3n XOR. El problema surge al intentar doblar la expresi\u00f3n `!(x cc y)` en `(x !cc y)`. Para realizar esta transformaci\u00f3n, el segundo operando de XOR debe ser una constante que represente el valor verdadero. Sin embargo, se asumi\u00f3 incorrectamente que -1 representa el valor verdadero, cuando en realidad 1 es la representaci\u00f3n correcta, por lo que se debe omitir esta transformaci\u00f3n en este caso. Esta vulnerabilidad se solucion\u00f3 en 1.4.1."}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-682"}]}], "references": [{"url": "https://github.com/matter-labs/era-compiler-solidity/security/advisories/GHSA-22pj-7cvw-r3gc", "source": "security-advisories@github.com"}], "techniques": [{"techniqueID": "T1190", "comment": "CVE-2024-34704 - This vulnerability can be exploited by attackers to manipulate the expression value, potentially leading to code execution. Defend against this by implementing proper input validation and sanitization."}, {"techniqueID": "T1402", "comment": "CVE-2024-34704 - This vulnerability can be exploited by attackers to execute malicious code, potentially leading to further exploitation. Defend against this by implementing proper code signing and validation."}, {"techniqueID": "T1027", "comment": "CVE-2024-34704 - This vulnerability can be exploited by attackers to manipulate code execution, potentially leading to unauthorized access. Defend against this by implementing proper access controls and monitoring."}], "technical_analysis": {"Introduction": "CVE-2024-34704 is a vulnerability in the era-compiler-solidity that allows attackers to manipulate the expression value, potentially leading to code execution.", "Impact and Scope": "The vulnerability has a CVSS score of 5.9 and an attack vector of NETWORK, making it a medium-severity vulnerability. The vulnerability can be exploited to execute malicious code, potentially leading to further exploitation.", "Related MITRE ATT&CK Techniques": "T1190, T1402, and T1027", "Technical Details": "The vulnerability occurs during instruction selection in the DAGCombine phase while visiting the XOR operation.", "Detection": "Detect the vulnerability by monitoring for unusual code execution patterns and implementing proper input validation and sanitization.", "Mitigation": "Mitigate the vulnerability by implementing proper code signing and validation, access controls, and monitoring.", "Conclusion": "CVE-2024-34704 is a vulnerability that can be exploited by attackers to manipulate the expression value, potentially leading to code execution. Defend against this by implementing proper input validation and sanitization, code signing and validation, access controls, and monitoring."}, "executive_analysis": {"Overview": "CVE-2024-34704 is a medium-severity vulnerability in the era-compiler-solidity that allows attackers to manipulate the expression value, potentially leading to code execution.", "Business Impact": "The vulnerability can be exploited to execute malicious code, potentially leading to further exploitation, and can impact business operations and data.", "Technical Impact": "The vulnerability can be exploited to manipulate code execution, potentially leading to unauthorized access.", "Mitigation Strategies": "Implement proper input validation and sanitization, code signing and validation, access controls, and monitoring.", "Recommendations": "Patch affected systems, implement additional security measures, and monitor logs for suspicious activity.", "Conclusions": "CVE-2024-34704 is a vulnerability that requires immediate attention and should be prioritized for patching and mitigation."}}