{"id": "CVE-2020-15092", "sourceIdentifier": "security-advisories@github.com", "published": "2020-07-09T19:15:11.290", "lastModified": "2020-07-28T16:08:16.137", "vulnStatus": "Analyzed", "cveTags": [], "descriptions": [{"lang": "en", "value": "In TimelineJS before version 3.7.0, some user data renders as HTML. An attacker could implement an XSS exploit with maliciously crafted content in a number of data fields. This risk is present whether the source data for the timeline is stored on Google Sheets or in a JSON configuration file. Most TimelineJS users configure their timeline with a Google Sheets document. Those users are exposed to this vulnerability if they grant write access to the document to a malicious inside attacker, if the access of a trusted user is compromised, or if they grant public write access to the document. Some TimelineJS users configure their timeline with a JSON document. Those users are exposed to this vulnerability if they grant write access to the document to a malicious inside attacker, if the access of a trusted user is compromised, or if write access to the system hosting that document is otherwise compromised. Version 3.7.0 of TimelineJS addresses this in two ways. For content which is intended to support limited HTML markup for styling and linking, that content is \"sanitized\" before being added to the DOM. For content intended for simple text display, all markup is stripped. Very few users of TimelineJS actually install the TimelineJS code on their server. Most users publish a timeline using a URL hosted on systems we control. The fix for this issue is published to our system such that **those users will automatically begin using the new code**. The only exception would be users who have deliberately edited the embed URL to \"pin\" their timeline to an earlier version of the code. Some users of TimelineJS use it as a part of a wordpress plugin (knight-lab-timelinejs). Version 3.7.0.0 of that plugin and newer integrate the updated code. Users are encouraged to update the plugin rather than manually update the embedded version of TimelineJS."}, {"lang": "es", "value": "En TimelineJS antes de la versi\u00f3n 3.7.0, algunos datos de usuario se renderizan como HTML. Un atacante podr\u00eda implementar una explotaci\u00f3n de tipo XSS con contenido dise\u00f1ado maliciosamente en varios campos de datos. Este riesgo est\u00e1 presente si los datos de origen para la l\u00ednea de tiempo son almacenados en Google Sheets o en un archivo de configuraci\u00f3n JSON. La mayor\u00eda de los usuarios de TimelineJS configuran su l\u00ednea de tiempo con un documento de Google Sheets. Esos usuarios est\u00e1n expuestos a esta vulnerabilidad si otorgan acceso de escritura al documento a un atacante interno malicioso, si el acceso de un usuario confiable es comprometido o si otorgan acceso de escritura p\u00fablica al documento. Algunos usuarios de TimelineJS configuran su l\u00ednea de tiempo con un documento JSON. Esos usuarios est\u00e1n expuestos a esta vulnerabilidad si otorgan acceso de escritura al documento a un atacante interno malicioso, si el acceso de un usuario confiable es comprometido o si el acceso de escritura al sistema que aloja ese documento esta comprometido de otra manera. La versi\u00f3n 3.7.0 de TimelineJS aborda esto de dos maneras. Para el contenido que es destinado a admitir un marcado HTML limitado para el estilo y la vinculaci\u00f3n, ese contenido es \"\"sanitized\"\" antes de agregarse al DOM. Para el contenido previsto para la visualizaci\u00f3n de texto simple, todo el marcado es eliminado. Muy pocos usuarios de TimelineJS realmente instalan el c\u00f3digo TimelineJS en su servidor. La mayor\u00eda de los usuarios publican una l\u00ednea de tiempo usando una URL alojada en los sistemas que controlamos. La correcci\u00f3n para este problema es publicado en nuestro sistema de manera que **esos usuarios comenzar\u00e1n a usar autom\u00e1ticamente el nuevo c\u00f3digo**. La \u00fanica excepci\u00f3n ser\u00eda que los usuarios que hayan editado deliberadamente la URL insertada para hacer \"\"pin\"\" en su l\u00ednea de tiempo a una versi\u00f3n anterior del c\u00f3digo. Algunos usuarios de TimelineJS lo usan como parte de un plugin de wordpress (knight-lab-timelinejs). La versi\u00f3n 3.7.0.0 de ese plugin y las m\u00e1s nuevas integran el c\u00f3digo actualizado. Se exhorta a los usuarios a actualizar el plugin en lugar de actualizar manualmente la versi\u00f3n insertada de TimelineJS"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:northwestern:timelinejs:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.7.0", "matchCriteriaId": "F2C241DA-2468-411B-8EDB-200E505AC655"}]}]}], "references": [{"url": "https://github.com/NUKnightLab/TimelineJS3/security/advisories/GHSA-2jpm-827p-j44g", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://knightlab.northwestern.edu/posts/", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}], "techniques": [{"techniqueID": "T1190", "comment": "CVE-2020-15092 - Improper Output Neutralization for OS Commands (CVE-2020-15092) - An attacker could implement an XSS exploit with maliciously crafted content in a number of data fields. Defend against this by sanitizing user input and scanning for malicious code."}, {"techniqueID": "T1059", "comment": "CVE-2020-15092 - Command Injection - An attacker could inject malicious commands to achieve privilege escalation or execute arbitrary code. Defend against this by limiting the command injection and validating user input."}, {"techniqueID": "T1047", "comment": "CVE-2020-15092 - Web Shell - An attacker could deploy a web shell to execute arbitrary code. Defend against this by analyzing the web traffic and detecting suspicious patterns."}, {"techniqueID": "T1199", "comment": "CVE-2020-15092 - Data Staging - An attacker could stage data for later use, such as storing sensitive information. Defend against this by monitoring user data and detecting suspicious activity."}], "stix_bundle": {"identity": {"description": "Vulnerability bundle for CVE-2020-15092, a vulnerability in TimelineJS that allows for cross-site scripting (XSS) and command injection attacks.", "created_by_ref": "https://example.com/actor1", "name": "Vulnerability Bundle - CVE-2020-15092", "type": "Bundle"}, "objects": [{"description": "Vulnerability in TimelineJS that allows for cross-site scripting (XSS) and command injection attacks.", "type": "Vulnerability", "id": "https://example.com/cve-2020-15092", "name": "CVE-2020-15092", "created_by_ref": "https://example.com/actor1", "modified": "2020-07-09T19:15:11.290", "published": "2020-07-09T19:15:11.290"}, {"description": "Improper Output Neutralization for OS Commands", "type": "AttackPattern", "id": "https://example.com/t1190", "name": "T1190", "created_by_ref": "https://example.com/actor1", ".modified": "2020-07-09T19:15:11.290", "published": "2020-07-09T19:15:11.290"}, {"description": "Custom Tactic for CVE-2020-15092", "type": "Tactic", "id": "https://example.com/tactical", "name": "Custom Tactic", "created_by_ref": "https://example.com/actor1", "modified": "2020-07-09T19:15:11.290", "published": "2020-07-09T19:15:11.290"}], "relationships": [{"id": "https://example.com/relationship1", "from_id": "https://example.com/vulnerability", "to_id": "https://example.com/t1190", "type": "uses_ttp"}, {"id": "https://example.com/relationship2", "from_id": "https://example.com/t1190", "to_id": "https://example.com/d3fend", "type": "uses_defend"}]}, "technical_analysis": {"Introduction": "CVE-2020-15092 is a vulnerability in TimelineJS that allows for cross-site scripting (XSS) and command injection attacks.", "Impact and Scope": "The vulnerability affects all versions of TimelineJS prior to 3.7.0, and allows an attacker to execute arbitrary code with the privileges of the vulnerability.", "Related MITRE ATT&CK Techniques": "T1190, T1059, T1047, T1199", "Technical Details": "The vulnerability is caused by improper output neutralization for OS commands, which allows an attacker to inject arbitrary commands.", "Detection": "Detect the vulnerability by analyzing web traffic and monitoring for suspicious patterns.", "Mitigation": "Mitigate the vulnerability by sanitizing user input and limiting the command injection.", "Conclusion": "In conclusion, CVE-2020-15092 is a serious vulnerability that can allow an attacker to execute arbitrary code with the privileges of the vulnerability."}, "executive_analysis": {"Overview": "CVE-2020-15092 is a vulnerability in TimelineJS that allows for cross-site scripting (XSS) and command injection attacks, which can have significant business and technical impacts.", "Business Impact": "The vulnerability can allow an attacker to steal sensitive information, disrupt business operations, and compromise business reputation.", "Technical Impact": "The vulnerability can allow an attacker to execute arbitrary code with the privileges of the vulnerability, which can compromise the security of the system.", "Mitigation Strategies": "Mitigate the vulnerability by sanitizing user input and limiting the command injection.", "Recommendations": "Recommendations for executives include patching the vulnerability, implementing additional security measures, and conducting regular security audits.", "Conclusions": "In conclusion, CVE-2020-15092 is a serious vulnerability that requires immediate attention and remediation to prevent potential business and technical impacts."}}