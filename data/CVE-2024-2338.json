{"id": "CVE-2024-2338", "sourceIdentifier": "f86ef6dc-4d3a-42ad-8f28-e6d5547a5007", "published": "2024-03-08T20:15:45.960", "lastModified": "2024-03-08T21:19:43.127", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "PostgreSQL Anonymizer v1.2 contains a SQL injection vulnerability that allows a user who owns a table to elevate to superuser when dynamic masking is enabled. PostgreSQL Anonymizer enables users to set security labels on tables to mask specified columns. There is a flaw that allows complex expressions to be provided as a value. This expression is then later used as it to create the masked views leading to SQL Injection. If dynamic masking is enabled, this will lead to privilege escalation to superuser after the label is created. Users that don't own a table, especially masked users cannot exploit this vulnerability. The problem is resolved in v1.3."}, {"lang": "es", "value": "PostgreSQL Anonymizer v1.2 contiene una vulnerabilidad de inyecci\u00f3n SQL que permite a un usuario propietario de una tabla ascender a superusuario cuando el enmascaramiento din\u00e1mico est\u00e1 habilitado. PostgreSQL Anonymizer permite a los usuarios establecer etiquetas de seguridad en tablas para enmascarar columnas espec\u00edficas. Existe una falla que permite proporcionar expresiones complejas como valor. Esta expresi\u00f3n luego se usa para crear las vistas enmascaradas que conducen a la inyecci\u00f3n SQL. Si el enmascaramiento din\u00e1mico est\u00e1 habilitado, esto dar\u00e1 lugar a una escalada de privilegios al superusuario despu\u00e9s de que se cree la etiqueta. Los usuarios que no poseen una mesa, especialmente los usuarios enmascarados, no pueden aprovechar esta vulnerabilidad. El problema se resuelve en v1.3."}], "metrics": {"cvssMetricV31": [{"source": "f86ef6dc-4d3a-42ad-8f28-e6d5547a5007", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "f86ef6dc-4d3a-42ad-8f28-e6d5547a5007", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-89"}]}], "references": [{"url": "https://gitlab.com/dalibo/postgresql_anonymizer/-/commit/f55daadba3fa8226029687964aa8889d01a79778", "source": "f86ef6dc-4d3a-42ad-8f28-e6d5547a5007"}], "techniques": [{"techniqueID": "T1059.005", "comment": "CVE-2024-2338 - SQL Injection vulnerability in PostgreSQL Anonymizer v1.2, allowing a user with table ownership to escalate privileges to superuser when dynamic masking is enabled. Defend against this by limiting access to the database and using prepared statements."}, {"techniqueID": "T1027", "comment": "CVE-2024-2338 - Exposure of sensitive data through SQL Injection vulnerability in PostgreSQL Anonymizer v1.2, allowing an attacker to inject malicious SQL code to extract sensitive data. Defend against this by validating user input and using parameterized queries."}, {"techniqueID": "T1190", "comment": "CVE-2024-2338 - Privilege escalation through SQL Injection vulnerability in PostgreSQL Anonymizer v1.2, allowing an attacker to climb the privilege ladder from a user with table ownership to superuser. Defend against this by implementing access controls and limiting privileged access."}], "stix_bundle": {"splits": [{"type": "stix-core", " cyber_observable": {"id": "CVE-2024-2338", "description": "PostgreSQL Anonymizer v1.2 contains a SQL injection vulnerability that allows a user who owns a table to elevate to superuser when dynamic masking is enabled.", "created_by_ref": "dalibo", "modified": "2024-03-08T21:19:43.127", "object_marking_refs": ["marking-definition--1"], "package_name": "postgresql_anonymizer", "package_version": "1.2", "required_observables": [], "object_refs": ["vulnerability--1"], "labels": ["vulnerability", "sql-injection"]}}, {"type": "stix-core", "vulnerability": {"id": "vulnerability--1", "description": "PostgreSQL Anonymizer v1.2 contains a SQL injection vulnerability that allows a user who owns a table to elevate to superuser when dynamic masking is enabled.", "affected_interfaces": ["data"], "cvss_vector_string": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:C/C:H/I:H/A:H", "exploit_score": 1.3, "impact_score": 6.0, "base_severity": "HIGH"}}, {"type": "stix-core", "course_of_action": {"id": "course-of-action--1", "title": "Recommendation 1", "description": "Limit access to the database and use prepared statements to prevent SQL injection attacks.", "recommended_course_of_action": "mitigation", "technique_refs": ["t1059-005"]}}, {"type": "stix-core", "course_of_action": {"id": "course-of-action--2", "title": "Recommendation 2", "description": "Implement access controls and limit privileged access to prevent privilege escalation.", "recommended_course_of_action": "mitigation", "technique_refs": ["t1190"]}}, {"type": "stix-core", "technique": {"id": "t1059-005", "name": "Command and Scripting Interoperability", "description": "Abuse Windows and macOS scripting interfaces, as well as command shells and other software interfaces, to execute commands, install software, and access resources on a targeted system, network, or communications infrastructure."}}, {"type": "stix-core", "technique": {"id": "t1190", "name": "Exploit Public-Facing Application", "description": "Exploit publicly available applications and services with known vulnerabilities."}}], "created_by_refs": ["dalibo"], "modified": "2024-03-08T21:19:43.127", "labels": ["vulnerability", "stix-v2.1"]}, "technical_analysis": {"Introduction": "The PostgreSQL Anonymizer v1.2 contains a SQL injection vulnerability that allows a user who owns a table to elevate to superuser when dynamic masking is enabled.", "Impact and Scope": "The vulnerability has a CVSS score of 8.0 with a base severity of HIGH and an attack vector of NETWORK. It can lead to unauthorized access, data breaches, and privilege escalation.", "Related MITRE ATT&CK Techniques": "T1059.005, T1027, and T1190", "Technical Details": "The vulnerability is caused by a flaw in the PostgreSQL Anonymizer that allows complex expressions to be provided as a value, which can then be used to inject malicious SQL code.", "Detection": "Detect SQL injection attacks by monitoring database logs for suspicious queries and monitoring user activity for signs of privilege escalation.", "Mitigation": "Mitigate the vulnerability by limiting access to the database, using prepared statements, and implementing access controls.", "Conclusion": "The PostgreSQL Anonymizer v1.2 contains a SQL injection vulnerability that can be exploited by attackers to elevate privileges and steal sensitive data."}, "executive_analysis": {"Overview": "The PostgreSQL Anonymizer v1.2 contains a SQL injection vulnerability that can be exploited by attackers to elevate privileges and steal sensitive data.", "Business Impact": "The vulnerability has significant business implications, including unauthorized access to sensitive data and potential data breaches.", "Technical Impact": "The vulnerability has technical implications, including the need to limit access to the database, use prepared statements, and implement access controls.", "Mitigation Strategies": "Implement access controls and limit privileged access to prevent privilege escalation.", "Recommendations": "Recommendation 1: Limit access to the database and use prepared statements to prevent SQL injection attacks. Recommendation 2: Implement access controls and limit privileged access to prevent privilege escalation.", "Conclusions": "The PostgreSQL Anonymizer v1.2 contains a SQL injection vulnerability that requires immediate attention and mitigation to prevent attacks."}}