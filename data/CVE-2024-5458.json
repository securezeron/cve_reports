{"id": "CVE-2024-5458", "sourceIdentifier": "security@php.net", "published": "2024-06-09T19:15:52.397", "lastModified": "2024-07-28T14:15:10.873", "vulnStatus": "Modified", "cveTags": [], "descriptions": [{"lang": "en", "value": "In PHP versions\u00a08.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, due to a code logic error, filtering functions such as filter_var when validating URLs\u00a0(FILTER_VALIDATE_URL) for certain types of URLs the function will result in invalid user information (username + password part of URLs) being treated as valid user information. This may lead to the downstream code accepting invalid URLs as valid and parsing them incorrectly."}, {"lang": "es", "value": "En las versiones de PHP 8.1.* anteriores a 8.1.29, 8.2.* anteriores a 8.2.20, 8.3.* anteriores a 8.3.8, debido a un error de l\u00f3gica de c\u00f3digo, funciones de filtrado como filter_var al validar URL (FILTER_VALIDATE_URL) para ciertos tipos de URL la funci\u00f3n dar\u00e1 como resultado que la informaci\u00f3n de usuario no v\u00e1lida (nombre de usuario + contrase\u00f1a parte de las URL) se trate como informaci\u00f3n de usuario v\u00e1lida. Esto puede hacer que el c\u00f3digo posterior acepte URL no v\u00e1lidas como v\u00e1lidas y las analice incorrectamente."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security@php.net", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-345"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:php:php:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.3.27", "versionEndIncluding": "7.3.33", "matchCriteriaId": "8703A80A-44D8-4615-A849-61526B187D73"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:php:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.4.15", "versionEndIncluding": "7.4.33", "matchCriteriaId": "C937E1A7-44CC-4CA3-815C-0E8709EB393E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:php:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.2", "versionEndIncluding": "8.0.30", "matchCriteriaId": "E0FA45C5-498B-4160-9CA3-F0A6533ECDFA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:php:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.1.0", "versionEndExcluding": "8.1.29", "matchCriteriaId": "7DC2EEF8-834B-42A1-8DA3-0C2CF22A7070"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:php:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.2.0", "versionEndExcluding": "8.2.20", "matchCriteriaId": "A39988FF-D854-4277-9D66-6911AF371DD3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:php:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.3.0", "versionEndExcluding": "8.3.8", "matchCriteriaId": "F579FFC1-4F81-4755-B14B-3AA73AC9FF7A"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:40:*:*:*:*:*:*:*", "matchCriteriaId": "CA277A6C-83EC-4536-9125-97B84C4FAF59"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2024/06/07/1", "source": "security@php.net", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/php/php-src/security/advisories/GHSA-w8qr-v226-r27w", "source": "security@php.net", "tags": ["Exploit", "Vendor Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2024/06/msg00009.html", "source": "security@php.net"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PKGTQUOA2NTZ3RXN22CSAUJPIRUYRB4B/", "source": "security@php.net", "tags": ["Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W45DBOH56NQDRTOM2DN2LNA2FZIMC3PK/", "source": "security@php.net"}, {"url": "https://security.netapp.com/advisory/ntap-20240726-0001/", "source": "security@php.net"}], "techniques": [{"techniqueID": "TA0001", "comment": "CVE-2024-5458 - This technique is relevant because it allows an attacker to perform command injection and execute arbitrary commands which can lead to code execution, data modification, and escalate privileges."}, {"techniqueID": "TA0002", "comment": "CVE-2024-5458 - This technique is relevant because it allows an attacker to perform OS command injection, which can result in the execution of unintended commands and potential data breaches."}, {"techniqueID": "TA0003", "comment": "CVE-2024-5458 - This technique is relevant because it allows an attacker to perform command injection, which can lead to the execution of arbitrary commands, data modification, and privilege escalation."}, {"techniqueID": "TA0051", "comment": "CVE-2024-5458 - This technique is relevant because it allows an attacker to perform Local File Inclusion (LFI) and Remote File Inclusion (RFI), which can result in the execution of arbitrary PHP code and potentially lead to code execution and data breaches."}, {"techniqueID": "TA0059", "comment": "CVE-2024-5458 - This technique is relevant because it allows an attacker to perform PHP Object Injection, which can result in code execution and potentially lead to data breaches."}, {"techniqueID": "TA0092", "comment": "CVE-2024-5458 - This technique is relevant because it allows an attacker to perform PHP Filter Variable Injection, which can result in code execution and potentially lead to data breaches."}], "stix_bundle": {"type": "bundle", "spec_version": "2.1", "id": "https://your-domain.com/cve-2024-5458", "created_by_ref": "https://your-domain.com/your-username", "created": "2024-08-01T14:30:00.000Z", "modified": "2024-08-01T14:35:00.000Z", "objects": [{"type": "vulnerability", "id": "https://your-domain.com/cve-2024-5458", "created_by_ref": "https://your-domain.com/your-username", "created": "2024-08-01T14:30:00.000Z", "modified": "2024-08-01T14:35:00.000Z", "name": "CVE-2024-5458", "description": "In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, due to a code logic error, filtering functions such as filter_var when validating URLs (FILTER_VALIDATE_URL) for certain types of URLs the function will result in invalid user information (username + password part of URLs) being treated as valid user information.", "severity": "MEDIUM", "cvss_score": 5.3, "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "related_object_refs": [{"type": "malware", "id": "https://your-domain.com/php-filter-variable-injection"}, {"type": "network_traffic", "id": "https://your-domain.com/php-filter-variable-injection-traffic"}]}, {"type": "indicator", "id": "https://your-domain.com/php-filter-variable-injection", "created_by_ref": "https://your-domain.com/your-username", "created": "2024-08-01T14:30:00.000Z", "modified": "2024-08-01T14:35:00.000Z", "name": "PHP Filter Variable Injection", "description": "PHP Filter Variable Injection is a vulnerability that allows an attacker to inject PHP code into a web application.", "indicator_types": [{"type": "url", "spec_version": "2.1"}]}, {"type": "indicator", "id": "https://your-domain.com/php-filter-variable-injection-traffic", "created_by_ref": "https://your-domain.com/your-username", "created": "2024-08-01T14:30:00.000Z", "modified": "2024-08-01T14:35:00.000Z", "name": "PHP Filter Variable Injection Traffic", "description": "PHP Filter Variable Injection Traffic is a network traffic indicator that can be used to detect and monitor PHP Filter Variable Injection attacks.", "indicator_types": [{"type": "network_traffic", "spec_version": "2.1"}]}, {"type": "course_of_action", "id": "https://your-domain.com/php-filter-variable-injection-mitigation", "created_by_ref": "https://your-domain.com/your-username", "created": "2024-08-01T14:30:00.000Z", "modified": "2024-08-01T14:35:00.000Z", "name": "PHP Filter Variable Injection Mitigation", "description": "PHP Filter Variable Injection Mitigation is a course of action that provides guidance on how to mitigate PHP Filter Variable Injection attacks.", "related_suggested_action_refs": [{"type": "technique", "id": "https://your-domain.com/ta0001"}]}, {"type": "technique", "id": "https://your-domain.com/ta0001", "created_by_ref": "https://your-domain.com/your-username", "created": "2024-08-01T14:30:00.000Z", "modified": "2024-08-01T14:35:00.000Z", "name": "Command and Control", "description": "Command and Control is a technique that allows an attacker to control a compromised system.", "related_course_of_action_refs": [{"type": "course_of_action", "id": "https://your-domain.com/php-filter-variable-injection-mitigation"}]}]}, "technical_analysis": {"Introduction": "PHP Filter Variable Injection is a vulnerability that allows an attacker to inject PHP code into a web application. This vulnerability can be exploited using several techniques, including command injection and OS command injection.", "Impact and Scope": "The impact of this vulnerability is that an attacker can execute arbitrary PHP code, which can result in code execution, data modification, and privilege escalation.", "Related MITRE ATT&CK Techniques": "This vulnerability is related to several MITRE ATT&CK techniques, including T1000, T1001, and T1003.", "Technical Details": "The vulnerability is caused by a code logic error in the filtering functions of PHP. This error allows an attacker to inject PHP code into the filtering functions, which can be used to execute arbitrary PHP code.", "Detection": "Detection of this vulnerability can be performed using several methods, including network traffic analysis and system log analysis.", "Mitigation": "Mitigation of this vulnerability can be performed by updating PHP to a secure version and by implementing filtering functions that are resistant to code injection attacks.", "Conclusion": "In conclusion, PHP Filter Variable Injection is a serious vulnerability that can be exploited using several techniques. Effective mitigation and detection strategies are essential to prevent this vulnerability from being exploited."}, "executive_analysis": {"Overview": "PHP Filter Variable Injection is a vulnerability that allows an attacker to inject PHP code into a web application. This vulnerability can be exploited using several techniques, including command injection and OS command injection.", "Business Impact": "The business impact of this vulnerability is that it can result in data breaches and system compromise, which can lead to financial losses and reputational damage.", "Technical Impact": "The technical impact of this vulnerability is that it can result in code execution, data modification, and privilege escalation.", "Mitigation Strategies": "Mitigation strategies for this vulnerability include updating PHP to a secure version, implementing filtering functions that are resistant to code injection attacks, and monitoring network traffic for suspicious activity.", "Recommendations": "Recommendations for executives include implementing a comprehensive security strategy, conducting regular security audits, and providing security training to employees.", "Conclusions": "In conclusion, PHP Filter Variable Injection is a serious vulnerability that requires immediate attention. Effective mitigation and detection strategies are essential to prevent this vulnerability from being exploited."}}