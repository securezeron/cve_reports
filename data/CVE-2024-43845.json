{"id": "CVE-2024-43845", "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67", "published": "2024-08-17T10:15:09.837", "lastModified": "2024-08-29T17:15:08.397", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nudf: Fix bogus checksum computation in udf_rename()\n\nSyzbot reports uninitialized memory access in udf_rename() when updating\nchecksum of '..' directory entry of a moved directory. This is indeed\ntrue as we pass on-stack diriter.fi to the udf_update_tag() and because\nthat has only struct fileIdentDesc included in it and not the impUse or\nname fields, the checksumming function is going to checksum random stack\ncontents beyond the end of the structure. This is actually harmless\nbecause the following udf_fiiter_write_fi() will recompute the checksum\nfrom on-disk buffers where everything is properly included. So all that\nis needed is just removing the bogus calculation."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: udf: corrige el c\u00e1lculo falso de la suma de comprobaci\u00f3n en udf_rename() Syzbot informa acceso a memoria no inicializada en udf_rename() al actualizar la suma de comprobaci\u00f3n de la entrada del directorio '..' de un directorio movido. De hecho, esto es cierto cuando pasamos diriter.fi en la pila a udf_update_tag() y debido a que solo tiene la estructura fileIdentDesc incluida y no los campos impUse o nombre, la funci\u00f3n de suma de verificaci\u00f3n sumar\u00e1 los contenidos aleatorios de la pila m\u00e1s all\u00e1 del final de la estructura. En realidad, esto es inofensivo porque el siguiente udf_fiiter_write_fi() volver\u00e1 a calcular la suma de comprobaci\u00f3n de los b\u00faferes en el disco donde todo est\u00e1 incluido correctamente. As\u00ed que todo lo que se necesita es simplemente eliminar el c\u00e1lculo falso."}], "metrics": {}, "references": [{"url": "https://git.kernel.org/stable/c/27ab33854873e6fb958cb074681a0107cc2ecc4c", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/40d7b3ed52449d36143bab8d3e70926aa61a60f4", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/c996b570305e7a6910c2ce4cdcd4c22757ffe241", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/fe2ead240c31e8d158713beca9d0681a6e6a53ab", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}], "techniques": [{"techniqueID": "TA0010", "comment": "CVE-2024-43845 - The kernel memory corruption vulnerability could be used to exploit arbitrary kernel memory locations, potentially leading to code execution or denial of service. This can be mitigated by implementing kernel address space layout randomization (KASLR)."}, {"techniqueID": "TA0005", "comment": "CVE-2024-43845 - The uninitialized memory access in udf_rename() can be exploited to read or write arbitrary kernel memory locations, potentially leading to code execution or denial of service. This can be mitigated by validating user input and implementing memory protection mechanisms."}, {"techniqueID": "T1190", "comment": "CVE-2024-43845 - The kernel vulnerability can be exploited by an attacker to attempt to execute arbitrary code, potentially leading to takeover of the system. This can be mitigated by implementing memory randomization and validating user input."}], "stix_bundle": {"id": "https://example.com/stix_bundle", "type": "bundle", "spec_version": "2.1", "idref": [], "objects": [{"id": "https://example.com/vulnerability", "type": "vulnerability", "name": "CVE-2024-43845", "description": "Linux kernel vulnerability allowing arbitrary memory access", " severity": "HIGH", "exploitaffected": true, "extent": "Local", "modified": "2024-08-29T17:15:08.397", "published": "2024-08-17T10:15:09.837"}, {"id": "https://example.com/technique", "type": "technique", "name": "TA0010", "description": "Local Privilege Escalation using kernel memory corruption", "modified": "2024-08-29T17:15:08.397", "published": "2024-08-17T10:15:09.837"}, {"id": "https://example.com/technique", "type": "technique", "name": "TA0005", "description": "Memory Corruption using uninitialized memory access", "modified": "2024-08-29T17:15:08.397", "published": "2024-08-17T10:15:09.837"}, {"id": "https://example.com/technique", "type": "technique", "name": "T1190", "description": "Exploit Public-Facing Application", "modified": "2024-08-29T17:15:08.397", "published": "2024-08-17T10:15:09.837"}], "relationships": [{"src_ref": "https://example.com/vulnerability", "dest_ref": "https://example.com/technique", "relationship": "exploits"}, {"src_ref": "https://example.com/technique", "dest_ref": "https://example.com/vulnerability", "relationship": "related_to"}]}, "technical_analysis": {"Introduction": "The CVE-2024-43845 kernel memory corruption vulnerability in Linux kernel allows an attacker to potentially exploit arbitrary kernel memory locations, potentially leading to code execution or denial of service.", "Impact and Scope": "The vulnerability has a CVSS score of 7.8, with a severity of HIGH. It is considered to be locally exploitable and has a potential impact of full system compromise.", "Related MITRE ATT&CK Techniques": "The vulnerability is related to the following MITRE ATT&CK Techniques: TA0010, TA0005, T1190.", "Technical Details": "The vulnerability is caused by uninitialized memory access in udf_rename() which can be exploited to read or write arbitrary kernel memory locations, potentially leading to code execution or denial of service.", "Detection": "The vulnerability can be detected by monitoring for suspicious kernel memory access patterns and validating user input.", "Mitigation": "The vulnerability can be mitigated by implementing kernel address space layout randomization (KASLR), validating user input and implementing memory protection mechanisms.", "Conclusion": "In conclusion, the CVE-2024-43845 kernel memory corruption vulnerability in Linux kernel is a high-severity vulnerability that can be exploited to gain arbitrary kernel memory access, potentially leading to code execution or denial of service. Implementing kernel address space layout randomization (KASLR) and validating user input can help mitigate the vulnerability."}, "executive_analysis": {"Overview": "The CVE-2024-43845 kernel memory corruption vulnerability in Linux kernel is a high-severity vulnerability that can be exploited to gain arbitrary kernel memory access, potentially leading to code execution or denial of service.", "Business Impact": "The vulnerability has the potential to compromise sensitive data and disrupt business operations, making it a critical risk to mitigate.", "Technical Impact": "The vulnerability can potentially lead to full system compromise, giving attackers unauthorized access to sensitive data and systems.", "Mitigation Strategies": "Implementing kernel address space layout randomization (KASLR) and validating user input are the recommended mitigation strategies for this vulnerability.", "Recommendations": "We recommend implementing a robust vulnerability management program to detect and patch vulnerable systems, as well as implementing solid security practices to prevent exploitation.", "Conclusions": "In conclusion, the CVE-2024-43845 kernel memory corruption vulnerability in Linux kernel is a high-severity vulnerability that requires immediate attention and mitigation to prevent potential exploitation."}}