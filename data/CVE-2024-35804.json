{"id": "CVE-2024-35804", "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67", "published": "2024-05-17T14:15:13.550", "lastModified": "2024-05-17T18:35:35.070", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nKVM: x86: Mark target gfn of emulated atomic instruction as dirty\n\nWhen emulating an atomic access on behalf of the guest, mark the target\ngfn dirty if the CMPXCHG by KVM is attempted and doesn't fault.  This\nfixes a bug where KVM effectively corrupts guest memory during live\nmigration by writing to guest memory without informing userspace that the\npage is dirty.\n\nMarking the page dirty got unintentionally dropped when KVM's emulated\nCMPXCHG was converted to do a user access.  Before that, KVM explicitly\nmapped the guest page into kernel memory, and marked the page dirty during\nthe unmap phase.\n\nMark the page dirty even if the CMPXCHG fails, as the old data is written\nback on failure, i.e. the page is still written.  The value written is\nguaranteed to be the same because the operation is atomic, but KVM's ABI\nis that all writes are dirty logged regardless of the value written.  And\nmore importantly, that's what KVM did before the buggy commit.\n\nHuge kudos to the folks on the Cc list (and many others), who did all the\nactual work of triaging and debugging.\n\nbase-commit: 6769ea8da8a93ed4630f1ce64df6aafcaabfce64"}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: KVM: x86: marcar el gfn de destino de la instrucci\u00f3n at\u00f3mica emulada como sucia Al emular un acceso at\u00f3mico en nombre del invitado, marque el gfn de destino como sucio si se intenta realizar el CMPXCHG por KVM y no falla. Esto corrige un error por el cual KVM corrompe efectivamente la memoria del invitado durante la migraci\u00f3n en vivo al escribir en la memoria del invitado sin informar al espacio de usuario que la p\u00e1gina est\u00e1 sucia. Marcar la p\u00e1gina como sucia se elimin\u00f3 involuntariamente cuando el CMPXCHG emulado de KVM se convirti\u00f3 para realizar un acceso de usuario. Antes de eso, KVM asignaba expl\u00edcitamente la p\u00e1gina invitada a la memoria del kernel y marcaba la p\u00e1gina como sucia durante la fase de desasignaci\u00f3n. Marque la p\u00e1gina como sucia incluso si CMPXCHG falla, ya que los datos antiguos se vuelven a escribir en caso de fallo, es decir, la p\u00e1gina a\u00fan est\u00e1 escrita. Se garantiza que el valor escrito ser\u00e1 el mismo porque la operaci\u00f3n es at\u00f3mica, pero la ABI de KVM es que todas las escrituras se registran de forma sucia independientemente del valor escrito. Y lo que es m\u00e1s importante, eso es lo que hizo KVM antes de la confirmaci\u00f3n del error. Felicitaciones enormes a las personas en la lista Cc (y a muchos otros), que hicieron todo el trabajo de clasificaci\u00f3n y depuraci\u00f3n. confirmaci\u00f3n base: 6769ea8da8a93ed4630f1ce64df6aafcaabfce64"}], "metrics": {}, "references": [{"url": "https://git.kernel.org/stable/c/225d587a073584946c05c9b7651d637bd45c0c71", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/726374dde5d608b15b9756bd52b6fc283fda7a06", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/910c57dfa4d113aae6571c2a8b9ae8c430975902", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/9d1b22e573a3789ed1f32033ee709106993ba551", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/a9bd6bb6f02bf7132c1ab192ba62bbfa52df7d66", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}], "techniques": [{"techniqueID": "T1060", "comment": "CVE-2024-35804 - Malicious code injection can be achieved by exploiting the KVM vulnerability, allowing attackers to execute arbitrary code. This can be mitigated by implementing proper access controls and memory protection mechanisms."}, {"techniqueID": "T1190", "comment": "CVE-2024-35804 - The vulnerability can be used to achieve persistence by allowing attackers to execute arbitrary code, enabling them to maintain access to the system. Defending against this requires identifying and blocking suspicious network traffic and memory access patterns."}, {"techniqueID": "T1204", "comment": "CVE-2024-35804 - This vulnerability can be used to perform data tampering by manipulating memory contents. This can be mitigated by implementing integrity checks and monitoring memory access."}, {"techniqueID": "T1027", "comment": "CVE-2024-35804 - The vulnerability can be used to execute arbitrary code, allowing attackers to conduct command and control (C2) communication. Defending against this requires monitoring network traffic and blocking suspicious connections."}], "stix_bundle": {"package": {"id": "package-CVE-2024-35804"}, "objects": [{"type": "vulnerability", "id": "vuln-CVE-2024-35804", "name": "CVE-2024-35804", "description": "KVM vulnerability allowing arbitrary code execution", "severity": "High", "category": "uncategorized", "modified": "2024-05-17T18:35:35.070"}, {"type": "technique", "id": "technique-T1060", "name": "Code Injection", "description": "Malicious code is injected into a process, enabling execution of arbitrary code"}, {"type": "technique", "id": "technique-T1190", "name": "Persistence", "description": "An attacker maintains access to a system or network by exploiting a vulnerability"}, {"type": "technique", "id": "technique-T1204", "name": "Data Tampering", "description": "An attacker alters the contents of malware-free memory"}, {"type": "technique", "id": "technique-T1027", "name": "Command and Control", "description": "An attacker establishes communication with a command and control server"}]}, "technical_analysis": {"Introduction": "The CVE-2024-35804 vulnerability is a KVM vulnerability that allows arbitrary code execution, potentially leading to data tampering and persistence.", "Impact and Scope": "The impact of this vulnerability is high, with a potential CVSS score of 8.8. The vulnerability can be exploited by malicious actors to execute arbitrary code, allowing for data tampering and persistence.", "Related MITRE ATT&CK Techniques": "The related MITRE ATT&CK techniques are code injection (T1060), persistence (T1190), data tampering (T1204), and command and control (T1027).", "Technical Details": "The vulnerability is due to an issue in the KVM's handling of emulated atomic instructions, which allows an attacker to write arbitrary data to memory.", "Detection": "Detection methods include monitoring network traffic for suspicious connections and monitoring memory access patterns for signs of data tampering.", "Mitigation": "Mitigation strategies include implementing proper access controls and memory protection mechanisms, as well as monitoring network traffic and memory access patterns.", "Conclusion": "The CVE-2024-35804 vulnerability is a high-severity issue that enables arbitrary code execution and data tampering. Defending against this requires implementing proper access controls and memory protection mechanisms."}, "executive_analysis": {"Overview": "The CVE-2024-35804 vulnerability is a high-severity issue that enables arbitrary code execution and data tampering.", "Business Impact": "The business impact of this vulnerability is significant, with potential financial and reputational losses due to data breaches and system compromise.", "Technical Impact": "The technical impact of this vulnerability is the potential for arbitrary code execution and data tampering, which can lead to system compromise and data breaches.", "Mitigation Strategies": "Mitigation strategies include implementing proper access controls and memory protection mechanisms, as well as monitoring network traffic and memory access patterns.", "Recommendations": "Recommendations for executives include prioritizing patching and updating software, implementing proper access controls and memory protection mechanisms, and monitoring network traffic and memory access patterns.", "Conclusions": "In conclusion, the CVE-2024-35804 vulnerability is a high-severity issue that requires immediate attention and mitigation. Prioritizing patching and updating software, implementing proper access controls and memory protection mechanisms, and monitoring network traffic and memory access patterns are essential for preventing data breaches and system compromise."}}