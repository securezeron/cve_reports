{"id": "CVE-2024-1759", "sourceIdentifier": "security@wordfence.com", "published": "2024-05-02T17:15:12.983", "lastModified": "2024-05-02T18:00:37.360", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "The WP ULike \u2013 Most Advanced WordPress Marketing Toolkit plugin for WordPress is vulnerable to Stored Cross-Site Scripting via a user's display name in all versions up to, and including, 4.6.9 due to insufficient input sanitization and output escaping. This makes it possible for authenticated attackers, with subscriber-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page."}, {"lang": "es", "value": "El complemento WP ULike \u2013 Most Advanced WordPress Marketing Toolkit para WordPress es vulnerable a Cross-Site Scripting Almacenado a trav\u00e9s del nombre para mostrar de un usuario en todas las versiones hasta la 4.6.9 incluida debido a una sanitizaci\u00f3n de entrada y un escape de salida insuficientes. Esto hace posible que atacantes autenticados, con acceso a nivel de suscriptor y superior, inyecten scripts web arbitrarios en p\u00e1ginas que se ejecutar\u00e1n cada vez que un usuario acceda a una p\u00e1gina inyectada."}], "metrics": {"cvssMetricV31": [{"source": "security@wordfence.com", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.1, "impactScore": 2.7}]}, "references": [{"url": "https://plugins.trac.wordpress.org/changeset/3052611/wp-ulike/trunk/admin/classes/class-wp-ulike-widget.php", "source": "security@wordfence.com"}, {"url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/d844ca83-84e5-4b6c-ae26-f300c7328d78?source=cve", "source": "security@wordfence.com"}], "techniques": [{"techniqueID": "T1190", "comment": "CVE-2024-1759 - This technique is relevant as it involves data corruption and stealing through cross-site scripting (XSS), which is a common tactic used by attackers to steal sensitive data or inject malicious scripts. Defending against this involves implementing robust input validation, sanitization, and output encoding to prevent XSS attacks."}, {"techniqueID": "T1636", "comment": "CVE-2024-1759 - This technique is relevant as it involves using web shells to inject and execute malicious code on a targeted system. Defending against this involves implementing web application firewalls, intrusion detection and prevention systems, and regularly updating software to prevent exploitation of known vulnerabilities."}, {"techniqueID": "T1059", "comment": "CVE-2024-1759 - This technique is relevant as it involves using stored cross-site scripting (XSS) to inject and steal sensitive data. Defending against this involves implementing robust input validation, sanitization, and output encoding to prevent XSS attacks, as well as regularly monitoring for and remediating common web application vulnerabilities."}], "stix_bundle": {"type": "bundle", "id": "https://example.com/bundle/cve-2024-1759", "created_by_ref": "https://example.com/identity/analyst-1", "created": "2024-05-02T18:00:37.360", "modified": "2024-05-02T18:00:37.360", "objects": [{"type": "indicator", "id": "https://example.com/indicator/cve-2024-1759", "name": "CVE-2024-1759 - WP ULike Stored Cross-Site Scripting", "description": "Stored Cross-Site Scripting vulnerability in WP ULike WordPress plugin", "created_by_ref": "https://example.com/identity/analyst-1", "created": "2024-05-02T18:00:37.360", "modified": "2024-05-02T18:00:37.360", "layers": [{"type": "layer", "id": "https://example.com/layer/anti-xss", "name": "Anti-XSS Layer", "description": "Layer to detect and prevent cross-site scripting attacks", "analysis": [{"type": "analysis", "id": "https://example.com/analysis/anti-xss-1", "name": "Anti-XSS Analysis", "description": "Analysis to detect and prevent cross-site scripting attacks", "recommendations": [{"type": "recommendation", "id": "https://example.com/recommendation/anti-xss-2", "name": "Implement Anti-XSS Filter", "description": "Implement a web application firewall with anti-XSS filter to prevent cross-site scripting attacks"}]}]}]}]}, "technical_analysis": {"Introduction": "The WP ULike Stored Cross-Site Scripting vulnerability allows attackers to inject and execute arbitrary web scripts in pages that will execute whenever a user accesses an injected page, compromising the confidentiality, integrity, and availability of sensitive data.", "Impact and Scope": "The vulnerability has a CVSS score of 6.4, with a base severity of MEDIUM, indicating a moderate risk of exploitation. The attack vector is NETWORK, with low attack complexity and no user interaction required.", "Related MITRE ATT&CK Techniques": "T1190, T1636, T1059", "Technical Details": "The vulnerability occurs in the WP ULike WordPress plugin due to insufficient input sanitization and output escaping, allowing attackers to inject and execute arbitrary web scripts.", "Detection": "Detections can be made using web application firewalls, intrusion detection and prevention systems, and regular monitoring for and remediating common web application vulnerabilities.", "Mitigation": "Mitigation strategies include implementing robust input validation, sanitization, and output encoding, as well as regularly updating software to prevent exploitation of known vulnerabilities.", "Conclusion": "The WP ULike Stored Cross-Site Scripting vulnerability requires immediate attention to prevent exploitation and data loss."}, "executive_analysis": {"Overview": "The WP ULike Stored Cross-Site Scripting vulnerability poses a moderate risk to the organization's sensitive data due to its potential to inject and execute arbitrary web scripts.", "Business Impact": "The vulnerability can compromise sensitive data and disrupt business operations, resulting in financial losses and reputational damage.", "Technical Impact": "The vulnerability can allow attackers to inject and execute malicious code, compromising the confidentiality, integrity, and availability of sensitive data.", "Mitigation Strategies": "Implement robust input validation, sanitization, and output encoding, as well as regularly updating software to prevent exploitation of known vulnerabilities.", "Recommendations": "Recommendations include implementing a web application firewall with anti-XSS filter, conducting regular vulnerability assessments, and providing training to developers on secure coding practices.", "Conclusions": "The organization should prioritize the remediation of this vulnerability to prevent data loss and minimize the risk of exploitation."}}