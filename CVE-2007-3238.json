{"id": "CVE-2007-3238", "sourceIdentifier": "cve@mitre.org", "published": "2007-06-15T01:30:00.000", "lastModified": "2018-10-16T16:47:58.263", "vulnStatus": "Modified", "cveTags": [], "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in functions.php in the default theme in WordPress 2.2 allows remote authenticated administrators to inject arbitrary web script or HTML via the PATH_INFO (REQUEST_URI) to wp-admin/themes.php, a different vulnerability than CVE-2007-1622.  NOTE: this might not cross privilege boundaries in some configurations, since the Administrator role has the unfiltered_html capability."}, {"lang": "es", "value": "Vulnerabilidad de secuencia de comandos en sitios cruzados (XSS) en functions.php en el tema por defecto en WordPress 2.2 permite a administradores validados remotos inyectar secuencias de comandos web o HTML a trav\u00e9s de PATH_INFO (REQUEST_URI) en wp-admin/themes.php, un vulnerabilidad diferente que CVE-2007-1622. NOTA: esto no puede cruzar l\u00edmites del privilegio en algunas configuraciones, puesto que el papel del administrador tiene la capacidad  de unfiltered_html."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": true, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:2.2:*:*:*:*:*:*:*", "matchCriteriaId": "5A9FBA02-8A6A-471F-92CD-D8E77B5061C2"}]}]}], "references": [{"url": "http://blogsecurity.net/wordpress/news/news-100607-1/", "source": "cve@mitre.org"}, {"url": "http://codex.wordpress.org/Roles_and_Capabilities", "source": "cve@mitre.org"}, {"url": "http://mybeni.rootzilla.de/mybeNi/2007/wordpress_zeroday_vulnerability_roundhouse_kick_and_why_i_nearly_wrote_the_first_blog_worm/", "source": "cve@mitre.org"}, {"url": "http://osvdb.org/37293", "source": "cve@mitre.org"}, {"url": "http://secunia.com/advisories/25541/", "source": "cve@mitre.org"}, {"url": "http://secunia.com/advisories/29014", "source": "cve@mitre.org"}, {"url": "http://securityreason.com/securityalert/2807", "source": "cve@mitre.org"}, {"url": "http://www.debian.org/security/2008/dsa-1502", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/archive/1/470837/100/0/threaded", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/25161", "source": "cve@mitre.org"}, {"url": "http://www.xssnews.com/", "source": "cve@mitre.org"}, {"url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/34785", "source": "cve@mitre.org"}], "techniques": [{"techniqueID": "TA0002", "comment": "CVE-2007-3238 - Cross-site scripting (XSS) vulnerability in WordPress 2.2 allows remote authenticated administrators to inject arbitrary web script or HTML via the PATH_INFO (REQUEST_URI) to wp-admin/themes.php, a different vulnerability than CVE-2007-1622. This can be mitigated by implementing input validation and sanitization in WordPress."}, {"techniqueID": "T1190", "comment": "CVE-2007-3238 - The vulnerability in WordPress 2.2 allows an attacker to inject arbitrary web script or HTML, which can be used to steal sensitive information or implant malware. This can be mitigated by implementing a web application firewall (WAF) and frequently updating WordPress to the latest version."}, {"techniqueID": "T1505", "comment": "CVE-2007-3238 - The vulnerability in WordPress 2.2 can be used to inject malicious content, such as JavaScript or HTML, which can be used to steal sensitive information or implant malware. This can be mitigated by implementing a content security policy (CSP) in WordPress."}], "stix_bundle": {"bundle": {"type": "bundle", "id": "CVE-2007-3238-STIX-Bundle", "created_by_ref": "https://example.com/stix/owner-1", "modified": "2022-02-20T14:30:00.000", "objects": [{"type": "vulnerability", "id": "CVE-2007-3238-Vulnerability", "name": "Cross-site scripting (XSS) vulnerability in WordPress 2.2", "description": "Cross-site scripting (XSS) vulnerability in functions.php in the default theme in WordPress 2.2 allows remote authenticated administrators to inject arbitrary web script or HTML via the PATH_INFO (REQUEST_URI) to wp-admin/themes.php, a different vulnerability than CVE-2007-1622.", "cvss": {"vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:P", "baseScore": 6.0}, "relatedcourseofaction": [{"type": "course-of-action", "id": "COA-1", "name": "Implement input validation and sanitization in WordPress", "description": "Implement input validation and sanitization in WordPress to prevent XSS attacks"}, {"type": "course-of-action", "id": "COA-2", "name": "Implement a web application firewall (WAF) and frequently update WordPress", "description": "Implement a web application firewall (WAF) and frequently update WordPress to the latest version to prevent XSS attacks"}]}, {"type": "attack-pattern", "id": "TA0002-Attack-Pattern", "name": "Cross-site scripting (XSS)", "description": "Cross-site scripting (XSS) vulnerability in WordPress 2.2 allows remote authenticated administrators to inject arbitrary web script or HTML via the PATH_INFO (REQUEST_URI) to wp-admin/themes.php, a different vulnerability than CVE-2007-1622."}, {"type": "intrusion-set", "id": "Intrusion-Set-1", "name": "WordPress Hackers", "description": "Group of hackers that specialize in exploiting WordPress vulnerabilities"}], "relationship": {"vulnerability_to_attack-pattern": [{"src_ref": "CVE-2007-3238-Vulnerability", "dst_ref": "TA0002-Attack-Pattern", "relationship_type": "exploits"}], "vulnerability_to_intrusion-set": [{"src_ref": "CVE-2007-3238-Vulnerability", "dst_ref": "Intrusion-Set-1", "relationship_type": "targeted_by"}]}}}, "technical_analysis": {"Introduction": "The CVE-2007-3238 vulnerability is a cross-site scripting (XSS) vulnerability in WordPress 2.2 that allows remote authenticated administrators to inject arbitrary web script or HTML via the PATH_INFO (REQUEST_URI) to wp-admin/themes.php. This vulnerability can be exploited by attackers to steal sensitive information or implant malware.", "Impact and Scope": "The impact of this vulnerability is high, with a CVSS base score of 6.0. The scope of this vulnerability is limited to WordPress 2.2 and can be exploited by remote authenticated administrators.", "Related MITRE ATT&CK Techniques": "TA0002 - Cross-site scripting (XSS)", "Technical Details": "The vulnerability occurs when the WordPress theme's functions.php file does not properly validate and sanitize user input. This allows an attacker to inject arbitrary web script or HTML, which can be used to steal sensitive information or implant malware.", "Detection": "Detection can be done by monitoring for suspicious traffic patterns and anomalies in web logs.", "Mitigation": "Mitigation strategies include implementing input validation and sanitization in WordPress, implementing a web application firewall (WAF) and frequently updating WordPress to the latest version.", "Conclusion": "The CVE-2007-3238 vulnerability is a high-risk vulnerability that can be exploited by attackers to steal sensitive information or implant malware. Implementing input validation and sanitization in WordPress, implementing a web application firewall (WAF) and frequently updating WordPress to the latest version can help mitigate this vulnerability."}, "executive_analysis": {"Overview": "The CVE-2007-3238 vulnerability is a high-risk vulnerability in WordPress 2.2 that can be exploited by attackers to steal sensitive information or implant malware.", "Business Impact": "This vulnerability can have significant business impacts, including financial losses, reputational damage and intellectual property theft.", "Technical Impact": "The technical impact of this vulnerability includes the potential for malicious code to be injected into the WordPress website, allowing attackers to steal sensitive information or implant malware.", "Mitigation Strategies": "Implementing input validation and sanitization in WordPress, implementing a web application firewall (WAF) and frequently updating WordPress to the latest version can help mitigate this vulnerability.", "Recommendations": "Executive management should be aware of the risks associated with this vulnerability and take steps to mitigate it. Regular security audits and penetration testing can help identify and remediate vulnerabilities before they can be exploited.", "Conclusions": "The CVE-2007-3238 vulnerability is a high-risk vulnerability that can have significant business impacts. Implementing input validation and sanitization in WordPress, implementing a web application firewall (WAF) and frequently updating WordPress to the latest version can help mitigate this vulnerability."}}